{
	"id": "31cb2e3e568b142c7c32053e44142cff",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"SimpleModulaWallet.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.3;\r\n\r\n// Interface for modules\r\ninterface IModule {\r\n    function init(address wallet) external;\r\n}\r\n\r\n// Interface for the wallet\r\ninterface IWallet {\r\n    function invoke(address _to, uint256 _value, bytes calldata _data) external;\r\n}\r\n\r\n/**\r\n * @title SimpleModularWallet\r\n * @notice A simple modular wallet for hackathon use, inspired by Argent's BaseWallet.\r\n * @dev Allows an owner to manage modules and execute transactions via modules.\r\n */\r\ncontract SimpleModularWallet is IWallet {\r\n    address public owner;\r\n    mapping(address => bool) public authorised;\r\n    uint256 public moduleCount;\r\n\r\n    event AuthorisedModule(address module, bool value);\r\n    event Invoked(address indexed to, uint256 value, bytes data);\r\n    event Received(uint256 value, address sender);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"SW: caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier moduleOnly() {\r\n        require(authorised[msg.sender], \"SW: caller is not authorised module\");\r\n        _;\r\n    }\r\n\r\n    // Initialize the wallet with an owner and a module\r\n    function init(address _owner, address _module) external {\r\n        require(owner == address(0) && moduleCount == 0, \"SW: wallet already initialised\");\r\n        require(_module != address(0), \"SW: module cannot be zero address\");\r\n        owner = _owner;\r\n        authorised[_module] = true;\r\n        moduleCount = 1;\r\n        IModule(_module).init(address(this));\r\n        emit AuthorisedModule(_module, true);\r\n    }\r\n\r\n    // Authorise or deauthorise a module\r\n    function authoriseModule(address _module, bool _value) external onlyOwner {\r\n        require(_module != address(0), \"SW: module cannot be zero address\");\r\n        if (authorised[_module] != _value) {\r\n            emit AuthorisedModule(_module, _value);\r\n            if (_value) {\r\n                moduleCount += 1;\r\n                authorised[_module] = true;\r\n                IModule(_module).init(address(this));\r\n            } else {\r\n                moduleCount -= 1;\r\n                require(moduleCount > 0, \"SW: cannot remove last module\");\r\n                delete authorised[_module];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Execute transactions via modules\r\n    function invoke(address _to, uint256 _value, bytes calldata _data) external override moduleOnly {\r\n        (bool success, ) = _to.call{value: _value}(_data);\r\n        require(success, \"SW: call failed\");\r\n        emit Invoked(_to, _value, _data);\r\n    }\r\n\r\n    // Receive ETH\r\n    receive() external payable {\r\n        emit Received(msg.value, msg.sender);\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"SimpleModulaWallet.sol": {
				"IModule": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "wallet",
									"type": "address"
								}
							],
							"name": "init",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SimpleModulaWallet.sol\":\"IModule\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SimpleModulaWallet.sol\":{\"keccak256\":\"0x2458ec716c1591740f16406abe136b1f4bd817bd97e7a227333db8b095aa8726\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85030714e39800867c10819ce591028222b7cdcafc6d298a1d2bc036cc130d33\",\"dweb:/ipfs/Qmd3HjBcdhQVV75E2wemZjNqfEor1eKJ1SA1N3FTZsgFbw\"]}},\"version\":1}",
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"evm": {
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"init(address)": "19ab453c"
						}
					},
					"irOptimized": ""
				},
				"IWallet": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "invoke",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"invoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SimpleModulaWallet.sol\":\"IWallet\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SimpleModulaWallet.sol\":{\"keccak256\":\"0x2458ec716c1591740f16406abe136b1f4bd817bd97e7a227333db8b095aa8726\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85030714e39800867c10819ce591028222b7cdcafc6d298a1d2bc036cc130d33\",\"dweb:/ipfs/Qmd3HjBcdhQVV75E2wemZjNqfEor1eKJ1SA1N3FTZsgFbw\"]}},\"version\":1}",
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"evm": {
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"invoke(address,uint256,bytes)": "8f6f0332"
						}
					},
					"irOptimized": ""
				},
				"SimpleModularWallet": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "module",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "value",
									"type": "bool"
								}
							],
							"name": "AuthorisedModule",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "Invoked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "Received",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_module",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_value",
									"type": "bool"
								}
							],
							"name": "authoriseModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "authorised",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_module",
									"type": "address"
								}
							],
							"name": "init",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "invoke",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "moduleCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AuthorisedModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Invoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"authoriseModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"invoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moduleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Allows an owner to manage modules and execute transactions via modules.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SimpleModularWallet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A simple modular wallet for hackathon use, inspired by Argent's BaseWallet.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"SimpleModulaWallet.sol\":\"SimpleModularWallet\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SimpleModulaWallet.sol\":{\"keccak256\":\"0x2458ec716c1591740f16406abe136b1f4bd817bd97e7a227333db8b095aa8726\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85030714e39800867c10819ce591028222b7cdcafc6d298a1d2bc036cc130d33\",\"dweb:/ipfs/Qmd3HjBcdhQVV75E2wemZjNqfEor1eKJ1SA1N3FTZsgFbw\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"details": "Allows an owner to manage modules and execute transactions via modules.",
						"kind": "dev",
						"methods": {},
						"title": "SimpleModularWallet",
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "A simple modular wallet for hackathon use, inspired by Argent's BaseWallet.",
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 22,
								"contract": "SimpleModulaWallet.sol:SimpleModularWallet",
								"label": "owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 26,
								"contract": "SimpleModulaWallet.sol:SimpleModularWallet",
								"label": "authorised",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 28,
								"contract": "SimpleModulaWallet.sol:SimpleModularWallet",
								"label": "moduleCount",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 128/65680 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 10524\n// Code size = 32774 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20080]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20080] = a1\n    42: a1 = 0x20090\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20090\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 4 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20084] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 16 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 13 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 2 // 'call_data_copy'\n   849: fallthrough\n      : @24 (gas: 2)\n   850: a1 = i32 [0x20088]\n   855: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   858: a0 = 0x30090\n   863: i32 a0 = a0 + 0\n   865: ecalli 14 // 'set_immutable_data'\n   867: fallthrough\n      : @26 (gas: 3)\n   868: a0 = s1\n   870: a1 = 0\n   872: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   877: i32 a1 = a0 + 0\n   879: a0 = 0\n   881: a2 = 0\n   883: ra = 0x12\n   886: ecalli 13 // 'seal_return'\n   888: fallthrough\n      : @28 [@dyn 9] (gas: 9)\n   889: sp = sp + 0xffffffffffffffc0\n   892: u64 [sp + 0x38] = ra\n   895: u64 [sp + 0x30] = s0\n   898: u64 [sp + 0x28] = s1\n   901: s0 = sp + 0x40\n   904: sp = sp & 0xffffffffffffffe0\n   907: a0 = 0x40\n   910: a1 = 0x20\n   913: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 35)\n   918: u8 [a0 + 31] = 0x80\n   923: u8 [a0 + 30] = 0\n   926: u8 [a0 + 29] = 0\n   929: u8 [a0 + 28] = 0\n   932: u8 [a0 + 27] = 0\n   935: u8 [a0 + 26] = 0\n   938: u8 [a0 + 25] = 0\n   941: u8 [a0 + 24] = 0\n   944: u8 [a0 + 23] = 0\n   947: u8 [a0 + 22] = 0\n   950: u8 [a0 + 21] = 0\n   953: u8 [a0 + 20] = 0\n   956: u8 [a0 + 19] = 0\n   959: u8 [a0 + 18] = 0\n   962: u8 [a0 + 17] = 0\n   965: u8 [a0 + 16] = 0\n   968: u8 [a0 + 15] = 0\n   971: u8 [a0 + 14] = 0\n   974: u8 [a0 + 13] = 0\n   977: u8 [a0 + 12] = 0\n   980: u8 [a0 + 11] = 0\n   983: u8 [a0 + 10] = 0\n   986: u8 [a0 + 9] = 0\n   989: u8 [a0 + 8] = 0\n   992: u8 [a0 + 7] = 0\n   995: u8 [a0 + 3] = 0\n   998: s1 = 0x20084\n  1003: u8 [a0 + 2] = 0\n  1006: u8 [a0 + 1] = 0\n  1009: u8 [a0 + 0] = 0\n  1011: a1 = i32 [0x20084]\n  1016: u8 [a0 + 6] = 0\n  1019: u8 [a0 + 5] = 0\n  1022: u8 [a0 + 4] = 0\n  1025: jump @43 if a1 <u 4\n      : @30 (gas: 5)\n  1030: i32 a0 = sp + 0\n  1032: a1 = 0\n  1034: ra = 0x16\n  1037: ecalli 3 // 'call_data_load'\n  1039: fallthrough\n      : @31 [@dyn 11] (gas: 4)\n  1040: a0 = i32 [sp + 0x1c]\n  1043: a1 = 0xfffffffff09a4000\n  1049: a2 = 0xfffffffff09a4015\n  1055: jump @36 if a2 <s a0\n      : @32 (gas: 1)\n  1058: jump @40 if a0 == 2376452955\n      : @33 (gas: 1)\n  1066: jump @45 if a0 == 2406417202\n      : @34 (gas: 1)\n  1074: jump @42 if a0 != 3605732287\n      : @35 (gas: 14)\n  1082: ra = 0x18\n  1085: sp = sp + 0xffffffffffffff60\n  1089: u64 [sp + 0x98] = ra\n  1093: u64 [sp + 0x90] = s0\n  1097: u64 [sp + 0x88] = s1\n  1101: s0 = sp + 0xa0\n  1105: sp = sp & 0xffffffffffffffe0\n  1108: u64 [sp + 56] = 0\n  1111: u64 [sp + 48] = 0\n  1114: u64 [sp + 40] = 0\n  1117: u64 [sp + 32] = 0\n  1120: i32 a0 = sp + 0x20\n  1123: ecalli 16 // 'value_transferred'\n  1125: jump @144\n      : @36 [@dyn 12] (gas: 2)\n  1128: i32 a1 = a1 + 0x16\n  1131: jump @41 if a0 == a1\n      : @37 (gas: 1)\n  1134: jump @46 if a0 == 521630509\n      : @38 (gas: 1)\n  1142: jump @42 if a0 != 860846789\n      : @39 (gas: 14)\n  1149: ra = 0x1a\n  1152: sp = sp + 0xffffffffffffff60\n  1156: u64 [sp + 0x98] = ra\n  1160: u64 [sp + 0x90] = s0\n  1164: u64 [sp + 0x88] = s1\n  1168: s0 = sp + 0xa0\n  1172: sp = sp & 0xffffffffffffffe0\n  1175: u64 [sp + 56] = 0\n  1178: u64 [sp + 48] = 0\n  1181: u64 [sp + 40] = 0\n  1184: u64 [sp + 32] = 0\n  1187: i32 a0 = sp + 0x20\n  1190: ecalli 16 // 'value_transferred'\n  1192: jump @79\n      : @40 [@dyn 13] (gas: 14)\n  1195: ra = 0x1c\n  1198: sp = sp + 0xffffffffffffff60\n  1202: u64 [sp + 0x98] = ra\n  1206: u64 [sp + 0x90] = s0\n  1210: u64 [sp + 0x88] = s1\n  1214: s0 = sp + 0xa0\n  1218: sp = sp & 0xffffffffffffffe0\n  1221: u64 [sp + 56] = 0\n  1224: u64 [sp + 48] = 0\n  1227: u64 [sp + 40] = 0\n  1230: u64 [sp + 32] = 0\n  1233: i32 a0 = sp + 0x20\n  1236: ecalli 16 // 'value_transferred'\n  1238: jump @90\n      : @41 [@dyn 14] (gas: 1)\n  1241: ra = 30, jump @171\n      : @42 [@dyn 15] (gas: 2)\n  1246: a1 = i32 [s1]\n  1248: fallthrough\n      : @43 (gas: 1)\n  1249: jump @47 if a1 == 0\n      : @44 (gas: 7)\n  1252: ra = 0x20\n  1255: sp = sp + 0xfffffffffffffff8\n  1258: u64 [sp] = ra\n  1260: a0 = 0\n  1262: a1 = 0\n  1264: ra = 0xb0\n  1268: jump @0\n      : @45 [@dyn 16] (gas: 1)\n  1271: ra = 34, jump @124\n      : @46 [@dyn 17] (gas: 13)\n  1276: ra = 0x24\n  1279: sp = sp + 0xffffffffffffff00\n  1283: u64 [sp + 0xf8] = ra\n  1287: u64 [sp + 0xf0] = s0\n  1291: s0 = sp + 0x100\n  1295: sp = sp & 0xffffffffffffffe0\n  1298: u64 [sp + 216] = 0\n  1302: u64 [sp + 208] = 0\n  1306: u64 [sp + 200] = 0\n  1310: u64 [sp + 192] = 0\n  1314: i32 a0 = sp + 0xc0\n  1318: ecalli 16 // 'value_transferred'\n  1320: jump @64\n      : @47 [@dyn 18] (gas: 33)\n  1323: ra = 0x26\n  1326: sp = sp + 0xffffffffffffff20\n  1330: u64 [sp + 0xd8] = ra\n  1334: u64 [sp + 0xd0] = s0\n  1338: u64 [sp + 0xc8] = s1\n  1342: s0 = sp + 0xe0\n  1346: sp = sp & 0xffffffffffffffe0\n  1349: u64 [sp + 120] = 0\n  1352: u64 [sp + 112] = 0\n  1355: u64 [sp + 104] = 0\n  1358: u64 [sp + 96] = 0\n  1361: i32 a0 = sp + 0x60\n  1364: ecalli 16 // 'value_transferred'\n  1366: a0 = u64 [sp + 0x78]\n  1369: u64 [sp + 0x38] = a0\n  1372: a0 = u64 [sp + 0x70]\n  1375: u64 [sp + 0x40] = a0\n  1378: a0 = u64 [sp + 0x68]\n  1381: u64 [sp + 0x48] = a0\n  1384: a0 = u64 [sp + 0x60]\n  1387: u64 [sp + 0x50] = a0\n  1390: i32 a0 = sp + 0x80\n  1394: ecalli 5 // 'caller'\n  1396: a0 = u32 [sp + 0x90]\n  1400: u64 [sp + 0x18] = a0\n  1403: a0 = u64 [sp + 0x88]\n  1407: u64 [sp + 0x10] = a0\n  1410: a0 = u64 [sp + 0x80]\n  1414: u64 [sp + 0x20] = a0\n  1417: a0 = 0x40\n  1420: a1 = 0x20\n  1423: ra = 0x1a4\n  1427: jump @0\n      : @48 [@dyn 19] (gas: 3)\n  1430: a0 = 0\n  1432: a1 = 0\n  1434: ra = 40, jump @0\n      : @49 [@dyn 20] (gas: 6)\n  1439: i32 a1 = a0 + 0\n  1441: a0 = 0\n  1443: a2 = 0\n  1445: ra = 0x2a\n  1448: ecalli 13 // 'seal_return'\n  1450: fallthrough\n      : @50 [@dyn 21] (gas: 7)\n  1451: sp = sp + 0xfffffffffffffff0\n  1454: u64 [sp + 0x8] = ra\n  1457: u64 [sp] = s0\n  1459: s0 = a0\n  1461: a0 = 0x40\n  1464: a1 = 0x20\n  1467: ra = 44, jump @0\n      : @51 [@dyn 22] (gas: 100)\n  1472: a1 = u8 [a0 + 0x1]\n  1475: a2 = u8 [a0]\n  1477: a3 = u8 [a0 + 0x2]\n  1480: a4 = u8 [a0 + 0x3]\n  1483: a1 = a1 << 0x8\n  1486: a1 = a1 | a2\n  1489: a3 = a3 << 0x10\n  1492: a4 = a4 << 0x18\n  1495: a3 = a3 | a4\n  1498: a1 = a1 | a3\n  1501: a2 = u8 [a0 + 0x5]\n  1504: a3 = u8 [a0 + 0x4]\n  1507: a4 = u8 [a0 + 0x6]\n  1510: a5 = u8 [a0 + 0x7]\n  1513: a2 = a2 << 0x8\n  1516: a2 = a2 | a3\n  1519: a4 = a4 << 0x10\n  1522: a5 = a5 << 0x18\n  1525: a4 = a4 | a5\n  1528: a2 = a2 | a4\n  1531: a2 = a2 << 0x20\n  1534: t0 = a2 | a1\n  1537: a2 = u8 [a0 + 0x9]\n  1540: a3 = u8 [a0 + 0x8]\n  1543: a4 = u8 [a0 + 0xa]\n  1546: a5 = u8 [a0 + 0xb]\n  1549: a2 = a2 << 0x8\n  1552: a2 = a2 | a3\n  1555: a4 = a4 << 0x10\n  1558: a5 = a5 << 0x18\n  1561: a4 = a4 | a5\n  1564: a2 = a2 | a4\n  1567: a3 = u8 [a0 + 0xd]\n  1570: a4 = u8 [a0 + 0xc]\n  1573: a5 = u8 [a0 + 0xe]\n  1576: a1 = u8 [a0 + 0xf]\n  1579: a3 = a3 << 0x8\n  1582: a3 = a3 | a4\n  1585: a5 = a5 << 0x10\n  1588: a1 = a1 << 0x18\n  1591: a1 = a1 | a5\n  1594: a1 = a1 | a3\n  1597: a1 = a1 << 0x20\n  1600: t1 = a1 | a2\n  1603: a1 = u8 [a0 + 0x11]\n  1606: a3 = u8 [a0 + 0x10]\n  1609: a4 = u8 [a0 + 0x12]\n  1612: a5 = u8 [a0 + 0x13]\n  1615: a1 = a1 << 0x8\n  1618: a1 = a1 | a3\n  1621: a4 = a4 << 0x10\n  1624: a5 = a5 << 0x18\n  1627: a4 = a4 | a5\n  1630: a1 = a1 | a4\n  1633: a3 = u8 [a0 + 0x15]\n  1636: a4 = u8 [a0 + 0x14]\n  1639: a5 = u8 [a0 + 0x16]\n  1642: a2 = u8 [a0 + 0x17]\n  1645: a3 = a3 << 0x8\n  1648: a3 = a3 | a4\n  1651: a5 = a5 << 0x10\n  1654: a2 = a2 << 0x18\n  1657: a2 = a2 | a5\n  1660: a2 = a2 | a3\n  1663: a2 = a2 << 0x20\n  1666: a3 = a2 | a1\n  1669: a1 = u8 [a0 + 0x19]\n  1672: a2 = u8 [a0 + 0x18]\n  1675: a4 = u8 [a0 + 0x1a]\n  1678: a5 = u8 [a0 + 0x1b]\n  1681: a1 = a1 << 0x8\n  1684: a1 = a1 | a2\n  1687: a4 = a4 << 0x10\n  1690: a5 = a5 << 0x18\n  1693: a4 = a4 | a5\n  1696: a1 = a1 | a4\n  1699: a2 = u8 [a0 + 0x1d]\n  1702: a4 = u8 [a0 + 0x1c]\n  1705: a5 = u8 [a0 + 0x1e]\n  1708: a0 = u8 [a0 + 0x1f]\n  1711: a2 = a2 << 0x8\n  1714: a2 = a2 | a4\n  1717: a5 = a5 << 0x10\n  1720: a0 = a0 << 0x18\n  1723: a0 = a0 | a5\n  1726: a0 = a0 | a2\n  1729: a0 = a0 << 0x20\n  1732: a0 = a0 | a1\n  1735: a0 = reverse a0\n  1737: a1 = reverse a3\n  1739: a2 = reverse t1\n  1741: a3 = reverse t0\n  1743: u64 [s0 + 0x18] = a3\n  1746: u64 [s0 + 0x10] = a2\n  1749: u64 [s0 + 0x8] = a1\n  1752: u64 [s0] = a0\n  1754: ra = u64 [sp + 0x8]\n  1757: s0 = u64 [sp]\n  1759: sp = sp + 0x10\n  1762: ret\n      : @52 (gas: 47)\n  1764: sp = sp + 0xffffffffffffff80\n  1767: u64 [sp + 0x78] = ra\n  1770: u64 [sp + 0x70] = s0\n  1773: u64 [sp + 0x68] = s1\n  1776: s0 = sp + 0x80\n  1780: sp = sp & 0xffffffffffffffe0\n  1783: ra = u64 [a1 + 0x10]\n  1786: a5 = u64 [a1 + 0x8]\n  1789: a3 = u64 [a2 + 0x8]\n  1792: t1 = u64 [a1]\n  1794: a4 = u64 [a2]\n  1796: u64 [sp + 0x28] = a4\n  1799: t2 = u64 [a2 + 0x10]\n  1802: t0 = a3 ^ a5\n  1805: s1 = a3 <u a5\n  1808: a4 = a4 <u t1\n  1811: u64 [sp + 0x20] = a4\n  1814: s1 = a4 if t0 == 0\n  1817: t0 = u64 [a1 + 0x18]\n  1820: a1 = u64 [a2 + 0x18]\n  1823: u64 [sp + 0x18] = a1\n  1826: a2 = t2 - ra\n  1829: a1 = a2 - s1\n  1832: u64 [sp + 0x30] = a1\n  1835: a1 = a2 <u s1\n  1838: a4 = t2 <u ra\n  1841: u64 [sp + 0x38] = t0\n  1844: a2 = u64 [sp + 0x18]\n  1847: a2 = a2 - t0\n  1850: a2 = a2 - a4\n  1853: a2 = a2 - a1\n  1856: a1 = a3 - a5\n  1859: a3 = u64 [sp + 0x20]\n  1862: a1 = a1 - a3\n  1865: a3 = u64 [sp + 0x28]\n  1868: a3 = a3 - t1\n  1871: a4 = a1 >u 0\n  1873: a3 = a3 <u 0x40\n  1876: a3 = a3 ^ 0x1\n  1879: a3 = a4 if a1 != 0\n  1882: s1 = a2 >s 0\n  1884: a1 = u64 [sp + 0x30]\n  1887: a4 = a1 >u 0\n  1889: a4 = s1 if a2 != 0\n  1892: a1 = a1 | a2\n  1895: a3 = a4 if a1 != 0\n  1898: jump @61 if a3 == 0\n      : @53 (gas: 12)\n  1902: s1 = a0\n  1904: a0 = t1 | ra\n  1907: u64 [sp + 0x30] = a5\n  1910: a1 = u64 [sp + 0x38]\n  1913: a1 = a1 | a5\n  1916: a0 = a0 | a1\n  1919: a0 = a0 >> 0x20\n  1922: u64 [sp + 0x28] = ra\n  1925: a1 = a1 | ra\n  1928: a1 = a1 << 0x20\n  1931: a0 = a0 | a1\n  1934: jump @60 if a0 != 0\n      : @54 (gas: 6)\n  1938: u64 [sp + 0x20] = t1\n  1941: i32 a1 = t1 + 0\n  1943: i32 a0 = sp + 0x40\n  1946: u64 [sp + 0x8] = a1\n  1949: ecalli 3 // 'call_data_load'\n  1951: fallthrough\n      : @55 (gas: 10)\n  1952: a4 = u64 [sp + 0x50]\n  1955: a3 = u64 [sp + 0x58]\n  1958: a0 = 0x100000000\n  1968: a1 = a4 ^ a0\n  1971: a1 = a1 | a3\n  1974: a2 = a4 >> 0x20\n  1977: a2 = a2 <u 0x1\n  1980: a2 = 0 if a3 != 0\n  1982: a2 = 0 if a1 == 0\n  1984: jump @61 if a2 == 0\n      : @56 (gas: 12)\n  1988: u64 [sp + 0x10] = a4\n  1991: u64 [sp + 0x18] = a3\n  1994: a1 = u64 [sp + 0x28]\n  1997: a2 = u64 [sp + 0x38]\n  2000: a1 = a1 | a2\n  2003: a0 = 0xffffffe0\n  2013: a2 = u64 [sp + 0x20]\n  2016: a0 = a2 <u a0\n  2019: a2 = u64 [sp + 0x30]\n  2022: a0 = 0 if a2 != 0\n  2024: a0 = 0 if a1 != 0\n  2026: jump @60 if a0 == 0\n      : @57 (gas: 9)\n  2029: a0 = u64 [sp + 0x48]\n  2032: u64 [sp + 0x30] = a0\n  2035: a0 = u64 [sp + 0x40]\n  2038: u64 [sp + 0x38] = a0\n  2041: a0 = u64 [sp + 0x8]\n  2044: i32 a1 = a0 + 0x20\n  2047: i32 a0 = sp + 0x40\n  2050: ecalli 3 // 'call_data_load'\n  2052: fallthrough\n      : @58 (gas: 9)\n  2053: a0 = u64 [sp + 0x58]\n  2056: a1 = u64 [sp + 0x50]\n  2059: a2 = u64 [sp + 0x40]\n  2062: a3 = u64 [sp + 0x48]\n  2065: a4 = a1 | a0\n  2068: a5 = a2 <u 0x2\n  2071: a5 = 0 if a3 != 0\n  2073: a5 = 0 if a4 != 0\n  2075: jump @61 if a5 == 0\n      : @59 (gas: 18)\n  2078: u64 [s1 + 0x28] = a3\n  2081: u64 [s1 + 0x20] = a2\n  2084: a2 = u64 [sp + 0x30]\n  2087: u64 [s1 + 0x8] = a2\n  2090: a2 = u64 [sp + 0x38]\n  2093: u64 [s1] = a2\n  2095: u64 [s1 + 0x30] = a1\n  2098: a1 = u64 [sp + 0x10]\n  2101: u64 [s1 + 0x10] = a1\n  2104: u64 [s1 + 0x38] = a0\n  2107: a0 = u64 [sp + 0x18]\n  2110: u64 [s1 + 0x18] = a0\n  2113: sp = s0 + 0xffffffffffffff80\n  2116: ra = u64 [sp + 0x78]\n  2119: s0 = u64 [sp + 0x70]\n  2122: s1 = u64 [sp + 0x68]\n  2125: sp = sp + 0x80\n  2129: ret\n      : @60 (gas: 1)\n  2131: trap\n      : @61 (gas: 3)\n  2132: a0 = 0\n  2134: a1 = 0\n  2136: ra = 46, jump @0\n      : @62 [@dyn 23] (gas: 6)\n  2141: i32 a1 = a0 + 0\n  2143: a0 = 0x1\n  2146: a2 = 0\n  2148: ra = 0x30\n  2151: ecalli 13 // 'seal_return'\n  2153: fallthrough\n      : @63 [@dyn 24] (gas: 9)\n  2154: a2 = u64 [a1 + 0x18]\n  2157: a3 = u64 [a1 + 0x10]\n  2160: a4 = u64 [a1 + 0x8]\n  2163: a1 = u64 [a1]\n  2165: u64 [a0 + 0x18] = a2\n  2168: u64 [a0 + 0x10] = a3\n  2171: u64 [a0 + 0x8] = a4\n  2174: u64 [a0] = a1\n  2176: ret\n      : @64 (gas: 8)\n  2178: a0 = u64 [sp + 0xd0]\n  2182: a1 = u64 [sp + 0xd8]\n  2186: a2 = u64 [sp + 0xc8]\n  2190: a3 = u64 [sp + 0xc0]\n  2194: a1 = a1 | a2\n  2197: a0 = a0 | a3\n  2200: a0 = a0 | a1\n  2203: jump @70 if a0 != 0\n      : @65 (gas: 13)\n  2207: a0 = u32 [0x20084]\n  2212: u64 [sp + 88] = 0\n  2215: u64 [sp + 80] = 0\n  2218: u64 [sp + 72] = 0\n  2221: u64 [sp + 0x40] = a0\n  2224: u64 [sp + 120] = 0\n  2227: u64 [sp + 112] = 0\n  2230: u64 [sp + 96] = 0x4\n  2234: a0 = sp + 0x80\n  2238: a1 = sp + 0x60\n  2241: a2 = sp + 0x40\n  2244: u64 [sp + 104] = 0\n  2247: ra = 50, jump @52\n      : @66 [@dyn 25] (gas: 19)\n  2252: t0 = u64 [sp + 0x80]\n  2256: t1 = u64 [sp + 0x88]\n  2260: a1 = u64 [sp + 0x90]\n  2264: a3 = u64 [sp + 0x98]\n  2268: a4 = u64 [sp + 0xa0]\n  2272: a5 = u64 [sp + 0xa8]\n  2276: a2 = u64 [sp + 0xb0]\n  2280: a0 = u64 [sp + 0xb8]\n  2284: u64 [sp + 0x18] = a0\n  2287: u64 [sp + 0x10] = a2\n  2290: u64 [sp + 0x8] = a5\n  2293: u64 [sp] = a4\n  2295: u64 [sp + 0x38] = a3\n  2298: u64 [sp + 0x30] = a1\n  2301: u64 [sp + 0x28] = t1\n  2304: a0 = sp + 0x20\n  2307: a1 = sp\n  2309: u64 [sp + 0x20] = t0\n  2312: ra = 52, jump @191\n      : @67 [@dyn 26] (gas: 3)\n  2317: a0 = 0x40\n  2320: a1 = 0x20\n  2323: ra = 54, jump @0\n      : @68 [@dyn 27] (gas: 100)\n  2328: a1 = u8 [a0 + 0x11]\n  2331: a2 = u8 [a0 + 0x10]\n  2334: a3 = u8 [a0 + 0x12]\n  2337: a4 = u8 [a0 + 0x13]\n  2340: a1 = a1 << 0x8\n  2343: a1 = a1 | a2\n  2346: a3 = a3 << 0x10\n  2349: a4 = a4 << 0x18\n  2352: a3 = a3 | a4\n  2355: a1 = a1 | a3\n  2358: a2 = u8 [a0 + 0x15]\n  2361: a3 = u8 [a0 + 0x14]\n  2364: a4 = u8 [a0 + 0x16]\n  2367: a5 = u8 [a0 + 0x17]\n  2370: a2 = a2 << 0x8\n  2373: a2 = a2 | a3\n  2376: a4 = a4 << 0x10\n  2379: a5 = a5 << 0x18\n  2382: a4 = a4 | a5\n  2385: a2 = a2 | a4\n  2388: a2 = a2 << 0x20\n  2391: t0 = a2 | a1\n  2394: a2 = u8 [a0 + 0x1]\n  2397: a3 = u8 [a0]\n  2399: a4 = u8 [a0 + 0x2]\n  2402: a5 = u8 [a0 + 0x3]\n  2405: a2 = a2 << 0x8\n  2408: a2 = a2 | a3\n  2411: a4 = a4 << 0x10\n  2414: a5 = a5 << 0x18\n  2417: a4 = a4 | a5\n  2420: a2 = a2 | a4\n  2423: a3 = u8 [a0 + 0x5]\n  2426: a4 = u8 [a0 + 0x4]\n  2429: a5 = u8 [a0 + 0x6]\n  2432: a1 = u8 [a0 + 0x7]\n  2435: a3 = a3 << 0x8\n  2438: a3 = a3 | a4\n  2441: a5 = a5 << 0x10\n  2444: a1 = a1 << 0x18\n  2447: a1 = a1 | a5\n  2450: a1 = a1 | a3\n  2453: a1 = a1 << 0x20\n  2456: t1 = a1 | a2\n  2459: a1 = u8 [a0 + 0x19]\n  2462: a3 = u8 [a0 + 0x18]\n  2465: a4 = u8 [a0 + 0x1a]\n  2468: a5 = u8 [a0 + 0x1b]\n  2471: a1 = a1 << 0x8\n  2474: a1 = a1 | a3\n  2477: a4 = a4 << 0x10\n  2480: a5 = a5 << 0x18\n  2483: a4 = a4 | a5\n  2486: a1 = a1 | a4\n  2489: a3 = u8 [a0 + 0x1d]\n  2492: a4 = u8 [a0 + 0x1c]\n  2495: a5 = u8 [a0 + 0x1e]\n  2498: a2 = u8 [a0 + 0x1f]\n  2501: a3 = a3 << 0x8\n  2504: a3 = a3 | a4\n  2507: a5 = a5 << 0x10\n  2510: a2 = a2 << 0x18\n  2513: a2 = a2 | a5\n  2516: a2 = a2 | a3\n  2519: a2 = a2 << 0x20\n  2522: a3 = a2 | a1\n  2525: a1 = u8 [a0 + 0x9]\n  2528: a2 = u8 [a0 + 0x8]\n  2531: a4 = u8 [a0 + 0xa]\n  2534: a5 = u8 [a0 + 0xb]\n  2537: a1 = a1 << 0x8\n  2540: a1 = a1 | a2\n  2543: a4 = a4 << 0x10\n  2546: a5 = a5 << 0x18\n  2549: a4 = a4 | a5\n  2552: a1 = a1 | a4\n  2555: a2 = u8 [a0 + 0xd]\n  2558: a4 = u8 [a0 + 0xc]\n  2561: a5 = u8 [a0 + 0xe]\n  2564: a0 = u8 [a0 + 0xf]\n  2567: a2 = a2 << 0x8\n  2570: a2 = a2 | a4\n  2573: a5 = a5 << 0x10\n  2576: a0 = a0 << 0x18\n  2579: a0 = a0 | a5\n  2582: a0 = a0 | a2\n  2585: a0 = a0 << 0x20\n  2588: a0 = a0 | a1\n  2591: a1 = reverse a0\n  2593: a0 = reverse a3\n  2595: a2 = reverse t1\n  2597: a3 = reverse t0\n  2599: a2 = a2 | a3\n  2602: a3 = a0 | a1\n  2605: a3 = a3 | a2\n  2608: a3 = a3 >> 0x20\n  2611: a1 = a1 | a2\n  2614: a1 = a1 << 0x20\n  2617: a1 = a1 | a3\n  2620: jump @72 if a1 == 0\n      : @69 (gas: 1)\n  2623: trap\n      : @70 (gas: 3)\n  2624: a0 = 0\n  2626: a1 = 0\n  2628: ra = 56, jump @0\n      : @71 [@dyn 28] (gas: 7)\n  2633: i32 a1 = a0 + 0\n  2635: a0 = 0x1\n  2638: a2 = 0\n  2640: ecalli 13 // 'seal_return'\n  2642: i32 a0 = a0 + 0\n  2644: ra = 0x3a\n  2647: jump @0\n      : @72 (gas: 2)\n  2650: i32 a0 = a0 + 0\n  2652: ra = 58, jump @0\n      : @73 [@dyn 29] (gas: 6)\n  2657: i32 a1 = a0 + 0\n  2659: a0 = 0\n  2661: a2 = 0\n  2663: ra = 0x3c\n  2666: ecalli 13 // 'seal_return'\n  2668: fallthrough\n      : @74 [@dyn 30] (gas: 19)\n  2669: t0 = u64 [a0 + 0x18]\n  2672: t1 = u64 [a1 + 0x18]\n  2675: a4 = u64 [a0 + 0x10]\n  2678: a5 = u64 [a0 + 0x8]\n  2681: a2 = u64 [a1 + 0x8]\n  2684: t2 = u64 [a0]\n  2686: a3 = u64 [a1]\n  2688: a1 = u64 [a1 + 0x10]\n  2691: a0 = a2 ^ a5\n  2694: a2 = a2 <u a5\n  2697: a3 = a3 <u t2\n  2700: a3 = a2 if a0 != 0\n  2703: a0 = a1 - a4\n  2706: a0 = a0 <u a3\n  2709: a1 = a1 <u a4\n  2712: a2 = t1 - t0\n  2715: a2 = a2 - a1\n  2718: a2 = a2 - a0\n  2721: jump @76 if a2 <s 0\n      : @75 (gas: 1)\n  2724: ret\n      : @76 (gas: 5)\n  2726: sp = sp + 0xfffffffffffffff8\n  2729: u64 [sp] = ra\n  2731: a0 = 0\n  2733: a1 = 0\n  2735: ra = 62, jump @0\n      : @77 [@dyn 31] (gas: 6)\n  2740: i32 a1 = a0 + 0\n  2742: a0 = 0x1\n  2745: a2 = 0\n  2747: ra = 0x40\n  2750: ecalli 13 // 'seal_return'\n  2752: fallthrough\n      : @78 [@dyn 32] (gas: 236)\n  2753: sp = sp + 0xffffffffffffffa0\n  2756: u64 [sp + 0x58] = ra\n  2759: u64 [sp + 0x50] = s0\n  2762: u64 [sp + 0x48] = s1\n  2765: u64 [sp] = a0\n  2767: t0 = u64 [a1]\n  2769: t1 = u64 [a2]\n  2771: a0 = u64 [a2 + 0x8]\n  2774: a3 = u64 [a2 + 0x10]\n  2777: a4 = u64 [a1 + 0x18]\n  2780: s0 = u64 [a1 + 0x10]\n  2783: a2 = u64 [a2 + 0x18]\n  2786: a1 = u64 [a1 + 0x8]\n  2789: t2 = a4 >u 0\n  2791: s1 = s0 >u 0\n  2793: s1 = t2 if a4 != 0\n  2796: ra = a1 >u 0\n  2798: a5 = t0 <u 0x100\n  2802: t2 = a5 ^ 0x1\n  2805: t2 = ra if a1 != 0\n  2808: a4 = a4 | s0\n  2811: t2 = s1 if a4 != 0\n  2814: u8 [sp + 71] = 0\n  2817: u8 [sp + 70] = 0\n  2820: u8 [sp + 69] = 0\n  2823: u8 [sp + 68] = 0\n  2826: u8 [sp + 67] = 0\n  2829: u8 [sp + 66] = 0\n  2832: u8 [sp + 65] = 0\n  2835: u8 [sp + 64] = 0\n  2838: u8 [sp + 63] = 0\n  2841: u8 [sp + 62] = 0\n  2844: u8 [sp + 61] = 0\n  2847: u8 [sp + 60] = 0\n  2850: u8 [sp + 59] = 0\n  2853: u8 [sp + 58] = 0\n  2856: u8 [sp + 57] = 0\n  2859: u8 [sp + 56] = 0\n  2862: u8 [sp + 55] = 0\n  2865: u8 [sp + 54] = 0\n  2868: u8 [sp + 53] = 0\n  2871: u8 [sp + 52] = 0\n  2874: u8 [sp + 51] = 0\n  2877: u8 [sp + 50] = 0\n  2880: u8 [sp + 49] = 0\n  2883: u8 [sp + 48] = 0\n  2886: u8 [sp + 47] = 0\n  2889: u8 [sp + 46] = 0\n  2892: u8 [sp + 45] = 0\n  2895: u8 [sp + 44] = 0\n  2898: u8 [sp + 43] = 0\n  2901: u8 [sp + 42] = 0\n  2904: u8 [sp + 41] = 0\n  2907: u8 [sp + 40] = 0\n  2910: u8 [sp + 0x20] = a2\n  2913: u8 [sp + 0x18] = a3\n  2916: u8 [sp + 0x10] = a0\n  2919: u8 [sp + 0x8] = t1\n  2922: a1 = a2 >> 0x38\n  2925: u8 [sp + 0x27] = a1\n  2928: a1 = a2 >> 0x30\n  2931: u8 [sp + 0x26] = a1\n  2934: a1 = a2 >> 0x28\n  2937: u8 [sp + 0x25] = a1\n  2940: a1 = a2 >> 0x20\n  2943: u8 [sp + 0x24] = a1\n  2946: a1 = a2 >> 0x18\n  2949: u8 [sp + 0x23] = a1\n  2952: a1 = a2 >> 0x10\n  2955: u8 [sp + 0x22] = a1\n  2958: a2 = a2 >> 0x8\n  2961: u8 [sp + 0x21] = a2\n  2964: a1 = a3 >> 0x38\n  2967: u8 [sp + 0x1f] = a1\n  2970: a1 = a3 >> 0x30\n  2973: u8 [sp + 0x1e] = a1\n  2976: a1 = a3 >> 0x28\n  2979: u8 [sp + 0x1d] = a1\n  2982: a1 = a3 >> 0x20\n  2985: u8 [sp + 0x1c] = a1\n  2988: a1 = a3 >> 0x18\n  2991: u8 [sp + 0x1b] = a1\n  2994: a1 = a3 >> 0x10\n  2997: u8 [sp + 0x1a] = a1\n  3000: a3 = a3 >> 0x8\n  3003: u8 [sp + 0x19] = a3\n  3006: a1 = a0 >> 0x38\n  3009: u8 [sp + 0x17] = a1\n  3012: a1 = a0 >> 0x30\n  3015: u8 [sp + 0x16] = a1\n  3018: a1 = a0 >> 0x28\n  3021: u8 [sp + 0x15] = a1\n  3024: a1 = a0 >> 0x20\n  3027: u8 [sp + 0x14] = a1\n  3030: a1 = a0 >> 0x18\n  3033: u8 [sp + 0x13] = a1\n  3036: a1 = a0 >> 0x10\n  3039: u8 [sp + 0x12] = a1\n  3042: a0 = a0 >> 0x8\n  3045: u8 [sp + 0x11] = a0\n  3048: a0 = t1 >> 0x38\n  3051: u8 [sp + 0xf] = a0\n  3054: a0 = t1 >> 0x30\n  3057: u8 [sp + 0xe] = a0\n  3060: a0 = t1 >> 0x28\n  3063: u8 [sp + 0xd] = a0\n  3066: a0 = t1 >> 0x20\n  3069: u8 [sp + 0xc] = a0\n  3072: a0 = t1 >> 0x18\n  3075: u8 [sp + 0xb] = a0\n  3078: a0 = t1 >> 0x10\n  3081: u8 [sp + 0xa] = a0\n  3084: a0 = t1 >> 0x8\n  3087: u8 [sp + 0x9] = a0\n  3090: a0 = t0 << 0x38\n  3093: a0 = a0 >> 0x3b\n  3096: a2 = sp + 0x8\n  3099: a2 = a2 + a0\n  3102: a0 = u8 [a2 + 0x11]\n  3105: a1 = u8 [a2 + 0x10]\n  3108: a3 = u8 [a2 + 0x12]\n  3111: a4 = u8 [a2 + 0x13]\n  3114: a0 = a0 << 0x8\n  3117: a0 = a0 | a1\n  3120: a3 = a3 << 0x10\n  3123: a4 = a4 << 0x18\n  3126: a3 = a3 | a4\n  3129: a0 = a0 | a3\n  3132: a1 = u8 [a2 + 0x15]\n  3135: a3 = u8 [a2 + 0x14]\n  3138: a4 = u8 [a2 + 0x16]\n  3141: a5 = u8 [a2 + 0x17]\n  3144: a1 = a1 << 0x8\n  3147: a1 = a1 | a3\n  3150: a4 = a4 << 0x10\n  3153: a5 = a5 << 0x18\n  3156: a4 = a4 | a5\n  3159: a1 = a1 | a4\n  3162: a1 = a1 << 0x20\n  3165: ra = a1 | a0\n  3168: a3 = t0 & 0x7\n  3171: a1 = ra >> a3\n  3174: a0 = u8 [a2 + 0x19]\n  3177: a4 = u8 [a2 + 0x18]\n  3180: s1 = u8 [a2 + 0x1a]\n  3183: s0 = u8 [a2 + 0x1b]\n  3186: a0 = a0 << 0x8\n  3189: a0 = a0 | a4\n  3192: s1 = s1 << 0x10\n  3195: s0 = s0 << 0x18\n  3198: s0 = s0 | s1\n  3201: a0 = a0 | s0\n  3204: a4 = u8 [a2 + 0x1d]\n  3207: s1 = u8 [a2 + 0x1c]\n  3210: s0 = u8 [a2 + 0x1e]\n  3213: a5 = u8 [a2 + 0x1f]\n  3216: a4 = a4 << 0x8\n  3219: a4 = a4 | s1\n  3222: s0 = s0 << 0x10\n  3225: a5 = a5 << 0x18\n  3228: a5 = a5 | s0\n  3231: a4 = a4 | a5\n  3234: a4 = a4 << 0x20\n  3237: t0 = a4 | a0\n  3240: a0 = t0 << 0x1\n  3243: t1 = a3 ^ 0x3f\n  3246: a4 = a0 << t1\n  3249: a4 = a4 | a1\n  3252: a0 = u8 [a2 + 0x9]\n  3255: a1 = u8 [a2 + 0x8]\n  3258: a5 = u8 [a2 + 0xa]\n  3261: s0 = u8 [a2 + 0xb]\n  3264: a0 = a0 << 0x8\n  3267: a0 = a0 | a1\n  3270: a5 = a5 << 0x10\n  3273: s0 = s0 << 0x18\n  3276: a5 = a5 | s0\n  3279: a0 = a0 | a5\n  3282: a1 = u8 [a2 + 0xd]\n  3285: a5 = u8 [a2 + 0xc]\n  3288: s0 = u8 [a2 + 0xe]\n  3291: s1 = u8 [a2 + 0xf]\n  3294: a1 = a1 << 0x8\n  3297: a1 = a1 | a5\n  3300: s0 = s0 << 0x10\n  3303: s1 = s1 << 0x18\n  3306: s0 = s0 | s1\n  3309: a1 = a1 | s0\n  3312: a1 = a1 << 0x20\n  3315: a1 = a1 | a0\n  3318: a0 = a1 >> a3\n  3321: ra = ra << 0x1\n  3324: a5 = a3 ^ 0xffffffffffffffff\n  3327: a5 = ra << a5\n  3330: ra = a0 | a5\n  3333: a0 = u8 [a2 + 0x1]\n  3336: s0 = u8 [a2]\n  3338: s1 = u8 [a2 + 0x2]\n  3341: a5 = u8 [a2 + 0x3]\n  3344: a0 = a0 << 0x8\n  3347: a0 = a0 | s0\n  3350: s1 = s1 << 0x10\n  3353: a5 = a5 << 0x18\n  3356: a5 = a5 | s1\n  3359: a0 = a0 | a5\n  3362: a5 = u8 [a2 + 0x5]\n  3365: s0 = u8 [a2 + 0x4]\n  3368: s1 = u8 [a2 + 0x6]\n  3371: a2 = u8 [a2 + 0x7]\n  3374: a5 = a5 << 0x8\n  3377: a5 = a5 | s0\n  3380: s1 = s1 << 0x10\n  3383: a2 = a2 << 0x18\n  3386: a2 = a2 | s1\n  3389: a2 = a2 | a5\n  3392: a2 = a2 << 0x20\n  3395: a0 = a0 | a2\n  3398: a0 = a0 >> a3\n  3401: a1 = a1 << 0x1\n  3404: a1 = a1 << t1\n  3407: a0 = a0 | a1\n  3410: a1 = t0 >> a3\n  3413: a0 = 0 if t2 != 0\n  3415: ra = 0 if t2 != 0\n  3417: a4 = 0 if t2 != 0\n  3419: a1 = 0 if t2 != 0\n  3421: a2 = u64 [sp]\n  3423: u64 [a2 + 0x18] = a1\n  3426: u64 [a2 + 0x10] = a4\n  3429: u64 [a2 + 0x8] = ra\n  3432: u64 [a2] = a0\n  3434: ra = u64 [sp + 0x58]\n  3437: s0 = u64 [sp + 0x50]\n  3440: s1 = u64 [sp + 0x48]\n  3443: sp = sp + 0x60\n  3446: ret\n      : @79 (gas: 8)\n  3448: a0 = u64 [sp + 0x30]\n  3451: a1 = u64 [sp + 0x38]\n  3454: a2 = u64 [sp + 0x28]\n  3457: a3 = u64 [sp + 0x20]\n  3460: a1 = a1 | a2\n  3463: a0 = a0 | a3\n  3466: a0 = a0 | a1\n  3469: jump @84 if a0 != 0\n      : @80 (gas: 2)\n  3473: a0 = i32 [0x20084]\n  3478: jump @84 if a0 <=u 3\n      : @81 (gas: 26)\n  3483: u64 [sp + 88] = 0\n  3486: u64 [sp + 80] = 0\n  3489: u64 [sp + 72] = 0\n  3492: u64 [sp + 64] = 0x2\n  3496: u64 [sp + 120] = 0\n  3499: u64 [sp + 112] = 0\n  3502: u64 [sp + 104] = 0\n  3505: u64 [sp + 96] = 0\n  3508: u32 [sp + 128] = 0x20\n  3513: i32 a1 = sp + 0x40\n  3516: i32 a3 = sp + 0x60\n  3519: i32 a4 = sp + 0x80\n  3523: a2 = 0xffffffffffffffff\n  3526: a0 = 0\n  3528: ecalli 8 // 'get_storage'\n  3530: a0 = u64 [sp + 0x78]\n  3533: u64 [sp] = a0\n  3535: a0 = u64 [sp + 0x70]\n  3538: u64 [sp + 0x8] = a0\n  3541: a0 = u64 [sp + 0x68]\n  3544: u64 [sp + 0x10] = a0\n  3547: a0 = u64 [sp + 0x60]\n  3550: u64 [sp + 0x18] = a0\n  3553: a0 = 0x40\n  3556: a1 = 0x20\n  3559: ra = 66, jump @0\n      : @82 [@dyn 33] (gas: 100)\n  3564: a1 = u8 [a0 + 0x11]\n  3567: a2 = u8 [a0 + 0x10]\n  3570: a3 = u8 [a0 + 0x12]\n  3573: a4 = u8 [a0 + 0x13]\n  3576: a1 = a1 << 0x8\n  3579: a1 = a1 | a2\n  3582: a3 = a3 << 0x10\n  3585: a4 = a4 << 0x18\n  3588: a3 = a3 | a4\n  3591: a1 = a1 | a3\n  3594: a2 = u8 [a0 + 0x15]\n  3597: a3 = u8 [a0 + 0x14]\n  3600: a4 = u8 [a0 + 0x16]\n  3603: a5 = u8 [a0 + 0x17]\n  3606: a2 = a2 << 0x8\n  3609: a2 = a2 | a3\n  3612: a4 = a4 << 0x10\n  3615: a5 = a5 << 0x18\n  3618: a4 = a4 | a5\n  3621: a2 = a2 | a4\n  3624: a2 = a2 << 0x20\n  3627: t0 = a2 | a1\n  3630: a2 = u8 [a0 + 0x1]\n  3633: a3 = u8 [a0]\n  3635: a4 = u8 [a0 + 0x2]\n  3638: a5 = u8 [a0 + 0x3]\n  3641: a2 = a2 << 0x8\n  3644: a2 = a2 | a3\n  3647: a4 = a4 << 0x10\n  3650: a5 = a5 << 0x18\n  3653: a4 = a4 | a5\n  3656: a2 = a2 | a4\n  3659: a3 = u8 [a0 + 0x5]\n  3662: a4 = u8 [a0 + 0x4]\n  3665: a5 = u8 [a0 + 0x6]\n  3668: s1 = u8 [a0 + 0x7]\n  3671: a3 = a3 << 0x8\n  3674: a3 = a3 | a4\n  3677: a5 = a5 << 0x10\n  3680: s1 = s1 << 0x18\n  3683: a5 = a5 | s1\n  3686: a3 = a3 | a5\n  3689: a3 = a3 << 0x20\n  3692: a2 = a2 | a3\n  3695: a3 = u8 [a0 + 0x19]\n  3698: a4 = u8 [a0 + 0x18]\n  3701: a5 = u8 [a0 + 0x1a]\n  3704: s1 = u8 [a0 + 0x1b]\n  3707: a3 = a3 << 0x8\n  3710: a3 = a3 | a4\n  3713: a5 = a5 << 0x10\n  3716: s1 = s1 << 0x18\n  3719: a5 = a5 | s1\n  3722: a3 = a3 | a5\n  3725: a4 = u8 [a0 + 0x1d]\n  3728: a5 = u8 [a0 + 0x1c]\n  3731: s1 = u8 [a0 + 0x1e]\n  3734: a1 = u8 [a0 + 0x1f]\n  3737: a4 = a4 << 0x8\n  3740: a4 = a4 | a5\n  3743: s1 = s1 << 0x10\n  3746: a1 = a1 << 0x18\n  3749: a1 = a1 | s1\n  3752: a1 = a1 | a4\n  3755: a1 = a1 << 0x20\n  3758: a3 = a3 | a1\n  3761: a1 = u8 [a0 + 0x9]\n  3764: a4 = u8 [a0 + 0x8]\n  3767: a5 = u8 [a0 + 0xa]\n  3770: s1 = u8 [a0 + 0xb]\n  3773: a1 = a1 << 0x8\n  3776: a1 = a1 | a4\n  3779: a5 = a5 << 0x10\n  3782: s1 = s1 << 0x18\n  3785: a5 = a5 | s1\n  3788: a1 = a1 | a5\n  3791: a4 = u8 [a0 + 0xd]\n  3794: a5 = u8 [a0 + 0xc]\n  3797: s1 = u8 [a0 + 0xe]\n  3800: a0 = u8 [a0 + 0xf]\n  3803: a4 = a4 << 0x8\n  3806: a4 = a4 | a5\n  3809: s1 = s1 << 0x10\n  3812: a0 = a0 << 0x18\n  3815: a0 = a0 | s1\n  3818: a0 = a0 | a4\n  3821: a0 = a0 << 0x20\n  3824: a0 = a0 | a1\n  3827: a1 = reverse a0\n  3829: a0 = reverse a3\n  3831: a2 = reverse a2\n  3833: a3 = reverse t0\n  3835: a2 = a2 | a3\n  3838: a3 = a0 | a1\n  3841: a3 = a3 | a2\n  3844: a3 = a3 >> 0x20\n  3847: a1 = a1 | a2\n  3850: a1 = a1 << 0x20\n  3853: a1 = a1 | a3\n  3856: jump @86 if a1 == 0\n      : @83 (gas: 1)\n  3859: trap\n      : @84 (gas: 3)\n  3860: a0 = 0\n  3862: a1 = 0\n  3864: ra = 68, jump @0\n      : @85 [@dyn 34] (gas: 5)\n  3869: i32 a1 = a0 + 0\n  3871: a0 = 0x1\n  3874: a2 = 0\n  3876: ecalli 13 // 'seal_return'\n  3878: fallthrough\n      : @86 (gas: 4)\n  3879: i32 s1 = a0 + 0\n  3881: a1 = 0x20\n  3884: a0 = s1\n  3886: ra = 70, jump @0\n      : @87 [@dyn 35] (gas: 71)\n  3891: a1 = u64 [sp]\n  3893: a1 = reverse a1\n  3895: a2 = u64 [sp + 0x8]\n  3898: a2 = reverse a2\n  3900: a3 = u64 [sp + 0x10]\n  3903: a3 = reverse a3\n  3905: a4 = u64 [sp + 0x18]\n  3908: a4 = reverse a4\n  3910: a5 = a4 >> 0x38\n  3913: u8 [a0 + 0x1f] = a5\n  3916: a5 = a4 >> 0x30\n  3919: u8 [a0 + 0x1e] = a5\n  3922: a5 = a4 >> 0x28\n  3925: u8 [a0 + 0x1d] = a5\n  3928: a5 = a4 >> 0x20\n  3931: u8 [a0 + 0x1c] = a5\n  3934: a5 = a4 >> 0x18\n  3937: u8 [a0 + 0x1b] = a5\n  3940: a5 = a4 >> 0x10\n  3943: u8 [a0 + 0x1a] = a5\n  3946: a5 = a4 >> 0x8\n  3949: u8 [a0 + 0x19] = a5\n  3952: u8 [a0 + 0x18] = a4\n  3955: u8 [a0 + 0x10] = a3\n  3958: a4 = a3 >> 0x38\n  3961: u8 [a0 + 0x17] = a4\n  3964: a4 = a3 >> 0x30\n  3967: u8 [a0 + 0x16] = a4\n  3970: a4 = a3 >> 0x28\n  3973: u8 [a0 + 0x15] = a4\n  3976: a4 = a3 >> 0x20\n  3979: u8 [a0 + 0x14] = a4\n  3982: a4 = a3 >> 0x18\n  3985: u8 [a0 + 0x13] = a4\n  3988: a4 = a3 >> 0x10\n  3991: u8 [a0 + 0x12] = a4\n  3994: a3 = a3 >> 0x8\n  3997: u8 [a0 + 0x11] = a3\n  4000: u8 [a0 + 0x8] = a2\n  4003: a3 = a2 >> 0x38\n  4006: u8 [a0 + 0xf] = a3\n  4009: a3 = a2 >> 0x30\n  4012: u8 [a0 + 0xe] = a3\n  4015: a3 = a2 >> 0x28\n  4018: u8 [a0 + 0xd] = a3\n  4021: a3 = a2 >> 0x20\n  4024: u8 [a0 + 0xc] = a3\n  4027: a3 = a2 >> 0x18\n  4030: u8 [a0 + 0xb] = a3\n  4033: a3 = a2 >> 0x10\n  4036: u8 [a0 + 0xa] = a3\n  4039: a2 = a2 >> 0x8\n  4042: u8 [a0 + 0x9] = a2\n  4045: u8 [a0] = a1\n  4047: a2 = a1 >> 0x38\n  4050: u8 [a0 + 0x7] = a2\n  4053: a2 = a1 >> 0x30\n  4056: u8 [a0 + 0x6] = a2\n  4059: a2 = a1 >> 0x28\n  4062: u8 [a0 + 0x5] = a2\n  4065: a2 = a1 >> 0x20\n  4068: u8 [a0 + 0x4] = a2\n  4071: a2 = a1 >> 0x18\n  4074: u8 [a0 + 0x3] = a2\n  4077: a2 = a1 >> 0x10\n  4080: u8 [a0 + 0x2] = a2\n  4083: a1 = a1 >> 0x8\n  4086: u8 [a0 + 0x1] = a1\n  4089: a1 = 0x20\n  4092: a0 = s1\n  4094: ra = 72, jump @0\n      : @88 [@dyn 36] (gas: 6)\n  4099: i32 a1 = a0 + 0\n  4101: a2 = 0x20\n  4104: a0 = 0\n  4106: ra = 0x4a\n  4109: ecalli 13 // 'seal_return'\n  4111: fallthrough\n      : @89 [@dyn 37] (gas: 194)\n  4112: sp = sp + 0xffffffffffffffa0\n  4115: u64 [sp + 0x58] = ra\n  4118: u64 [sp + 0x50] = s0\n  4121: u64 [sp + 0x48] = s1\n  4124: u64 [sp] = a0\n  4126: t1 = u64 [a1]\n  4128: ra = u64 [a1 + 0x8]\n  4131: a4 = u64 [a1 + 0x10]\n  4134: a1 = u64 [a1 + 0x18]\n  4137: t0 = u64 [a2]\n  4139: a3 = u64 [a2 + 0x8]\n  4142: t2 = u64 [a2 + 0x18]\n  4145: a2 = u64 [a2 + 0x10]\n  4148: s0 = t0 >> 0x3d\n  4151: s1 = a3 << 0x3\n  4154: s0 = s0 | s1\n  4157: a3 = a3 >> 0x3d\n  4160: s1 = a2 << 0x3\n  4163: a3 = a3 | s1\n  4166: a2 = a2 >> 0x3d\n  4169: t2 = t2 << 0x3\n  4172: s1 = t2 | a2\n  4175: t2 = t0 << 0x3\n  4178: a2 = s1 >u 0\n  4180: a5 = a3 >u 0\n  4182: a5 = a2 if s1 != 0\n  4185: a0 = s0 >u 0\n  4187: a2 = t2 <u 0x100\n  4191: t2 = a2 ^ 0x1\n  4194: t2 = a0 if s0 != 0\n  4197: a3 = a3 | s1\n  4200: t2 = a5 if a3 != 0\n  4203: u8 [sp + 71] = 0\n  4206: u8 [sp + 70] = 0\n  4209: u8 [sp + 69] = 0\n  4212: u8 [sp + 68] = 0\n  4215: u8 [sp + 67] = 0\n  4218: u8 [sp + 66] = 0\n  4221: u8 [sp + 65] = 0\n  4224: u8 [sp + 64] = 0\n  4227: u8 [sp + 63] = 0\n  4230: u8 [sp + 62] = 0\n  4233: u8 [sp + 61] = 0\n  4236: u8 [sp + 60] = 0\n  4239: u8 [sp + 59] = 0\n  4242: u8 [sp + 58] = 0\n  4245: u8 [sp + 57] = 0\n  4248: u8 [sp + 56] = 0\n  4251: u8 [sp + 55] = 0\n  4254: u8 [sp + 54] = 0\n  4257: u8 [sp + 53] = 0\n  4260: u8 [sp + 52] = 0\n  4263: u8 [sp + 51] = 0\n  4266: u8 [sp + 50] = 0\n  4269: u8 [sp + 49] = 0\n  4272: u8 [sp + 48] = 0\n  4275: u8 [sp + 47] = 0\n  4278: u8 [sp + 46] = 0\n  4281: u8 [sp + 45] = 0\n  4284: u8 [sp + 44] = 0\n  4287: u8 [sp + 43] = 0\n  4290: u8 [sp + 42] = 0\n  4293: u8 [sp + 41] = 0\n  4296: u8 [sp + 40] = 0\n  4299: u8 [sp + 0x20] = a1\n  4302: u8 [sp + 0x18] = a4\n  4305: u8 [sp + 0x10] = ra\n  4308: u8 [sp + 0x8] = t1\n  4311: a0 = a1 >> 0x38\n  4314: u8 [sp + 0x27] = a0\n  4317: a0 = a1 >> 0x30\n  4320: u8 [sp + 0x26] = a0\n  4323: a0 = a1 >> 0x28\n  4326: u8 [sp + 0x25] = a0\n  4329: a0 = a1 >> 0x20\n  4332: u8 [sp + 0x24] = a0\n  4335: a0 = a1 >> 0x18\n  4338: u8 [sp + 0x23] = a0\n  4341: a0 = a1 >> 0x10\n  4344: u8 [sp + 0x22] = a0\n  4347: a1 = a1 >> 0x8\n  4350: u8 [sp + 0x21] = a1\n  4353: a0 = a4 >> 0x38\n  4356: u8 [sp + 0x1f] = a0\n  4359: a0 = a4 >> 0x30\n  4362: u8 [sp + 0x1e] = a0\n  4365: a0 = a4 >> 0x28\n  4368: u8 [sp + 0x1d] = a0\n  4371: a0 = a4 >> 0x20\n  4374: u8 [sp + 0x1c] = a0\n  4377: a0 = a4 >> 0x18\n  4380: u8 [sp + 0x1b] = a0\n  4383: a0 = a4 >> 0x10\n  4386: u8 [sp + 0x1a] = a0\n  4389: a4 = a4 >> 0x8\n  4392: u8 [sp + 0x19] = a4\n  4395: a0 = ra >> 0x38\n  4398: u8 [sp + 0x17] = a0\n  4401: a0 = ra >> 0x30\n  4404: u8 [sp + 0x16] = a0\n  4407: a0 = ra >> 0x28\n  4410: u8 [sp + 0x15] = a0\n  4413: a0 = ra >> 0x20\n  4416: u8 [sp + 0x14] = a0\n  4419: a0 = ra >> 0x18\n  4422: u8 [sp + 0x13] = a0\n  4425: a0 = ra >> 0x10\n  4428: u8 [sp + 0x12] = a0\n  4431: a0 = ra >> 0x8\n  4434: u8 [sp + 0x11] = a0\n  4437: a0 = t1 >> 0x38\n  4440: u8 [sp + 0xf] = a0\n  4443: a0 = t1 >> 0x30\n  4446: u8 [sp + 0xe] = a0\n  4449: a0 = t1 >> 0x28\n  4452: u8 [sp + 0xd] = a0\n  4455: a0 = t1 >> 0x20\n  4458: u8 [sp + 0xc] = a0\n  4461: a0 = t1 >> 0x18\n  4464: u8 [sp + 0xb] = a0\n  4467: a0 = t1 >> 0x10\n  4470: u8 [sp + 0xa] = a0\n  4473: a0 = t1 >> 0x8\n  4476: u8 [sp + 0x9] = a0\n  4479: a1 = t0 & 0x1f\n  4482: a0 = sp + 0x8\n  4485: a1 = a1 + a0\n  4488: a0 = u8 [a1 + 0x9]\n  4491: a2 = u8 [a1 + 0x8]\n  4494: a3 = u8 [a1 + 0xa]\n  4497: a4 = u8 [a1 + 0xb]\n  4500: a0 = a0 << 0x8\n  4503: a0 = a0 | a2\n  4506: a3 = a3 << 0x10\n  4509: a4 = a4 << 0x18\n  4512: a3 = a3 | a4\n  4515: a0 = a0 | a3\n  4518: a2 = u8 [a1 + 0xd]\n  4521: a3 = u8 [a1 + 0xc]\n  4524: a4 = u8 [a1 + 0xe]\n  4527: a5 = u8 [a1 + 0xf]\n  4530: a2 = a2 << 0x8\n  4533: a2 = a2 | a3\n  4536: a4 = a4 << 0x10\n  4539: a5 = a5 << 0x18\n  4542: a4 = a4 | a5\n  4545: a2 = a2 | a4\n  4548: a2 = a2 << 0x20\n  4551: a3 = a2 | a0\n  4554: a0 = u8 [a1 + 0x1]\n  4557: a2 = u8 [a1]\n  4559: a4 = u8 [a1 + 0x2]\n  4562: a5 = u8 [a1 + 0x3]\n  4565: a0 = a0 << 0x8\n  4568: a0 = a0 | a2\n  4571: a4 = a4 << 0x10\n  4574: a5 = a5 << 0x18\n  4577: a4 = a4 | a5\n  4580: a0 = a0 | a4\n  4583: a2 = u8 [a1 + 0x5]\n  4586: a4 = u8 [a1 + 0x4]\n  4589: a5 = u8 [a1 + 0x6]\n  4592: s1 = u8 [a1 + 0x7]\n  4595: a2 = a2 << 0x8\n  4598: a2 = a2 | a4\n  4601: a5 = a5 << 0x10\n  4604: s1 = s1 << 0x18\n  4607: a5 = a5 | s1\n  4610: a2 = a2 | a5\n  4613: a2 = a2 << 0x20\n  4616: a0 = a0 | a2\n  4619: a2 = u8 [a1 + 0x11]\n  4622: a4 = u8 [a1 + 0x10]\n  4625: a5 = u8 [a1 + 0x12]\n  4628: a1 = u8 [a1 + 0x13]\n  4631: a2 = a2 << 0x8\n  4634: a2 = a2 | a4\n  4637: a5 = a5 << 0x10\n  4640: a1 = a1 << 0x18\n  4643: a1 = a1 | a5\n  4646: a1 = a1 | a2\n  4649: a0 = 0 if t2 != 0\n  4651: a3 = 0 if t2 != 0\n  4653: a1 = 0 if t2 != 0\n  4655: a2 = u64 [sp]\n  4657: u64 [a2 + 24] = 0\n  4660: u64 [a2 + 0x10] = a1\n  4663: u64 [a2 + 0x8] = a3\n  4666: u64 [a2] = a0\n  4668: ra = u64 [sp + 0x58]\n  4671: s0 = u64 [sp + 0x50]\n  4674: s1 = u64 [sp + 0x48]\n  4677: sp = sp + 0x60\n  4680: ret\n      : @90 (gas: 8)\n  4682: a0 = u64 [sp + 0x30]\n  4685: a1 = u64 [sp + 0x38]\n  4688: a2 = u64 [sp + 0x28]\n  4691: a3 = u64 [sp + 0x20]\n  4694: a1 = a1 | a2\n  4697: a0 = a0 | a3\n  4700: a0 = a0 | a1\n  4703: jump @95 if a0 != 0\n      : @91 (gas: 2)\n  4707: a0 = i32 [0x20084]\n  4712: jump @95 if a0 <=u 3\n      : @92 (gas: 24)\n  4717: u64 [sp + 88] = 0\n  4720: u64 [sp + 80] = 0\n  4723: u64 [sp + 72] = 0\n  4726: u64 [sp + 64] = 0\n  4729: u64 [sp + 120] = 0\n  4732: u64 [sp + 112] = 0\n  4735: u64 [sp + 104] = 0\n  4738: u64 [sp + 96] = 0\n  4741: u32 [sp + 128] = 0x20\n  4746: i32 a1 = sp + 0x40\n  4749: i32 a3 = sp + 0x60\n  4752: i32 a4 = sp + 0x80\n  4756: a2 = 0xffffffffffffffff\n  4759: a0 = 0\n  4761: ecalli 8 // 'get_storage'\n  4763: a0 = u64 [sp + 0x70]\n  4766: u64 [sp + 0x8] = a0\n  4769: a0 = u64 [sp + 0x68]\n  4772: u64 [sp + 0x10] = a0\n  4775: a0 = u64 [sp + 0x60]\n  4778: u64 [sp + 0x18] = a0\n  4781: a0 = 0x40\n  4784: a1 = 0x20\n  4787: ra = 76, jump @0\n      : @93 [@dyn 38] (gas: 100)\n  4792: a1 = u8 [a0 + 0x11]\n  4795: a2 = u8 [a0 + 0x10]\n  4798: a3 = u8 [a0 + 0x12]\n  4801: a4 = u8 [a0 + 0x13]\n  4804: a1 = a1 << 0x8\n  4807: a1 = a1 | a2\n  4810: a3 = a3 << 0x10\n  4813: a4 = a4 << 0x18\n  4816: a3 = a3 | a4\n  4819: a1 = a1 | a3\n  4822: a2 = u8 [a0 + 0x15]\n  4825: a3 = u8 [a0 + 0x14]\n  4828: a4 = u8 [a0 + 0x16]\n  4831: a5 = u8 [a0 + 0x17]\n  4834: a2 = a2 << 0x8\n  4837: a2 = a2 | a3\n  4840: a4 = a4 << 0x10\n  4843: a5 = a5 << 0x18\n  4846: a4 = a4 | a5\n  4849: a2 = a2 | a4\n  4852: a2 = a2 << 0x20\n  4855: t0 = a2 | a1\n  4858: a2 = u8 [a0 + 0x1]\n  4861: a3 = u8 [a0]\n  4863: a4 = u8 [a0 + 0x2]\n  4866: a5 = u8 [a0 + 0x3]\n  4869: a2 = a2 << 0x8\n  4872: a2 = a2 | a3\n  4875: a4 = a4 << 0x10\n  4878: a5 = a5 << 0x18\n  4881: a4 = a4 | a5\n  4884: a2 = a2 | a4\n  4887: a3 = u8 [a0 + 0x5]\n  4890: a4 = u8 [a0 + 0x4]\n  4893: a5 = u8 [a0 + 0x6]\n  4896: s1 = u8 [a0 + 0x7]\n  4899: a3 = a3 << 0x8\n  4902: a3 = a3 | a4\n  4905: a5 = a5 << 0x10\n  4908: s1 = s1 << 0x18\n  4911: a5 = a5 | s1\n  4914: a3 = a3 | a5\n  4917: a3 = a3 << 0x20\n  4920: a2 = a2 | a3\n  4923: a3 = u8 [a0 + 0x19]\n  4926: a4 = u8 [a0 + 0x18]\n  4929: a5 = u8 [a0 + 0x1a]\n  4932: s1 = u8 [a0 + 0x1b]\n  4935: a3 = a3 << 0x8\n  4938: a3 = a3 | a4\n  4941: a5 = a5 << 0x10\n  4944: s1 = s1 << 0x18\n  4947: a5 = a5 | s1\n  4950: a3 = a3 | a5\n  4953: a4 = u8 [a0 + 0x1d]\n  4956: a5 = u8 [a0 + 0x1c]\n  4959: s1 = u8 [a0 + 0x1e]\n  4962: a1 = u8 [a0 + 0x1f]\n  4965: a4 = a4 << 0x8\n  4968: a4 = a4 | a5\n  4971: s1 = s1 << 0x10\n  4974: a1 = a1 << 0x18\n  4977: a1 = a1 | s1\n  4980: a1 = a1 | a4\n  4983: a1 = a1 << 0x20\n  4986: a3 = a3 | a1\n  4989: a1 = u8 [a0 + 0x9]\n  4992: a4 = u8 [a0 + 0x8]\n  4995: a5 = u8 [a0 + 0xa]\n  4998: s1 = u8 [a0 + 0xb]\n  5001: a1 = a1 << 0x8\n  5004: a1 = a1 | a4\n  5007: a5 = a5 << 0x10\n  5010: s1 = s1 << 0x18\n  5013: a5 = a5 | s1\n  5016: a1 = a1 | a5\n  5019: a4 = u8 [a0 + 0xd]\n  5022: a5 = u8 [a0 + 0xc]\n  5025: s1 = u8 [a0 + 0xe]\n  5028: a0 = u8 [a0 + 0xf]\n  5031: a4 = a4 << 0x8\n  5034: a4 = a4 | a5\n  5037: s1 = s1 << 0x10\n  5040: a0 = a0 << 0x18\n  5043: a0 = a0 | s1\n  5046: a0 = a0 | a4\n  5049: a0 = a0 << 0x20\n  5052: a0 = a0 | a1\n  5055: a1 = reverse a0\n  5057: a0 = reverse a3\n  5059: a2 = reverse a2\n  5061: a3 = reverse t0\n  5063: a2 = a2 | a3\n  5066: a3 = a0 | a1\n  5069: a3 = a3 | a2\n  5072: a3 = a3 >> 0x20\n  5075: a1 = a1 | a2\n  5078: a1 = a1 << 0x20\n  5081: a1 = a1 | a3\n  5084: jump @97 if a1 == 0\n      : @94 (gas: 1)\n  5087: trap\n      : @95 (gas: 3)\n  5088: a0 = 0\n  5090: a1 = 0\n  5092: ra = 78, jump @0\n      : @96 [@dyn 39] (gas: 5)\n  5097: i32 a1 = a0 + 0\n  5099: a0 = 0x1\n  5102: a2 = 0\n  5104: ecalli 13 // 'seal_return'\n  5106: fallthrough\n      : @97 (gas: 7)\n  5107: a1 = u64 [sp + 0x8]\n  5110: a1 = a1 << 0x20\n  5113: s1 = a1 >> 0x20\n  5116: i32 a0 = a0 + 0\n  5118: u64 [sp + 0x8] = a0\n  5121: a1 = 0x20\n  5124: ra = 80, jump @0\n      : @98 [@dyn 40] (gas: 58)\n  5129: a1 = reverse s1\n  5131: a2 = u64 [sp + 0x10]\n  5134: a2 = reverse a2\n  5136: a3 = u64 [sp + 0x18]\n  5139: a3 = reverse a3\n  5141: a4 = a3 >> 0x38\n  5144: u8 [a0 + 0x1f] = a4\n  5147: a4 = a3 >> 0x30\n  5150: u8 [a0 + 0x1e] = a4\n  5153: a4 = a3 >> 0x28\n  5156: u8 [a0 + 0x1d] = a4\n  5159: a4 = a3 >> 0x20\n  5162: u8 [a0 + 0x1c] = a4\n  5165: a4 = a3 >> 0x18\n  5168: u8 [a0 + 0x1b] = a4\n  5171: a4 = a3 >> 0x10\n  5174: u8 [a0 + 0x1a] = a4\n  5177: a4 = a3 >> 0x8\n  5180: u8 [a0 + 0x19] = a4\n  5183: u8 [a0 + 0x18] = a3\n  5186: u8 [a0 + 0x10] = a2\n  5189: u8 [a0 + 11] = 0\n  5192: u8 [a0 + 10] = 0\n  5195: u8 [a0 + 9] = 0\n  5198: u8 [a0 + 7] = 0\n  5201: u8 [a0 + 6] = 0\n  5204: u8 [a0 + 5] = 0\n  5207: u8 [a0 + 4] = 0\n  5210: u8 [a0 + 3] = 0\n  5213: u8 [a0 + 2] = 0\n  5216: u8 [a0 + 1] = 0\n  5219: u8 [a0 + 0] = 0\n  5221: a3 = a2 >> 0x38\n  5224: u8 [a0 + 0x17] = a3\n  5227: a3 = a2 >> 0x30\n  5230: u8 [a0 + 0x16] = a3\n  5233: a3 = a2 >> 0x28\n  5236: u8 [a0 + 0x15] = a3\n  5239: a3 = a2 >> 0x20\n  5242: u8 [a0 + 0x14] = a3\n  5245: a3 = a2 >> 0x18\n  5248: u8 [a0 + 0x13] = a3\n  5251: a3 = a2 >> 0x10\n  5254: u8 [a0 + 0x12] = a3\n  5257: a2 = a2 >> 0x8\n  5260: u8 [a0 + 0x11] = a2\n  5263: u8 [a0 + 0x8] = a1\n  5266: a2 = a1 >> 0x38\n  5269: u8 [a0 + 0xf] = a2\n  5272: a2 = a1 >> 0x30\n  5275: u8 [a0 + 0xe] = a2\n  5278: a2 = a1 >> 0x28\n  5281: u8 [a0 + 0xd] = a2\n  5284: a1 = a1 >> 0x20\n  5287: u8 [a0 + 0xc] = a1\n  5290: a1 = 0x20\n  5293: a0 = u64 [sp + 0x8]\n  5296: ra = 82, jump @0\n      : @99 [@dyn 41] (gas: 6)\n  5301: i32 a1 = a0 + 0\n  5303: a2 = 0x20\n  5306: a0 = 0\n  5308: ra = 0x54\n  5311: ecalli 13 // 'seal_return'\n  5313: fallthrough\n      : @100 [@dyn 42] (gas: 1)\n  5314: ret\n      : @101 (gas: 37)\n  5316: sp = sp + 0xffffffffffffff60\n  5320: u64 [sp + 0x98] = ra\n  5324: u64 [sp + 0x90] = s0\n  5328: u64 [sp + 0x88] = s1\n  5332: s0 = sp + 0xa0\n  5336: sp = sp & 0xffffffffffffffe0\n  5339: a4 = u64 [a1]\n  5341: s1 = u64 [a2 + 0x8]\n  5344: ra = u64 [a1 + 0x8]\n  5347: t1 = u64 [a2]\n  5349: a3 = a4 + 0x1f\n  5352: u64 [sp + 0x58] = a4\n  5355: t0 = a3 <u a4\n  5358: a5 = ra + t0\n  5361: u64 [sp + 0x40] = t1\n  5364: t1 = a3 <u t1\n  5367: a3 = a5 ^ s1\n  5370: u64 [sp + 0x48] = s1\n  5373: a4 = a5 <u s1\n  5376: a4 = t1 if a3 == 0\n  5379: t2 = u64 [a1 + 0x10]\n  5382: a3 = a5 <u ra\n  5385: a3 = t0 if t0 == 0\n  5388: t0 = u64 [a2 + 0x18]\n  5391: t1 = u64 [a1 + 0x18]\n  5394: s1 = u64 [a2 + 0x10]\n  5397: a3 = a3 + t2\n  5400: a1 = a3 <u t2\n  5403: a1 = a1 + t1\n  5406: a2 = a1 ^ t0\n  5409: a1 = a1 <s t0\n  5412: a5 = a3 <u s1\n  5415: a1 = a5 if a2 == 0\n  5418: a3 = a3 ^ s1\n  5421: a2 = a2 | a3\n  5424: a4 = a1 if a2 != 0\n  5427: jump @108 if a4 == 0\n      : @102 (gas: 14)\n  5431: u64 [sp + 0x28] = t0\n  5434: u64 [sp + 0x30] = s1\n  5437: u64 [sp + 0x38] = a0\n  5440: a0 = u64 [sp + 0x58]\n  5443: a0 = a0 | t2\n  5446: u64 [sp + 0x18] = t1\n  5449: a1 = ra | t1\n  5452: a0 = a0 | a1\n  5455: a0 = a0 >> 0x20\n  5458: u64 [sp + 0x20] = t2\n  5461: a1 = a1 | t2\n  5464: a1 = a1 << 0x20\n  5467: a0 = a0 | a1\n  5470: jump @107 if a0 != 0\n      : @103 (gas: 5)\n  5474: s1 = ra\n  5476: a1 = i32 [sp + 0x58]\n  5479: i32 a0 = sp + 0x60\n  5482: ecalli 3 // 'call_data_load'\n  5484: fallthrough\n      : @104 (gas: 8)\n  5485: a0 = u64 [sp + 0x78]\n  5488: a1 = u64 [sp + 0x70]\n  5491: t1 = u64 [sp + 0x68]\n  5494: u64 [sp + 0x50] = a0\n  5497: a0 = a0 | a1\n  5500: a3 = t1 <u 0x1\n  5503: a3 = 0 if a0 != 0\n  5505: jump @108 if a3 == 0\n      : @105 (gas: 46)\n  5509: a2 = u64 [sp + 0x60]\n  5512: a0 = u64 [sp + 0x58]\n  5515: a4 = a0 + 0x20\n  5518: a0 = a4 <u a0\n  5521: ra = s1 + a0\n  5524: u64 [sp + 0x10] = a4\n  5527: a4 = a4 + a2\n  5530: u64 [sp + 0x58] = a2\n  5533: t0 = a4 <u a2\n  5536: a5 = t1 + ra\n  5539: a5 = a5 + t0\n  5542: a2 = a5 ^ t1\n  5545: a3 = a5 <u t1\n  5548: a3 = t0 if a2 == 0\n  5551: a2 = ra <u s1\n  5554: a2 = a0 if a0 == 0\n  5557: a0 = u64 [sp + 0x20]\n  5560: t2 = a0 + a2\n  5563: s1 = t2 <u a0\n  5566: a0 = u64 [sp + 0x18]\n  5569: a0 = a0 + s1\n  5572: s1 = u64 [sp + 0x48]\n  5575: a2 = a5 ^ s1\n  5578: a5 = s1 <u a5\n  5581: s1 = u64 [sp + 0x40]\n  5584: a4 = s1 <u a4\n  5587: a4 = a5 if a2 != 0\n  5590: a2 = a1 + t2\n  5593: a5 = a2 <u a1\n  5596: s1 = u64 [sp + 0x50]\n  5599: u64 [sp + 0x48] = a0\n  5602: s1 = s1 + a0\n  5605: a5 = a5 + s1\n  5608: a3 = a3 + a2\n  5611: a2 = a3 <u a2\n  5614: a2 = a2 + a5\n  5617: s1 = u64 [sp + 0x28]\n  5620: a5 = a2 ^ s1\n  5623: t0 = s1 <u a2\n  5626: a2 = u64 [sp + 0x30]\n  5629: s1 = a2 <u a3\n  5632: s1 = t0 if a5 != 0\n  5635: a2 = a2 ^ a3\n  5638: a2 = a2 | a5\n  5641: a4 = s1 if a2 != 0\n  5644: jump @108 if a4 != 0\n      : @106 (gas: 19)\n  5647: a2 = u64 [sp + 0x38]\n  5650: a0 = u64 [sp + 0x58]\n  5653: u64 [a2 + 0x20] = a0\n  5656: a0 = u64 [sp + 0x10]\n  5659: u64 [a2] = a0\n  5661: u64 [a2 + 0x28] = t1\n  5664: u64 [a2 + 0x8] = ra\n  5667: u64 [a2 + 0x30] = a1\n  5670: u64 [a2 + 0x10] = t2\n  5673: a0 = u64 [sp + 0x50]\n  5676: u64 [a2 + 0x38] = a0\n  5679: a0 = u64 [sp + 0x48]\n  5682: u64 [a2 + 0x18] = a0\n  5685: sp = s0 + 0xffffffffffffff60\n  5689: ra = u64 [sp + 0x98]\n  5693: s0 = u64 [sp + 0x90]\n  5697: s1 = u64 [sp + 0x88]\n  5701: sp = sp + 0xa0\n  5705: ret\n      : @107 (gas: 1)\n  5707: trap\n      : @108 (gas: 3)\n  5708: a0 = 0\n  5710: a1 = 0\n  5712: ra = 86, jump @0\n      : @109 [@dyn 43] (gas: 6)\n  5717: i32 a1 = a0 + 0\n  5719: a0 = 0x1\n  5722: a2 = 0\n  5724: ra = 0x58\n  5727: ecalli 13 // 'seal_return'\n  5729: fallthrough\n      : @110 [@dyn 44] (gas: 43)\n  5730: sp = sp + 0xfffffffffffffe80\n  5734: u64 [sp + 0x178] = ra\n  5738: u64 [sp + 0x170] = s0\n  5742: u64 [sp + 0x168] = s1\n  5746: s0 = sp + 0x180\n  5750: sp = sp & 0xffffffffffffffe0\n  5753: t1 = a1\n  5755: t2 = u64 [a2 + 0x8]\n  5758: ra = u64 [a1 + 0x8]\n  5761: a1 = u64 [a2]\n  5763: s1 = u64 [t1]\n  5765: t0 = u64 [a2 + 0x10]\n  5768: a4 = t2 ^ ra\n  5771: a3 = t2 <u ra\n  5774: a5 = a1 <u s1\n  5777: a3 = a5 if a4 == 0\n  5780: a4 = t2 - ra\n  5783: a4 = a4 - a5\n  5786: u64 [sp + 0x60] = a1\n  5789: u64 [sp + 0x98] = s1\n  5793: a5 = a1 - s1\n  5796: a5 = a5 <u 0x60\n  5799: a5 = a5 ^ 0x1\n  5802: a1 = u64 [t1 + 0x10]\n  5805: s1 = a4 >u 0\n  5807: a5 = s1 if a4 != 0\n  5810: a4 = u64 [a2 + 0x18]\n  5813: t1 = u64 [t1 + 0x18]\n  5816: a2 = t0 - a1\n  5819: s1 = a2 - a3\n  5822: a2 = a2 <u a3\n  5825: u64 [sp + 0x68] = t0\n  5828: a3 = t0 <u a1\n  5831: u64 [sp + 0x58] = a4\n  5834: a4 = a4 - t1\n  5837: a4 = a4 - a3\n  5840: a4 = a4 - a2\n  5843: a2 = a4 >s 0\n  5845: a3 = s1 >u 0\n  5847: a3 = a2 if a4 != 0\n  5850: a2 = s1 | a4\n  5853: a5 = a3 if a2 != 0\n  5856: jump @122 if a5 == 0\n      : @111 (gas: 14)\n  5860: s1 = a0\n  5862: u64 [sp + 0x70] = t2\n  5865: t2 = u64 [sp + 0x98]\n  5869: a0 = t2 | a1\n  5872: u64 [sp + 0x90] = ra\n  5876: u64 [sp + 0x80] = t1\n  5880: a2 = ra | t1\n  5883: a0 = a0 | a2\n  5886: a0 = a0 >> 0x20\n  5889: u64 [sp + 0x88] = a1\n  5893: a1 = a1 | a2\n  5896: a1 = a1 << 0x20\n  5899: a0 = a0 | a1\n  5902: jump @121 if a0 != 0\n      : @112 (gas: 5)\n  5906: i32 a1 = t2 + 0\n  5908: i32 a0 = sp + 0x140\n  5912: u64 [sp + 0x78] = a1\n  5915: ecalli 3 // 'call_data_load'\n  5917: fallthrough\n      : @113 (gas: 10)\n  5918: a3 = u64 [sp + 0x150]\n  5922: a4 = u64 [sp + 0x158]\n  5926: a0 = 0x100000000\n  5936: a1 = a3 ^ a0\n  5939: a1 = a1 | a4\n  5942: a2 = a3 >> 0x20\n  5945: a2 = a2 <u 0x1\n  5948: a2 = 0 if a4 != 0\n  5950: a2 = 0 if a1 == 0\n  5952: jump @122 if a2 == 0\n      : @114 (gas: 13)\n  5956: u64 [sp + 0x40] = a4\n  5959: u64 [sp + 0x48] = a3\n  5962: a1 = u64 [sp + 0x88]\n  5966: a2 = u64 [sp + 0x80]\n  5970: a2 = a2 | a1\n  5973: a0 = 0xffffffe0\n  5983: a1 = u64 [sp + 0x98]\n  5987: a0 = a1 <u a0\n  5990: a1 = u64 [sp + 0x90]\n  5994: a0 = 0 if a1 != 0\n  5996: u64 [sp + 0x50] = a2\n  5999: a0 = 0 if a2 != 0\n  6001: jump @121 if a0 == 0\n      : @115 (gas: 9)\n  6005: a0 = u64 [sp + 0x148]\n  6009: u64 [sp + 0x38] = a0\n  6012: a0 = u64 [sp + 0x140]\n  6016: u64 [sp + 0x30] = a0\n  6019: a0 = u64 [sp + 0x78]\n  6022: i32 a1 = a0 + 0x20\n  6025: i32 a0 = sp + 0x140\n  6029: ecalli 3 // 'call_data_load'\n  6031: fallthrough\n      : @116 (gas: 8)\n  6032: a0 = 0xffffffc0\n  6042: a1 = u64 [sp + 0x98]\n  6046: a0 = a1 <u a0\n  6049: a1 = u64 [sp + 0x90]\n  6053: a0 = 0 if a1 != 0\n  6055: a1 = u64 [sp + 0x50]\n  6058: a0 = 0 if a1 != 0\n  6060: jump @121 if a0 == 0\n      : @117 (gas: 13)\n  6064: a0 = u64 [sp + 0x158]\n  6068: u64 [sp + 0x28] = a0\n  6071: a0 = u64 [sp + 0x150]\n  6075: u64 [sp + 0x18] = a0\n  6078: a0 = u64 [sp + 0x148]\n  6082: u64 [sp + 0x50] = a0\n  6085: a0 = u64 [sp + 0x140]\n  6089: u64 [sp + 0x20] = a0\n  6092: a0 = u64 [sp + 0x78]\n  6095: i32 a1 = a0 + 0x40\n  6098: i32 a0 = sp + 0x120\n  6102: ecalli 3 // 'call_data_load'\n  6104: fallthrough\n      : @118 (gas: 7)\n  6105: t0 = u64 [sp + 0x138]\n  6109: a1 = u64 [sp + 0x130]\n  6113: a2 = u64 [sp + 0x128]\n  6117: a3 = a1 | t0\n  6120: a4 = a2 <u 0x1\n  6123: a4 = 0 if a3 != 0\n  6125: jump @122 if a4 == 0\n      : @119 (gas: 35)\n  6129: a3 = u64 [sp + 0x120]\n  6133: a4 = u64 [sp + 0x98]\n  6137: a4 = a4 + a3\n  6140: a3 = a4 <u a3\n  6143: a5 = u64 [sp + 0x90]\n  6147: a5 = a5 + a2\n  6150: a5 = a5 + a3\n  6153: a0 = a5 ^ a2\n  6156: a2 = a5 <u a2\n  6159: a2 = a3 if a0 == 0\n  6162: a0 = u64 [sp + 0x88]\n  6166: a0 = a0 + a1\n  6169: a2 = a2 + a0\n  6172: a3 = a2 <u a0\n  6175: a0 = a0 <u a1\n  6178: a1 = u64 [sp + 0x80]\n  6182: t0 = t0 + a1\n  6185: a0 = a0 + t0\n  6188: a3 = a3 + a0\n  6191: a0 = u64 [sp + 0x60]\n  6194: u64 [sp + 0xa0] = a0\n  6198: a0 = u64 [sp + 0x70]\n  6201: u64 [sp + 0xa8] = a0\n  6205: u64 [sp + 0xc0] = a4\n  6209: a0 = u64 [sp + 0x68]\n  6212: u64 [sp + 0xb0] = a0\n  6216: a0 = u64 [sp + 0x58]\n  6219: u64 [sp + 0xb8] = a0\n  6223: u64 [sp + 0xc8] = a5\n  6227: u64 [sp + 0xd0] = a2\n  6231: a0 = sp + 0xe0\n  6235: a1 = sp + 0xc0\n  6239: a2 = sp + 0xa0\n  6243: u64 [sp + 0xd8] = a3\n  6247: ra = 90, jump @101\n      : @120 [@dyn 45] (gas: 38)\n  6252: t0 = u64 [sp + 0xe8]\n  6256: t1 = u64 [sp + 0xe0]\n  6260: a2 = u64 [sp + 0xf8]\n  6264: a3 = u64 [sp + 0xf0]\n  6268: a4 = u64 [sp + 0x110]\n  6272: a5 = u64 [sp + 0x118]\n  6276: a0 = u64 [sp + 0x100]\n  6280: a1 = u64 [sp + 0x108]\n  6284: u64 [s1 + 0x70] = a4\n  6287: u64 [s1 + 0x78] = a5\n  6290: u64 [s1 + 0x60] = a0\n  6293: u64 [s1 + 0x68] = a1\n  6296: u64 [s1 + 0x50] = a3\n  6299: u64 [s1 + 0x58] = a2\n  6302: u64 [s1 + 0x40] = t1\n  6305: u64 [s1 + 0x48] = t0\n  6308: a0 = u64 [sp + 0x18]\n  6311: u64 [s1 + 0x30] = a0\n  6314: a0 = u64 [sp + 0x28]\n  6317: u64 [s1 + 0x38] = a0\n  6320: a0 = u64 [sp + 0x20]\n  6323: u64 [s1 + 0x20] = a0\n  6326: a0 = u64 [sp + 0x50]\n  6329: u64 [s1 + 0x28] = a0\n  6332: a0 = u64 [sp + 0x48]\n  6335: u64 [s1 + 0x10] = a0\n  6338: a0 = u64 [sp + 0x40]\n  6341: u64 [s1 + 0x18] = a0\n  6344: a0 = u64 [sp + 0x30]\n  6347: u64 [s1] = a0\n  6349: a0 = u64 [sp + 0x38]\n  6352: u64 [s1 + 0x8] = a0\n  6355: sp = s0 + 0xfffffffffffffe80\n  6359: ra = u64 [sp + 0x178]\n  6363: s0 = u64 [sp + 0x170]\n  6367: s1 = u64 [sp + 0x168]\n  6371: sp = sp + 0x180\n  6375: ret\n      : @121 (gas: 1)\n  6377: trap\n      : @122 (gas: 3)\n  6378: a0 = 0\n  6380: a1 = 0\n  6382: ra = 92, jump @0\n      : @123 [@dyn 46] (gas: 6)\n  6387: i32 a1 = a0 + 0\n  6389: a0 = 0x1\n  6392: a2 = 0\n  6394: ra = 0x5e\n  6397: ecalli 13 // 'seal_return'\n  6399: fallthrough\n      : @124 [@dyn 47] (gas: 13)\n  6400: sp = sp + 0xfffffffffffffe40\n  6404: u64 [sp + 0x1b8] = ra\n  6408: u64 [sp + 0x1b0] = s0\n  6412: u64 [sp + 0x1a8] = s1\n  6416: s0 = sp + 0x1c0\n  6420: sp = sp & 0xffffffffffffffe0\n  6423: u64 [sp + 408] = 0\n  6427: u64 [sp + 400] = 0\n  6431: u64 [sp + 392] = 0\n  6435: u64 [sp + 384] = 0\n  6439: i32 a0 = sp + 0x180\n  6443: ecalli 16 // 'value_transferred'\n  6445: fallthrough\n      : @125 (gas: 8)\n  6446: a0 = u64 [sp + 0x190]\n  6450: a1 = u64 [sp + 0x198]\n  6454: a2 = u64 [sp + 0x188]\n  6458: a3 = u64 [sp + 0x180]\n  6462: a1 = a1 | a2\n  6465: a0 = a0 | a3\n  6468: a0 = a0 | a1\n  6471: jump @131 if a0 != 0\n      : @126 (gas: 13)\n  6475: a0 = u32 [0x20084]\n  6480: u64 [sp + 216] = 0\n  6484: u64 [sp + 208] = 0\n  6488: u64 [sp + 200] = 0\n  6492: u64 [sp + 0xc0] = a0\n  6496: u64 [sp + 248] = 0\n  6500: u64 [sp + 240] = 0\n  6504: u64 [sp + 224] = 0x4\n  6509: a0 = sp + 0x100\n  6513: a1 = sp + 0xe0\n  6517: a2 = sp + 0xc0\n  6521: u64 [sp + 232] = 0\n  6525: ra = 96, jump @110\n      : @127 [@dyn 48] (gas: 47)\n  6530: a0 = u64 [sp + 0x100]\n  6534: u64 [sp + 0x38] = a0\n  6537: a0 = u64 [sp + 0x108]\n  6541: u64 [sp + 0x30] = a0\n  6544: a0 = u64 [sp + 0x110]\n  6548: u64 [sp + 0x28] = a0\n  6551: a0 = u64 [sp + 0x118]\n  6555: u64 [sp + 0x20] = a0\n  6558: a0 = u64 [sp + 0x120]\n  6562: u64 [sp + 0x18] = a0\n  6565: ra = u64 [sp + 0x128]\n  6569: t2 = u64 [sp + 0x130]\n  6573: t1 = u64 [sp + 0x138]\n  6577: t0 = u64 [sp + 0x140]\n  6581: s1 = u64 [sp + 0x148]\n  6585: a5 = u64 [sp + 0x150]\n  6589: a4 = u64 [sp + 0x158]\n  6593: a3 = u64 [sp + 0x160]\n  6597: a2 = u64 [sp + 0x168]\n  6601: a1 = u64 [sp + 0x170]\n  6605: a0 = u64 [sp + 0x178]\n  6609: u64 [sp + 0x58] = a0\n  6612: u64 [sp + 0x50] = a1\n  6615: u64 [sp + 0x48] = a2\n  6618: u64 [sp + 0x40] = a3\n  6621: u64 [sp + 0x78] = a4\n  6624: u64 [sp + 0x70] = a5\n  6627: u64 [sp + 0x68] = s1\n  6630: u64 [sp + 0x60] = t0\n  6633: u64 [sp + 0x98] = t1\n  6637: u64 [sp + 0x90] = t2\n  6641: u64 [sp + 0x88] = ra\n  6645: a0 = u64 [sp + 0x18]\n  6648: u64 [sp + 0x80] = a0\n  6652: a0 = u64 [sp + 0x20]\n  6655: u64 [sp + 0xb8] = a0\n  6659: a0 = u64 [sp + 0x28]\n  6662: u64 [sp + 0xb0] = a0\n  6666: a0 = u64 [sp + 0x30]\n  6669: u64 [sp + 0xa8] = a0\n  6673: a0 = sp + 0xa0\n  6677: a1 = sp + 0x80\n  6681: a2 = sp + 0x60\n  6684: a3 = sp + 0x40\n  6687: a4 = u64 [sp + 0x38]\n  6690: u64 [sp + 0xa0] = a4\n  6694: ra = 98, jump @314\n      : @128 [@dyn 49] (gas: 3)\n  6699: a0 = 0x40\n  6702: a1 = 0x20\n  6705: ra = 100, jump @0\n      : @129 [@dyn 50] (gas: 100)\n  6710: a1 = u8 [a0 + 0x11]\n  6713: a2 = u8 [a0 + 0x10]\n  6716: a3 = u8 [a0 + 0x12]\n  6719: a4 = u8 [a0 + 0x13]\n  6722: a1 = a1 << 0x8\n  6725: a1 = a1 | a2\n  6728: a3 = a3 << 0x10\n  6731: a4 = a4 << 0x18\n  6734: a3 = a3 | a4\n  6737: a1 = a1 | a3\n  6740: a2 = u8 [a0 + 0x15]\n  6743: a3 = u8 [a0 + 0x14]\n  6746: a4 = u8 [a0 + 0x16]\n  6749: a5 = u8 [a0 + 0x17]\n  6752: a2 = a2 << 0x8\n  6755: a2 = a2 | a3\n  6758: a4 = a4 << 0x10\n  6761: a5 = a5 << 0x18\n  6764: a4 = a4 | a5\n  6767: a2 = a2 | a4\n  6770: a2 = a2 << 0x20\n  6773: t0 = a2 | a1\n  6776: a2 = u8 [a0 + 0x1]\n  6779: a3 = u8 [a0]\n  6781: a4 = u8 [a0 + 0x2]\n  6784: a5 = u8 [a0 + 0x3]\n  6787: a2 = a2 << 0x8\n  6790: a2 = a2 | a3\n  6793: a4 = a4 << 0x10\n  6796: a5 = a5 << 0x18\n  6799: a4 = a4 | a5\n  6802: a2 = a2 | a4\n  6805: a3 = u8 [a0 + 0x5]\n  6808: a4 = u8 [a0 + 0x4]\n  6811: a5 = u8 [a0 + 0x6]\n  6814: s1 = u8 [a0 + 0x7]\n  6817: a3 = a3 << 0x8\n  6820: a3 = a3 | a4\n  6823: a5 = a5 << 0x10\n  6826: s1 = s1 << 0x18\n  6829: a5 = a5 | s1\n  6832: a3 = a3 | a5\n  6835: a3 = a3 << 0x20\n  6838: a2 = a2 | a3\n  6841: a3 = u8 [a0 + 0x19]\n  6844: a4 = u8 [a0 + 0x18]\n  6847: a5 = u8 [a0 + 0x1a]\n  6850: s1 = u8 [a0 + 0x1b]\n  6853: a3 = a3 << 0x8\n  6856: a3 = a3 | a4\n  6859: a5 = a5 << 0x10\n  6862: s1 = s1 << 0x18\n  6865: a5 = a5 | s1\n  6868: a3 = a3 | a5\n  6871: a4 = u8 [a0 + 0x1d]\n  6874: a5 = u8 [a0 + 0x1c]\n  6877: s1 = u8 [a0 + 0x1e]\n  6880: a1 = u8 [a0 + 0x1f]\n  6883: a4 = a4 << 0x8\n  6886: a4 = a4 | a5\n  6889: s1 = s1 << 0x10\n  6892: a1 = a1 << 0x18\n  6895: a1 = a1 | s1\n  6898: a1 = a1 | a4\n  6901: a1 = a1 << 0x20\n  6904: a3 = a3 | a1\n  6907: a1 = u8 [a0 + 0x9]\n  6910: a4 = u8 [a0 + 0x8]\n  6913: a5 = u8 [a0 + 0xa]\n  6916: s1 = u8 [a0 + 0xb]\n  6919: a1 = a1 << 0x8\n  6922: a1 = a1 | a4\n  6925: a5 = a5 << 0x10\n  6928: s1 = s1 << 0x18\n  6931: a5 = a5 | s1\n  6934: a1 = a1 | a5\n  6937: a4 = u8 [a0 + 0xd]\n  6940: a5 = u8 [a0 + 0xc]\n  6943: s1 = u8 [a0 + 0xe]\n  6946: a0 = u8 [a0 + 0xf]\n  6949: a4 = a4 << 0x8\n  6952: a4 = a4 | a5\n  6955: s1 = s1 << 0x10\n  6958: a0 = a0 << 0x18\n  6961: a0 = a0 | s1\n  6964: a0 = a0 | a4\n  6967: a0 = a0 << 0x20\n  6970: a0 = a0 | a1\n  6973: a1 = reverse a0\n  6975: a0 = reverse a3\n  6977: a2 = reverse a2\n  6979: a3 = reverse t0\n  6981: a2 = a2 | a3\n  6984: a3 = a0 | a1\n  6987: a3 = a3 | a2\n  6990: a3 = a3 >> 0x20\n  6993: a1 = a1 | a2\n  6996: a1 = a1 << 0x20\n  6999: a1 = a1 | a3\n  7002: jump @133 if a1 == 0\n      : @130 (gas: 1)\n  7005: trap\n      : @131 (gas: 3)\n  7006: a0 = 0\n  7008: a1 = 0\n  7010: ra = 102, jump @0\n      : @132 [@dyn 51] (gas: 7)\n  7015: i32 a1 = a0 + 0\n  7017: a0 = 0x1\n  7020: a2 = 0\n  7022: ecalli 13 // 'seal_return'\n  7024: i32 a0 = a0 + 0\n  7026: ra = 0x68\n  7029: jump @0\n      : @133 (gas: 2)\n  7032: i32 a0 = a0 + 0\n  7034: ra = 104, jump @0\n      : @134 [@dyn 52] (gas: 6)\n  7039: i32 a1 = a0 + 0\n  7041: a0 = 0\n  7043: a2 = 0\n  7045: ra = 0x6a\n  7048: ecalli 13 // 'seal_return'\n  7050: fallthrough\n      : @135 [@dyn 53] (gas: 52)\n  7051: sp = sp + 0xffffffffffffff80\n  7054: u64 [sp + 0x78] = ra\n  7057: u64 [sp + 0x70] = s0\n  7060: u64 [sp + 0x68] = s1\n  7063: s0 = sp + 0x80\n  7067: sp = sp & 0xffffffffffffffe0\n  7070: t2 = u64 [a1 + 0x10]\n  7073: a5 = u64 [a1 + 0x8]\n  7076: t0 = u64 [a2 + 0x8]\n  7079: s1 = u64 [a1]\n  7081: u64 [sp + 0x10] = s1\n  7084: a4 = u64 [a2]\n  7086: u64 [sp + 0x18] = a4\n  7089: ra = u64 [a2 + 0x10]\n  7092: a3 = t0 ^ a5\n  7095: u64 [sp + 0x38] = a3\n  7098: a3 = t0 <u a5\n  7101: a4 = a4 <u s1\n  7104: t1 = u64 [sp + 0x38]\n  7107: a3 = a4 if t1 == 0\n  7110: t1 = a4\n  7112: a1 = u64 [a1 + 0x18]\n  7115: u64 [sp + 0x38] = a1\n  7118: a1 = u64 [a2 + 0x18]\n  7121: u64 [sp + 0x20] = a1\n  7124: a1 = ra - t2\n  7127: a2 = a1 - a3\n  7130: u64 [sp + 0x28] = a2\n  7133: a2 = a1 <u a3\n  7136: u64 [sp + 0x30] = t2\n  7139: a3 = ra <u t2\n  7142: a1 = u64 [sp + 0x38]\n  7145: a4 = u64 [sp + 0x20]\n  7148: a1 = a4 - a1\n  7151: a1 = a1 - a3\n  7154: t2 = a1 - a2\n  7157: s1 = t0 - a5\n  7160: a2 = s1 - t1\n  7163: t0 = u64 [sp + 0x10]\n  7166: a1 = u64 [sp + 0x18]\n  7169: a3 = a1 - t0\n  7172: a4 = a2 >u 0\n  7174: a3 = a3 <u 0x20\n  7177: a3 = a3 ^ 0x1\n  7180: a3 = a4 if a2 != 0\n  7183: a2 = t2 >s 0\n  7185: a1 = u64 [sp + 0x28]\n  7188: a4 = a1 >u 0\n  7190: a4 = a2 if t2 != 0\n  7193: a1 = a1 | t2\n  7196: a3 = a4 if a1 != 0\n  7199: jump @141 if a3 == 0\n      : @136 (gas: 11)\n  7202: s1 = a0\n  7204: a2 = u64 [sp + 0x30]\n  7207: a0 = t0 | a2\n  7210: a1 = u64 [sp + 0x38]\n  7213: a1 = a1 | a5\n  7216: a0 = a0 | a1\n  7219: a0 = a0 >> 0x20\n  7222: a1 = a1 | a2\n  7225: a1 = a1 << 0x20\n  7228: a0 = a0 | a1\n  7231: jump @140 if a0 != 0\n      : @137 (gas: 4)\n  7234: i32 a1 = t0 + 0\n  7236: i32 a0 = sp + 0x40\n  7239: ecalli 3 // 'call_data_load'\n  7241: fallthrough\n      : @138 (gas: 10)\n  7242: a0 = u64 [sp + 0x50]\n  7245: a1 = u64 [sp + 0x58]\n  7248: a2 = 0x100000000\n  7258: a2 = a2 ^ a0\n  7261: a2 = a2 | a1\n  7264: a3 = a0 >> 0x20\n  7267: a3 = a3 <u 0x1\n  7270: a3 = 0 if a1 != 0\n  7272: a3 = 0 if a2 == 0\n  7274: jump @141 if a3 == 0\n      : @139 (gas: 12)\n  7277: a2 = u64 [sp + 0x48]\n  7280: a3 = u64 [sp + 0x40]\n  7283: u64 [s1 + 0x8] = a2\n  7286: u64 [s1] = a3\n  7288: u64 [s1 + 0x10] = a0\n  7291: u64 [s1 + 0x18] = a1\n  7294: sp = s0 + 0xffffffffffffff80\n  7297: ra = u64 [sp + 0x78]\n  7300: s0 = u64 [sp + 0x70]\n  7303: s1 = u64 [sp + 0x68]\n  7306: sp = sp + 0x80\n  7310: ret\n      : @140 (gas: 1)\n  7312: trap\n      : @141 (gas: 3)\n  7313: a0 = 0\n  7315: a1 = 0\n  7317: ra = 108, jump @0\n      : @142 [@dyn 54] (gas: 6)\n  7322: i32 a1 = a0 + 0\n  7324: a0 = 0x1\n  7327: a2 = 0\n  7329: ra = 0x6e\n  7332: ecalli 13 // 'seal_return'\n  7334: fallthrough\n      : @143 [@dyn 55] (gas: 9)\n  7335: a2 = u64 [a1 + 0x18]\n  7338: a3 = u64 [a1 + 0x10]\n  7341: a4 = u64 [a1 + 0x8]\n  7344: a1 = u64 [a1]\n  7346: u64 [a0 + 0x18] = a2\n  7349: u64 [a0 + 0x10] = a3\n  7352: u64 [a0 + 0x8] = a4\n  7355: u64 [a0] = a1\n  7357: ret\n      : @144 (gas: 8)\n  7359: a0 = u64 [sp + 0x30]\n  7362: a1 = u64 [sp + 0x38]\n  7365: a2 = u64 [sp + 0x28]\n  7368: a3 = u64 [sp + 0x20]\n  7371: a1 = a1 | a2\n  7374: a0 = a0 | a3\n  7377: a0 = a0 | a1\n  7380: jump @154 if a0 != 0\n      : @145 (gas: 2)\n  7384: a0 = i32 [0x20084]\n  7389: jump @154 if a0 <=u 35\n      : @146 (gas: 4)\n  7394: i32 a0 = sp + 0x60\n  7397: a1 = 0x4\n  7400: ecalli 3 // 'call_data_load'\n  7402: fallthrough\n      : @147 (gas: 11)\n  7403: a1 = u64 [sp + 0x70]\n  7406: s1 = u64 [sp + 0x78]\n  7409: a0 = 0x100000000\n  7419: a0 = a0 ^ a1\n  7422: a0 = a0 | s1\n  7425: u64 [sp + 0x18] = a1\n  7428: a1 = a1 >> 0x20\n  7431: a1 = a1 <u 0x1\n  7434: a1 = 0 if s1 != 0\n  7436: a1 = 0 if a0 == 0\n  7438: jump @155 if a1 == 0\n      : @148 (gas: 7)\n  7442: a0 = u64 [sp + 0x68]\n  7445: u64 [sp + 0x8] = a0\n  7448: a0 = u64 [sp + 0x60]\n  7451: u64 [sp + 0x10] = a0\n  7454: a1 = 0x20\n  7457: a0 = 0\n  7459: ra = 112, jump @0\n      : @149 [@dyn 56] (gas: 70)\n  7464: a1 = reverse s1\n  7466: a2 = u64 [sp + 0x18]\n  7469: a2 = reverse a2\n  7471: a3 = u64 [sp + 0x8]\n  7474: a3 = reverse a3\n  7476: a4 = u64 [sp + 0x10]\n  7479: a4 = reverse a4\n  7481: a5 = a4 >> 0x38\n  7484: u8 [a0 + 0x1f] = a5\n  7487: a5 = a4 >> 0x30\n  7490: u8 [a0 + 0x1e] = a5\n  7493: a5 = a4 >> 0x28\n  7496: u8 [a0 + 0x1d] = a5\n  7499: a5 = a4 >> 0x20\n  7502: u8 [a0 + 0x1c] = a5\n  7505: a5 = a4 >> 0x18\n  7508: u8 [a0 + 0x1b] = a5\n  7511: a5 = a4 >> 0x10\n  7514: u8 [a0 + 0x1a] = a5\n  7517: a5 = a4 >> 0x8\n  7520: u8 [a0 + 0x19] = a5\n  7523: u8 [a0 + 0x18] = a4\n  7526: a4 = a3 >> 0x38\n  7529: u8 [a0 + 0x17] = a4\n  7532: a4 = a3 >> 0x30\n  7535: u8 [a0 + 0x16] = a4\n  7538: a4 = a3 >> 0x28\n  7541: u8 [a0 + 0x15] = a4\n  7544: a4 = a3 >> 0x20\n  7547: u8 [a0 + 0x14] = a4\n  7550: a4 = a3 >> 0x18\n  7553: u8 [a0 + 0x13] = a4\n  7556: a4 = a3 >> 0x10\n  7559: u8 [a0 + 0x12] = a4\n  7562: a4 = a3 >> 0x8\n  7565: u8 [a0 + 0x11] = a4\n  7568: u8 [a0 + 0x10] = a3\n  7571: u8 [a0 + 0x8] = a2\n  7574: a3 = a2 >> 0x38\n  7577: u8 [a0 + 0xf] = a3\n  7580: a3 = a2 >> 0x30\n  7583: u8 [a0 + 0xe] = a3\n  7586: a3 = a2 >> 0x28\n  7589: u8 [a0 + 0xd] = a3\n  7592: a3 = a2 >> 0x20\n  7595: u8 [a0 + 0xc] = a3\n  7598: a3 = a2 >> 0x18\n  7601: u8 [a0 + 0xb] = a3\n  7604: a3 = a2 >> 0x10\n  7607: u8 [a0 + 0xa] = a3\n  7610: a2 = a2 >> 0x8\n  7613: u8 [a0 + 0x9] = a2\n  7616: u8 [a0] = a1\n  7618: a2 = a1 >> 0x38\n  7621: u8 [a0 + 0x7] = a2\n  7624: a2 = a1 >> 0x30\n  7627: u8 [a0 + 0x6] = a2\n  7630: a2 = a1 >> 0x28\n  7633: u8 [a0 + 0x5] = a2\n  7636: a2 = a1 >> 0x20\n  7639: u8 [a0 + 0x4] = a2\n  7642: a2 = a1 >> 0x18\n  7645: u8 [a0 + 0x3] = a2\n  7648: a2 = a1 >> 0x10\n  7651: u8 [a0 + 0x2] = a2\n  7654: a1 = a1 >> 0x8\n  7657: u8 [a0 + 0x1] = a1\n  7660: a0 = 0x20\n  7663: a1 = 0x20\n  7666: ra = 114, jump @0\n      : @150 [@dyn 57] (gas: 35)\n  7671: u8 [a0 + 31] = 0x1\n  7675: u8 [a0 + 30] = 0\n  7678: u8 [a0 + 29] = 0\n  7681: u8 [a0 + 28] = 0\n  7684: u8 [a0 + 27] = 0\n  7687: u8 [a0 + 26] = 0\n  7690: u8 [a0 + 25] = 0\n  7693: u8 [a0 + 24] = 0\n  7696: u8 [a0 + 23] = 0\n  7699: u8 [a0 + 22] = 0\n  7702: u8 [a0 + 21] = 0\n  7705: u8 [a0 + 20] = 0\n  7708: u8 [a0 + 19] = 0\n  7711: u8 [a0 + 18] = 0\n  7714: u8 [a0 + 17] = 0\n  7717: u8 [a0 + 16] = 0\n  7720: u8 [a0 + 15] = 0\n  7723: u8 [a0 + 14] = 0\n  7726: u8 [a0 + 13] = 0\n  7729: u8 [a0 + 12] = 0\n  7732: u8 [a0 + 11] = 0\n  7735: u8 [a0 + 10] = 0\n  7738: u8 [a0 + 9] = 0\n  7741: u8 [a0 + 8] = 0\n  7744: u8 [a0 + 7] = 0\n  7747: u8 [a0 + 6] = 0\n  7750: u8 [a0 + 5] = 0\n  7753: u8 [a0 + 4] = 0\n  7756: u8 [a0 + 3] = 0\n  7759: u8 [a0 + 2] = 0\n  7762: u8 [a0 + 1] = 0\n  7765: u8 [a0 + 0] = 0\n  7767: a1 = 0x40\n  7770: a0 = 0\n  7772: ra = 116, jump @0\n      : @151 [@dyn 58] (gas: 32)\n  7777: i32 a0 = a0 + 0\n  7779: i32 a2 = sp + 0x60\n  7782: a1 = 0x40\n  7785: ecalli 9 // 'hash_keccak_256'\n  7787: a0 = u64 [sp + 0x78]\n  7790: a1 = u64 [sp + 0x70]\n  7793: a2 = u64 [sp + 0x68]\n  7796: a3 = u64 [sp + 0x60]\n  7799: a0 = reverse a0\n  7801: a1 = reverse a1\n  7803: a2 = reverse a2\n  7805: a3 = reverse a3\n  7807: u64 [sp + 0x58] = a3\n  7810: u64 [sp + 0x50] = a2\n  7813: u64 [sp + 0x48] = a1\n  7816: u64 [sp + 0x40] = a0\n  7819: u64 [sp + 120] = 0\n  7822: u64 [sp + 112] = 0\n  7825: u64 [sp + 104] = 0\n  7828: u64 [sp + 96] = 0\n  7831: u32 [sp + 128] = 0x20\n  7836: i32 a1 = sp + 0x40\n  7839: i32 a3 = sp + 0x60\n  7842: i32 a4 = sp + 0x80\n  7846: a2 = 0xffffffffffffffff\n  7849: a0 = 0\n  7851: ecalli 8 // 'get_storage'\n  7853: a0 = u64 [sp + 0x60]\n  7856: u64 [sp + 0x18] = a0\n  7859: a0 = 0x40\n  7862: a1 = 0x20\n  7865: ra = 118, jump @0\n      : @152 [@dyn 59] (gas: 100)\n  7870: a1 = u8 [a0 + 0x11]\n  7873: a2 = u8 [a0 + 0x10]\n  7876: a3 = u8 [a0 + 0x12]\n  7879: a4 = u8 [a0 + 0x13]\n  7882: a1 = a1 << 0x8\n  7885: a1 = a1 | a2\n  7888: a3 = a3 << 0x10\n  7891: a4 = a4 << 0x18\n  7894: a3 = a3 | a4\n  7897: a1 = a1 | a3\n  7900: a2 = u8 [a0 + 0x15]\n  7903: a3 = u8 [a0 + 0x14]\n  7906: a4 = u8 [a0 + 0x16]\n  7909: a5 = u8 [a0 + 0x17]\n  7912: a2 = a2 << 0x8\n  7915: a2 = a2 | a3\n  7918: a4 = a4 << 0x10\n  7921: a5 = a5 << 0x18\n  7924: a4 = a4 | a5\n  7927: a2 = a2 | a4\n  7930: a2 = a2 << 0x20\n  7933: t0 = a2 | a1\n  7936: a2 = u8 [a0 + 0x1]\n  7939: a3 = u8 [a0]\n  7941: a4 = u8 [a0 + 0x2]\n  7944: a5 = u8 [a0 + 0x3]\n  7947: a2 = a2 << 0x8\n  7950: a2 = a2 | a3\n  7953: a4 = a4 << 0x10\n  7956: a5 = a5 << 0x18\n  7959: a4 = a4 | a5\n  7962: a2 = a2 | a4\n  7965: a3 = u8 [a0 + 0x5]\n  7968: a4 = u8 [a0 + 0x4]\n  7971: a5 = u8 [a0 + 0x6]\n  7974: s1 = u8 [a0 + 0x7]\n  7977: a3 = a3 << 0x8\n  7980: a3 = a3 | a4\n  7983: a5 = a5 << 0x10\n  7986: s1 = s1 << 0x18\n  7989: a5 = a5 | s1\n  7992: a3 = a3 | a5\n  7995: a3 = a3 << 0x20\n  7998: a2 = a2 | a3\n  8001: a3 = u8 [a0 + 0x19]\n  8004: a4 = u8 [a0 + 0x18]\n  8007: a5 = u8 [a0 + 0x1a]\n  8010: s1 = u8 [a0 + 0x1b]\n  8013: a3 = a3 << 0x8\n  8016: a3 = a3 | a4\n  8019: a5 = a5 << 0x10\n  8022: s1 = s1 << 0x18\n  8025: a5 = a5 | s1\n  8028: a3 = a3 | a5\n  8031: a4 = u8 [a0 + 0x1d]\n  8034: a5 = u8 [a0 + 0x1c]\n  8037: s1 = u8 [a0 + 0x1e]\n  8040: a1 = u8 [a0 + 0x1f]\n  8043: a4 = a4 << 0x8\n  8046: a4 = a4 | a5\n  8049: s1 = s1 << 0x10\n  8052: a1 = a1 << 0x18\n  8055: a1 = a1 | s1\n  8058: a1 = a1 | a4\n  8061: a1 = a1 << 0x20\n  8064: a3 = a3 | a1\n  8067: a1 = u8 [a0 + 0x9]\n  8070: a4 = u8 [a0 + 0x8]\n  8073: a5 = u8 [a0 + 0xa]\n  8076: s1 = u8 [a0 + 0xb]\n  8079: a1 = a1 << 0x8\n  8082: a1 = a1 | a4\n  8085: a5 = a5 << 0x10\n  8088: s1 = s1 << 0x18\n  8091: a5 = a5 | s1\n  8094: a1 = a1 | a5\n  8097: a4 = u8 [a0 + 0xd]\n  8100: a5 = u8 [a0 + 0xc]\n  8103: s1 = u8 [a0 + 0xe]\n  8106: a0 = u8 [a0 + 0xf]\n  8109: a4 = a4 << 0x8\n  8112: a4 = a4 | a5\n  8115: s1 = s1 << 0x10\n  8118: a0 = a0 << 0x18\n  8121: a0 = a0 | s1\n  8124: a0 = a0 | a4\n  8127: a0 = a0 << 0x20\n  8130: a0 = a0 | a1\n  8133: a1 = reverse a0\n  8135: a0 = reverse a3\n  8137: a2 = reverse a2\n  8139: a3 = reverse t0\n  8141: a2 = a2 | a3\n  8144: a3 = a0 | a1\n  8147: a3 = a3 | a2\n  8150: a3 = a3 >> 0x20\n  8153: a1 = a1 | a2\n  8156: a1 = a1 << 0x20\n  8159: a1 = a1 | a3\n  8162: jump @157 if a1 == 0\n      : @153 (gas: 1)\n  8165: trap\n      : @154 (gas: 4)\n  8166: a0 = 0\n  8168: a1 = 0\n  8170: ra = 0x78\n  8173: jump @0\n      : @155 (gas: 2)\n  8176: a0 = 0\n  8178: ra = 120, jump @0\n      : @156 [@dyn 60] (gas: 5)\n  8183: i32 a1 = a0 + 0\n  8185: a0 = 0x1\n  8188: a2 = 0\n  8190: ecalli 13 // 'seal_return'\n  8192: fallthrough\n      : @157 (gas: 6)\n  8193: a1 = u8 [sp + 0x18]\n  8196: s1 = a1 >u 0\n  8198: i32 a0 = a0 + 0\n  8200: u64 [sp + 0x18] = a0\n  8203: a1 = 0x20\n  8206: ra = 122, jump @0\n      : @158 [@dyn 61] (gas: 35)\n  8211: u8 [a0 + 0x1f] = s1\n  8214: u8 [a0 + 30] = 0\n  8217: u8 [a0 + 29] = 0\n  8220: u8 [a0 + 28] = 0\n  8223: u8 [a0 + 27] = 0\n  8226: u8 [a0 + 26] = 0\n  8229: u8 [a0 + 25] = 0\n  8232: u8 [a0 + 24] = 0\n  8235: u8 [a0 + 23] = 0\n  8238: u8 [a0 + 22] = 0\n  8241: u8 [a0 + 21] = 0\n  8244: u8 [a0 + 20] = 0\n  8247: u8 [a0 + 19] = 0\n  8250: u8 [a0 + 18] = 0\n  8253: u8 [a0 + 17] = 0\n  8256: u8 [a0 + 16] = 0\n  8259: u8 [a0 + 15] = 0\n  8262: u8 [a0 + 14] = 0\n  8265: u8 [a0 + 13] = 0\n  8268: u8 [a0 + 12] = 0\n  8271: u8 [a0 + 11] = 0\n  8274: u8 [a0 + 10] = 0\n  8277: u8 [a0 + 9] = 0\n  8280: u8 [a0 + 8] = 0\n  8283: u8 [a0 + 7] = 0\n  8286: u8 [a0 + 6] = 0\n  8289: u8 [a0 + 5] = 0\n  8292: u8 [a0 + 4] = 0\n  8295: u8 [a0 + 3] = 0\n  8298: u8 [a0 + 2] = 0\n  8301: u8 [a0 + 1] = 0\n  8304: u8 [a0 + 0] = 0\n  8306: a1 = 0x20\n  8309: a0 = u64 [sp + 0x18]\n  8312: ra = 124, jump @0\n      : @159 [@dyn 62] (gas: 6)\n  8317: i32 a1 = a0 + 0\n  8319: a2 = 0x20\n  8322: a0 = 0\n  8324: ra = 0x7e\n  8327: ecalli 13 // 'seal_return'\n  8329: fallthrough\n      : @160 [@dyn 63] (gas: 47)\n  8330: sp = sp + 0xffffffffffffff80\n  8333: u64 [sp + 0x78] = ra\n  8336: u64 [sp + 0x70] = s0\n  8339: u64 [sp + 0x68] = s1\n  8342: s0 = sp + 0x80\n  8346: sp = sp & 0xffffffffffffffe0\n  8349: ra = u64 [a1 + 0x10]\n  8352: a5 = u64 [a1 + 0x8]\n  8355: a3 = u64 [a2 + 0x8]\n  8358: t1 = u64 [a1]\n  8360: a4 = u64 [a2]\n  8362: u64 [sp + 0x28] = a4\n  8365: t2 = u64 [a2 + 0x10]\n  8368: t0 = a3 ^ a5\n  8371: s1 = a3 <u a5\n  8374: a4 = a4 <u t1\n  8377: u64 [sp + 0x20] = a4\n  8380: s1 = a4 if t0 == 0\n  8383: t0 = u64 [a1 + 0x18]\n  8386: a1 = u64 [a2 + 0x18]\n  8389: u64 [sp + 0x18] = a1\n  8392: a2 = t2 - ra\n  8395: a1 = a2 - s1\n  8398: u64 [sp + 0x30] = a1\n  8401: a1 = a2 <u s1\n  8404: a4 = t2 <u ra\n  8407: u64 [sp + 0x38] = t0\n  8410: a2 = u64 [sp + 0x18]\n  8413: a2 = a2 - t0\n  8416: a2 = a2 - a4\n  8419: a2 = a2 - a1\n  8422: a1 = a3 - a5\n  8425: a3 = u64 [sp + 0x20]\n  8428: a1 = a1 - a3\n  8431: a3 = u64 [sp + 0x28]\n  8434: a3 = a3 - t1\n  8437: a4 = a1 >u 0\n  8439: a3 = a3 <u 0x40\n  8442: a3 = a3 ^ 0x1\n  8445: a3 = a4 if a1 != 0\n  8448: s1 = a2 >s 0\n  8450: a1 = u64 [sp + 0x30]\n  8453: a4 = a1 >u 0\n  8455: a4 = s1 if a2 != 0\n  8458: a1 = a1 | a2\n  8461: a3 = a4 if a1 != 0\n  8464: jump @169 if a3 == 0\n      : @161 (gas: 12)\n  8468: s1 = a0\n  8470: a0 = t1 | ra\n  8473: u64 [sp + 0x30] = a5\n  8476: a1 = u64 [sp + 0x38]\n  8479: a1 = a1 | a5\n  8482: a0 = a0 | a1\n  8485: a0 = a0 >> 0x20\n  8488: u64 [sp + 0x28] = ra\n  8491: a1 = a1 | ra\n  8494: a1 = a1 << 0x20\n  8497: a0 = a0 | a1\n  8500: jump @168 if a0 != 0\n      : @162 (gas: 6)\n  8504: u64 [sp + 0x20] = t1\n  8507: i32 a1 = t1 + 0\n  8509: i32 a0 = sp + 0x40\n  8512: u64 [sp + 0x8] = a1\n  8515: ecalli 3 // 'call_data_load'\n  8517: fallthrough\n      : @163 (gas: 10)\n  8518: a4 = u64 [sp + 0x50]\n  8521: a3 = u64 [sp + 0x58]\n  8524: a0 = 0x100000000\n  8534: a1 = a4 ^ a0\n  8537: a1 = a1 | a3\n  8540: a2 = a4 >> 0x20\n  8543: a2 = a2 <u 0x1\n  8546: a2 = 0 if a3 != 0\n  8548: a2 = 0 if a1 == 0\n  8550: jump @169 if a2 == 0\n      : @164 (gas: 12)\n  8554: u64 [sp + 0x10] = a4\n  8557: u64 [sp + 0x18] = a3\n  8560: a1 = u64 [sp + 0x28]\n  8563: a2 = u64 [sp + 0x38]\n  8566: a1 = a1 | a2\n  8569: a0 = 0xffffffe0\n  8579: a2 = u64 [sp + 0x20]\n  8582: a0 = a2 <u a0\n  8585: a2 = u64 [sp + 0x30]\n  8588: a0 = 0 if a2 != 0\n  8590: a0 = 0 if a1 != 0\n  8592: jump @168 if a0 == 0\n      : @165 (gas: 9)\n  8595: a0 = u64 [sp + 0x48]\n  8598: u64 [sp + 0x30] = a0\n  8601: a0 = u64 [sp + 0x40]\n  8604: u64 [sp + 0x38] = a0\n  8607: a0 = u64 [sp + 0x8]\n  8610: i32 a1 = a0 + 0x20\n  8613: i32 a0 = sp + 0x40\n  8616: ecalli 3 // 'call_data_load'\n  8618: fallthrough\n      : @166 (gas: 10)\n  8619: a1 = u64 [sp + 0x50]\n  8622: a0 = u64 [sp + 0x58]\n  8625: a2 = 0x100000000\n  8635: a2 = a2 ^ a1\n  8638: a2 = a2 | a0\n  8641: a3 = a1 >> 0x20\n  8644: a3 = a3 <u 0x1\n  8647: a3 = 0 if a0 != 0\n  8649: a3 = 0 if a2 == 0\n  8651: jump @169 if a3 == 0\n      : @167 (gas: 20)\n  8654: a2 = u64 [sp + 0x48]\n  8657: a3 = u64 [sp + 0x40]\n  8660: u64 [s1 + 0x28] = a2\n  8663: u64 [s1 + 0x20] = a3\n  8666: a2 = u64 [sp + 0x30]\n  8669: u64 [s1 + 0x8] = a2\n  8672: a2 = u64 [sp + 0x38]\n  8675: u64 [s1] = a2\n  8677: u64 [s1 + 0x30] = a1\n  8680: a1 = u64 [sp + 0x10]\n  8683: u64 [s1 + 0x10] = a1\n  8686: u64 [s1 + 0x38] = a0\n  8689: a0 = u64 [sp + 0x18]\n  8692: u64 [s1 + 0x18] = a0\n  8695: sp = s0 + 0xffffffffffffff80\n  8698: ra = u64 [sp + 0x78]\n  8701: s0 = u64 [sp + 0x70]\n  8704: s1 = u64 [sp + 0x68]\n  8707: sp = sp + 0x80\n  8711: ret\n      : @168 (gas: 1)\n  8713: trap\n      : @169 (gas: 3)\n  8714: a0 = 0\n  8716: a1 = 0\n  8718: ra = 128, jump @0\n      : @170 [@dyn 64] (gas: 6)\n  8724: i32 a1 = a0 + 0\n  8726: a0 = 0x1\n  8729: a2 = 0\n  8731: ra = 0x82\n  8735: ecalli 13 // 'seal_return'\n  8737: fallthrough\n      : @171 [@dyn 65] (gas: 12)\n  8738: sp = sp + 0xffffffffffffff00\n  8742: u64 [sp + 0xf8] = ra\n  8746: u64 [sp + 0xf0] = s0\n  8750: s0 = sp + 0x100\n  8754: sp = sp & 0xffffffffffffffe0\n  8757: u64 [sp + 216] = 0\n  8761: u64 [sp + 208] = 0\n  8765: u64 [sp + 200] = 0\n  8769: u64 [sp + 192] = 0\n  8773: i32 a0 = sp + 0xc0\n  8777: ecalli 16 // 'value_transferred'\n  8779: fallthrough\n      : @172 (gas: 8)\n  8780: a0 = u64 [sp + 0xd0]\n  8784: a1 = u64 [sp + 0xd8]\n  8788: a2 = u64 [sp + 0xc8]\n  8792: a3 = u64 [sp + 0xc0]\n  8796: a1 = a1 | a2\n  8799: a0 = a0 | a3\n  8802: a0 = a0 | a1\n  8805: jump @178 if a0 != 0\n      : @173 (gas: 13)\n  8809: a0 = u32 [0x20084]\n  8814: u64 [sp + 88] = 0\n  8817: u64 [sp + 80] = 0\n  8820: u64 [sp + 72] = 0\n  8823: u64 [sp + 0x40] = a0\n  8826: u64 [sp + 120] = 0\n  8829: u64 [sp + 112] = 0\n  8832: u64 [sp + 96] = 0x4\n  8836: a0 = sp + 0x80\n  8840: a1 = sp + 0x60\n  8843: a2 = sp + 0x40\n  8846: u64 [sp + 104] = 0\n  8849: ra = 132, jump @160\n      : @174 [@dyn 66] (gas: 54)\n  8855: t0 = u64 [sp + 0x80]\n  8859: t1 = u64 [sp + 0x88]\n  8863: a1 = u64 [sp + 0x90]\n  8867: a3 = u64 [sp + 0x98]\n  8871: a4 = u64 [sp + 0xa0]\n  8875: a5 = u64 [sp + 0xa8]\n  8879: a2 = u64 [sp + 0xb0]\n  8883: a0 = u64 [sp + 0xb8]\n  8887: u64 [sp + 0x18] = a0\n  8890: u64 [sp + 0x10] = a2\n  8893: u64 [sp + 0x8] = a5\n  8896: u64 [sp] = a4\n  8898: u64 [sp + 0x38] = a3\n  8901: u64 [sp + 0x30] = a1\n  8904: u64 [sp + 0x28] = t1\n  8907: a0 = sp + 0x20\n  8910: a1 = sp\n  8912: u64 [sp + 0x20] = t0\n  8915: ra = 0x86\n  8919: sp = sp + 0xfffffffffffffd20\n  8923: u64 [sp + 0x2d8] = ra\n  8927: u64 [sp + 0x2d0] = s0\n  8931: u64 [sp + 0x2c8] = s1\n  8935: s0 = sp + 0x2e0\n  8939: sp = sp & 0xffffffffffffffe0\n  8942: a2 = u64 [a1 + 0x10]\n  8945: u64 [sp + 0x110] = a2\n  8949: a2 = u64 [a1 + 0x8]\n  8952: u64 [sp + 0x108] = a2\n  8956: a1 = u64 [a1]\n  8958: u64 [sp + 0x118] = a1\n  8962: a1 = u64 [a0 + 0x10]\n  8965: u64 [sp + 0x100] = a1\n  8969: a1 = u64 [a0 + 0x8]\n  8972: u64 [sp + 0xf8] = a1\n  8976: a0 = u64 [a0]\n  8978: u64 [sp + 0xf0] = a0\n  8982: u64 [sp + 664] = 0\n  8986: u64 [sp + 656] = 0\n  8990: u64 [sp + 648] = 0\n  8994: u64 [sp + 640] = 0\n  8998: u64 [sp + 696] = 0\n  9002: u64 [sp + 688] = 0\n  9006: u64 [sp + 680] = 0\n  9010: u64 [sp + 672] = 0\n  9014: s1 = 0x20\n  9017: u32 [sp + 0x260] = s1\n  9021: i32 a1 = sp + 0x280\n  9025: i32 a3 = sp + 0x2a0\n  9029: i32 a4 = sp + 0x260\n  9033: a2 = 0xffffffffffffffff\n  9036: a0 = 0\n  9038: ecalli 8 // 'get_storage'\n  9040: jump @427\n      : @175 [@dyn 67] (gas: 3)\n  9043: a0 = 0x40\n  9046: a1 = 0x20\n  9049: ra = 136, jump @0\n      : @176 [@dyn 68] (gas: 100)\n  9055: a1 = u8 [a0 + 0x11]\n  9058: a2 = u8 [a0 + 0x10]\n  9061: a3 = u8 [a0 + 0x12]\n  9064: a4 = u8 [a0 + 0x13]\n  9067: a1 = a1 << 0x8\n  9070: a1 = a1 | a2\n  9073: a3 = a3 << 0x10\n  9076: a4 = a4 << 0x18\n  9079: a3 = a3 | a4\n  9082: a1 = a1 | a3\n  9085: a2 = u8 [a0 + 0x15]\n  9088: a3 = u8 [a0 + 0x14]\n  9091: a4 = u8 [a0 + 0x16]\n  9094: a5 = u8 [a0 + 0x17]\n  9097: a2 = a2 << 0x8\n  9100: a2 = a2 | a3\n  9103: a4 = a4 << 0x10\n  9106: a5 = a5 << 0x18\n  9109: a4 = a4 | a5\n  9112: a2 = a2 | a4\n  9115: a2 = a2 << 0x20\n  9118: t0 = a2 | a1\n  9121: a2 = u8 [a0 + 0x1]\n  9124: a3 = u8 [a0]\n  9126: a4 = u8 [a0 + 0x2]\n  9129: a5 = u8 [a0 + 0x3]\n  9132: a2 = a2 << 0x8\n  9135: a2 = a2 | a3\n  9138: a4 = a4 << 0x10\n  9141: a5 = a5 << 0x18\n  9144: a4 = a4 | a5\n  9147: a2 = a2 | a4\n  9150: a3 = u8 [a0 + 0x5]\n  9153: a4 = u8 [a0 + 0x4]\n  9156: a5 = u8 [a0 + 0x6]\n  9159: a1 = u8 [a0 + 0x7]\n  9162: a3 = a3 << 0x8\n  9165: a3 = a3 | a4\n  9168: a5 = a5 << 0x10\n  9171: a1 = a1 << 0x18\n  9174: a1 = a1 | a5\n  9177: a1 = a1 | a3\n  9180: a1 = a1 << 0x20\n  9183: t1 = a1 | a2\n  9186: a1 = u8 [a0 + 0x19]\n  9189: a3 = u8 [a0 + 0x18]\n  9192: a4 = u8 [a0 + 0x1a]\n  9195: a5 = u8 [a0 + 0x1b]\n  9198: a1 = a1 << 0x8\n  9201: a1 = a1 | a3\n  9204: a4 = a4 << 0x10\n  9207: a5 = a5 << 0x18\n  9210: a4 = a4 | a5\n  9213: a1 = a1 | a4\n  9216: a3 = u8 [a0 + 0x1d]\n  9219: a4 = u8 [a0 + 0x1c]\n  9222: a5 = u8 [a0 + 0x1e]\n  9225: a2 = u8 [a0 + 0x1f]\n  9228: a3 = a3 << 0x8\n  9231: a3 = a3 | a4\n  9234: a5 = a5 << 0x10\n  9237: a2 = a2 << 0x18\n  9240: a2 = a2 | a5\n  9243: a2 = a2 | a3\n  9246: a2 = a2 << 0x20\n  9249: a3 = a2 | a1\n  9252: a1 = u8 [a0 + 0x9]\n  9255: a2 = u8 [a0 + 0x8]\n  9258: a4 = u8 [a0 + 0xa]\n  9261: a5 = u8 [a0 + 0xb]\n  9264: a1 = a1 << 0x8\n  9267: a1 = a1 | a2\n  9270: a4 = a4 << 0x10\n  9273: a5 = a5 << 0x18\n  9276: a4 = a4 | a5\n  9279: a1 = a1 | a4\n  9282: a2 = u8 [a0 + 0xd]\n  9285: a4 = u8 [a0 + 0xc]\n  9288: a5 = u8 [a0 + 0xe]\n  9291: a0 = u8 [a0 + 0xf]\n  9294: a2 = a2 << 0x8\n  9297: a2 = a2 | a4\n  9300: a5 = a5 << 0x10\n  9303: a0 = a0 << 0x18\n  9306: a0 = a0 | a5\n  9309: a0 = a0 | a2\n  9312: a0 = a0 << 0x20\n  9315: a0 = a0 | a1\n  9318: a1 = reverse a0\n  9320: a0 = reverse a3\n  9322: a2 = reverse t1\n  9324: a3 = reverse t0\n  9326: a2 = a2 | a3\n  9329: a3 = a0 | a1\n  9332: a3 = a3 | a2\n  9335: a3 = a3 >> 0x20\n  9338: a1 = a1 | a2\n  9341: a1 = a1 << 0x20\n  9344: a1 = a1 | a3\n  9347: jump @180 if a1 == 0\n      : @177 (gas: 1)\n  9350: trap\n      : @178 (gas: 3)\n  9351: a0 = 0\n  9353: a1 = 0\n  9355: ra = 138, jump @0\n      : @179 [@dyn 69] (gas: 7)\n  9361: i32 a1 = a0 + 0\n  9363: a0 = 0x1\n  9366: a2 = 0\n  9368: ecalli 13 // 'seal_return'\n  9370: i32 a0 = a0 + 0\n  9372: ra = 0x8c\n  9376: jump @0\n      : @180 (gas: 2)\n  9379: i32 a0 = a0 + 0\n  9381: ra = 140, jump @0\n      : @181 [@dyn 70] (gas: 6)\n  9387: i32 a1 = a0 + 0\n  9389: a0 = 0\n  9391: a2 = 0\n  9393: ra = 0x8e\n  9397: ecalli 13 // 'seal_return'\n  9399: fallthrough\n      : @182 [@dyn 71] (gas: 9)\n  9400: a2 = u64 [a1 + 0x18]\n  9403: a3 = u64 [a1 + 0x10]\n  9406: a4 = u64 [a1 + 0x8]\n  9409: a1 = u64 [a1]\n  9411: u64 [a0 + 0x18] = a2\n  9414: u64 [a0 + 0x10] = a3\n  9417: u64 [a0 + 0x8] = a4\n  9420: u64 [a0] = a1\n  9422: ret\n      : @183 (gas: 17)\n  9424: sp = sp + 0xffffffffffffffa0\n  9427: u64 [sp + 0x58] = ra\n  9430: u64 [sp + 0x50] = s0\n  9433: u64 [sp + 0x48] = s1\n  9436: a3 = u64 [a1 + 0x18]\n  9439: a4 = u64 [a1 + 0x10]\n  9442: a5 = u64 [a1 + 0x8]\n  9445: s1 = u64 [a1]\n  9447: a1 = a5 | a3\n  9450: a2 = s1 | a4\n  9453: a2 = a2 | a1\n  9456: a2 = a2 >> 0x20\n  9459: a1 = a1 | a4\n  9462: a1 = a1 << 0x20\n  9465: a1 = a1 | a2\n  9468: u64 [sp + 0x28] = a0\n  9471: jump @190 if a1 != 0\n      : @184 (gas: 19)\n  9475: a0 = s1 + 0x20\n  9478: u64 [sp + 0x30] = a0\n  9481: a0 = a0 <u s1\n  9484: a1 = a5 + a0\n  9487: u64 [sp + 0x40] = a1\n  9490: u64 [sp + 0x8] = a5\n  9493: s0 = a1 <u a5\n  9496: s0 = a0 if a0 == 0\n  9499: s0 = s0 + a4\n  9502: u64 [sp + 0x10] = a4\n  9505: a0 = s0 <u a4\n  9508: u64 [sp + 0x18] = a3\n  9511: a0 = a0 + a3\n  9514: u64 [sp + 0x38] = a0\n  9517: u64 [sp] = s1\n  9519: i32 a0 = s1 + 0\n  9521: a1 = 0x20\n  9524: s1 = 0x20\n  9527: ra = 144, jump @0\n      : @185 [@dyn 72] (gas: 45)\n  9533: u8 [a0 + 0x1f] = s1\n  9536: a1 = u64 [sp + 0x30]\n  9539: s1 = a1\n  9541: a1 = a1 | s0\n  9544: a2 = u64 [sp + 0x40]\n  9547: a4 = u64 [sp + 0x38]\n  9550: a2 = a2 | a4\n  9553: a1 = a1 | a2\n  9556: a1 = a1 >> 0x20\n  9559: u64 [sp + 0x20] = s0\n  9562: a2 = a2 | s0\n  9565: a2 = a2 << 0x20\n  9568: a1 = a1 | a2\n  9571: u8 [a0 + 30] = 0\n  9574: u8 [a0 + 29] = 0\n  9577: u8 [a0 + 28] = 0\n  9580: u8 [a0 + 27] = 0\n  9583: u8 [a0 + 26] = 0\n  9586: u8 [a0 + 25] = 0\n  9589: u8 [a0 + 24] = 0\n  9592: u8 [a0 + 23] = 0\n  9595: u8 [a0 + 22] = 0\n  9598: u8 [a0 + 21] = 0\n  9601: u8 [a0 + 20] = 0\n  9604: u8 [a0 + 19] = 0\n  9607: u8 [a0 + 18] = 0\n  9610: u8 [a0 + 17] = 0\n  9613: u8 [a0 + 16] = 0\n  9616: u8 [a0 + 15] = 0\n  9619: u8 [a0 + 14] = 0\n  9622: u8 [a0 + 13] = 0\n  9625: u8 [a0 + 12] = 0\n  9628: u8 [a0 + 11] = 0\n  9631: u8 [a0 + 10] = 0\n  9634: u8 [a0 + 9] = 0\n  9637: u8 [a0 + 8] = 0\n  9640: u8 [a0 + 7] = 0\n  9643: u8 [a0 + 6] = 0\n  9646: u8 [a0 + 5] = 0\n  9649: u8 [a0 + 4] = 0\n  9652: u8 [a0 + 3] = 0\n  9655: u8 [a0 + 2] = 0\n  9658: u8 [a0 + 1] = 0\n  9661: u8 [a0 + 0] = 0\n  9663: jump @190 if a1 != 0\n      : @186 (gas: 4)\n  9667: i32 s0 = s1 + 0\n  9669: a1 = 0x20\n  9672: a0 = s0\n  9674: ra = 146, jump @0\n      : @187 [@dyn 73] (gas: 41)\n  9680: u8 [a0 + 31] = 0x17\n  9684: u8 [a0 + 30] = 0\n  9687: u8 [a0 + 29] = 0\n  9690: u8 [a0 + 28] = 0\n  9693: u8 [a0 + 27] = 0\n  9696: u8 [a0 + 26] = 0\n  9699: u8 [a0 + 25] = 0\n  9702: u8 [a0 + 24] = 0\n  9705: u8 [a0 + 23] = 0\n  9708: u8 [a0 + 22] = 0\n  9711: u8 [a0 + 21] = 0\n  9714: u8 [a0 + 20] = 0\n  9717: u8 [a0 + 19] = 0\n  9720: u8 [a0 + 18] = 0\n  9723: u8 [a0 + 17] = 0\n  9726: u8 [a0 + 16] = 0\n  9729: u8 [a0 + 15] = 0\n  9732: u8 [a0 + 14] = 0\n  9735: u8 [a0 + 13] = 0\n  9738: u8 [a0 + 12] = 0\n  9741: u8 [a0 + 11] = 0\n  9744: u8 [a0 + 10] = 0\n  9747: u8 [a0 + 9] = 0\n  9750: u8 [a0 + 8] = 0\n  9753: u8 [a0 + 7] = 0\n  9756: u8 [a0 + 6] = 0\n  9759: u8 [a0 + 5] = 0\n  9762: u8 [a0 + 4] = 0\n  9765: u8 [a0 + 3] = 0\n  9768: u8 [a0 + 2] = 0\n  9771: u8 [a0 + 1] = 0\n  9774: a1 = u64 [sp + 0x20]\n  9777: a2 = u64 [sp + 0x38]\n  9780: a1 = a1 | a2\n  9783: a2 = 0xffffffe0\n  9793: a2 = s1 <u a2\n  9796: a3 = u64 [sp + 0x40]\n  9799: a2 = 0 if a3 != 0\n  9801: a2 = 0 if a1 != 0\n  9803: u8 [a0 + 0] = 0\n  9805: jump @190 if a2 == 0\n      : @188 (gas: 3)\n  9809: i32 a0 = s0 + 0x20\n  9812: a1 = 0x20\n  9815: ra = 148, jump @0\n      : @189 [@dyn 74] (gas: 55)\n  9821: u8 [a0 + 31] = 0\n  9824: u8 [a0 + 30] = 0\n  9827: u8 [a0 + 29] = 0\n  9830: u8 [a0 + 28] = 0\n  9833: u8 [a0 + 27] = 0\n  9836: u8 [a0 + 26] = 0\n  9839: u8 [a0 + 25] = 0\n  9842: u8 [a0 + 24] = 0\n  9845: u8 [a0 + 23] = 0\n  9848: u8 [a0 + 22] = 0x72\n  9852: u8 [a0 + 21] = 0x65\n  9856: u8 [a0 + 20] = 0x6e\n  9860: u8 [a0 + 19] = 0x77\n  9864: u8 [a0 + 18] = 0x6f\n  9868: u8 [a0 + 17] = 0x20\n  9872: a5 = 0x74\n  9875: u8 [a0 + 0x10] = a5\n  9878: u8 [a0 + 15] = 0x6f\n  9882: u8 [a0 + 14] = 0x6e\n  9886: u8 [a0 + 13] = 0x20\n  9890: u8 [a0 + 12] = 0x73\n  9894: u8 [a0 + 11] = 0x69\n  9898: u8 [a0 + 10] = 0x20\n  9902: u8 [a0 + 9] = 0x72\n  9906: u8 [a0 + 8] = 0x65\n  9910: u8 [a0 + 7] = 0x6c\n  9914: u8 [a0 + 6] = 0x6c\n  9918: u8 [a0 + 5] = 0x61\n  9922: u8 [a0 + 4] = 0x63\n  9926: u8 [a0 + 3] = 0x20\n  9930: u8 [a0 + 2] = 0x3a\n  9934: u8 [a0 + 1] = 0x57\n  9938: u8 [a0 + 0] = 0x53\n  9941: a1 = u64 [sp]\n  9943: a0 = a1 + 0x60\n  9946: a1 = a0 <u a1\n  9949: a3 = u64 [sp + 0x8]\n  9952: a2 = a3 + a1\n  9955: a3 = a2 <u a3\n  9958: a3 = a1 if a1 == 0\n  9961: a1 = u64 [sp + 0x10]\n  9964: a3 = a3 + a1\n  9967: a1 = a3 <u a1\n  9970: a4 = u64 [sp + 0x18]\n  9973: a1 = a1 + a4\n  9976: a4 = u64 [sp + 0x28]\n  9979: u64 [a4] = a0\n  9981: u64 [a4 + 0x8] = a2\n  9984: u64 [a4 + 0x10] = a3\n  9987: u64 [a4 + 0x18] = a1\n  9990: ra = u64 [sp + 0x58]\n  9993: s0 = u64 [sp + 0x50]\n  9996: s1 = u64 [sp + 0x48]\n  9999: sp = sp + 0x60\n 10002: ret\n      : @190 (gas: 1)\n 10004: trap\n      : @191 (gas: 55)\n 10005: sp = sp + 0xfffffffffffffea0\n 10009: u64 [sp + 0x158] = ra\n 10013: u64 [sp + 0x150] = s0\n 10017: u64 [sp + 0x148] = s1\n 10021: s0 = sp + 0x160\n 10025: sp = sp & 0xffffffffffffffe0\n 10028: a2 = u64 [a1 + 0x18]\n 10031: u64 [sp + 0x40] = a2\n 10034: a2 = u64 [a1 + 0x10]\n 10037: u64 [sp + 0x38] = a2\n 10040: a2 = u64 [a1 + 0x8]\n 10043: u64 [sp + 0x28] = a2\n 10046: a1 = u64 [a1]\n 10048: u64 [sp + 0x18] = a1\n 10051: a1 = u64 [a0 + 0x18]\n 10054: u64 [sp + 0x48] = a1\n 10057: a1 = u64 [a0 + 0x10]\n 10060: u64 [sp + 0x30] = a1\n 10063: a1 = u64 [a0 + 0x8]\n 10066: u64 [sp + 0x20] = a1\n 10069: a0 = u64 [a0]\n 10071: u64 [sp + 0x10] = a0\n 10074: i32 a0 = sp + 0xe0\n 10078: ecalli 5 // 'caller'\n 10080: a0 = u64 [sp + 0xe8]\n 10084: a1 = u64 [sp + 0xe0]\n 10088: a2 = i32 [sp + 0xf0]\n 10092: a0 = reverse a0\n 10094: a3 = a0 >> 0x20\n 10097: s1 = reverse a1\n 10099: a1 = s1 << 0x20\n 10102: a1 = a1 | a3\n 10105: u64 [sp + 0x58] = a1\n 10108: a0 = a0 << 0x20\n 10111: a1 = reverse a2\n 10113: a1 = a1 >> 0x20\n 10116: a0 = a0 | a1\n 10119: u64 [sp + 0x50] = a0\n 10122: s1 = s1 >> 0x20\n 10125: u64 [sp + 280] = 0\n 10129: u64 [sp + 272] = 0\n 10133: u64 [sp + 264] = 0\n 10137: u64 [sp + 256] = 0\n 10141: u64 [sp + 312] = 0\n 10145: u64 [sp + 304] = 0\n 10149: u64 [sp + 296] = 0\n 10153: u64 [sp + 288] = 0\n 10157: u32 [sp + 320] = 0x20\n 10162: i32 a1 = sp + 0x100\n 10166: i32 a3 = sp + 0x120\n 10170: i32 a4 = sp + 0x140\n 10174: a2 = 0xffffffffffffffff\n 10177: a0 = 0\n 10179: ecalli 8 // 'get_storage'\n 10181: fallthrough\n      : @192 (gas: 11)\n 10182: a0 = u32 [sp + 0x130]\n 10186: a1 = u64 [sp + 0x120]\n 10190: a2 = u64 [sp + 0x128]\n 10194: a0 = a0 ^ s1\n 10197: a3 = u64 [sp + 0x50]\n 10200: a1 = a1 ^ a3\n 10203: a0 = a0 | a1\n 10206: a1 = u64 [sp + 0x58]\n 10209: a1 = a1 ^ a2\n 10212: a0 = a0 | a1\n 10215: jump @195 if a0 != 0\n      : @193 (gas: 19)\n 10218: a0 = u64 [sp + 0x18]\n 10221: u64 [sp + 0x60] = a0\n 10224: a0 = u64 [sp + 0x10]\n 10227: u64 [sp + 0x80] = a0\n 10231: a0 = u64 [sp + 0x28]\n 10234: u64 [sp + 0x68] = a0\n 10237: a0 = u64 [sp + 0x20]\n 10240: u64 [sp + 0x88] = a0\n 10244: a0 = u64 [sp + 0x38]\n 10247: u64 [sp + 0x70] = a0\n 10250: a0 = u64 [sp + 0x30]\n 10253: u64 [sp + 0x90] = a0\n 10257: a0 = u64 [sp + 0x40]\n 10260: u64 [sp + 0x78] = a0\n 10263: a0 = sp + 0x80\n 10267: a1 = sp + 0x60\n 10270: a2 = u64 [sp + 0x48]\n 10273: u64 [sp + 0x98] = a2\n 10277: ra = 150, jump @236\n      : @194 [@dyn 75] (gas: 6)\n 10283: sp = s0 + 0xfffffffffffffea0\n 10287: ra = u64 [sp + 0x158]\n 10291: s0 = u64 [sp + 0x150]\n 10295: s1 = u64 [sp + 0x148]\n 10299: sp = sp + 0x160\n 10303: ret\n      : @195 (gas: 3)\n 10305: a0 = 0x40\n 10308: a1 = 0x20\n 10311: ra = 152, jump @0\n      : @196 [@dyn 76] (gas: 103)\n 10317: a1 = u8 [a0 + 0x11]\n 10320: a2 = u8 [a0 + 0x10]\n 10323: a3 = u8 [a0 + 0x12]\n 10326: a4 = u8 [a0 + 0x13]\n 10329: a1 = a1 << 0x8\n 10332: a1 = a1 | a2\n 10335: a3 = a3 << 0x10\n 10338: a4 = a4 << 0x18\n 10341: a3 = a3 | a4\n 10344: a1 = a1 | a3\n 10347: a2 = u8 [a0 + 0x15]\n 10350: a3 = u8 [a0 + 0x14]\n 10353: a4 = u8 [a0 + 0x16]\n 10356: a5 = u8 [a0 + 0x17]\n 10359: a2 = a2 << 0x8\n 10362: a2 = a2 | a3\n 10365: a4 = a4 << 0x10\n 10368: a5 = a5 << 0x18\n 10371: a4 = a4 | a5\n 10374: a2 = a2 | a4\n 10377: a2 = a2 << 0x20\n 10380: t0 = a2 | a1\n 10383: a2 = u8 [a0 + 0x1]\n 10386: a3 = u8 [a0]\n 10388: a4 = u8 [a0 + 0x2]\n 10391: a5 = u8 [a0 + 0x3]\n 10394: a2 = a2 << 0x8\n 10397: a2 = a2 | a3\n 10400: a4 = a4 << 0x10\n 10403: a5 = a5 << 0x18\n 10406: a4 = a4 | a5\n 10409: a2 = a2 | a4\n 10412: a3 = u8 [a0 + 0x5]\n 10415: a4 = u8 [a0 + 0x4]\n 10418: a5 = u8 [a0 + 0x6]\n 10421: s1 = u8 [a0 + 0x7]\n 10424: a3 = a3 << 0x8\n 10427: a3 = a3 | a4\n 10430: a5 = a5 << 0x10\n 10433: s1 = s1 << 0x18\n 10436: a5 = a5 | s1\n 10439: a3 = a3 | a5\n 10442: a3 = a3 << 0x20\n 10445: a2 = a2 | a3\n 10448: a3 = u8 [a0 + 0x19]\n 10451: a4 = u8 [a0 + 0x18]\n 10454: a5 = u8 [a0 + 0x1a]\n 10457: s1 = u8 [a0 + 0x1b]\n 10460: a3 = a3 << 0x8\n 10463: a3 = a3 | a4\n 10466: a5 = a5 << 0x10\n 10469: s1 = s1 << 0x18\n 10472: a5 = a5 | s1\n 10475: a3 = a3 | a5\n 10478: a4 = u8 [a0 + 0x1d]\n 10481: a5 = u8 [a0 + 0x1c]\n 10484: s1 = u8 [a0 + 0x1e]\n 10487: a1 = u8 [a0 + 0x1f]\n 10490: a4 = a4 << 0x8\n 10493: a4 = a4 | a5\n 10496: s1 = s1 << 0x10\n 10499: a1 = a1 << 0x18\n 10502: a1 = a1 | s1\n 10505: a1 = a1 | a4\n 10508: a1 = a1 << 0x20\n 10511: a3 = a3 | a1\n 10514: a1 = u8 [a0 + 0x9]\n 10517: a4 = u8 [a0 + 0x8]\n 10520: a5 = u8 [a0 + 0xa]\n 10523: s1 = u8 [a0 + 0xb]\n 10526: a1 = a1 << 0x8\n 10529: a1 = a1 | a4\n 10532: a5 = a5 << 0x10\n 10535: s1 = s1 << 0x18\n 10538: a5 = a5 | s1\n 10541: a1 = a1 | a5\n 10544: a4 = u8 [a0 + 0xd]\n 10547: a5 = u8 [a0 + 0xc]\n 10550: s1 = u8 [a0 + 0xe]\n 10553: a0 = u8 [a0 + 0xf]\n 10556: a4 = a4 << 0x8\n 10559: a4 = a4 | a5\n 10562: s1 = s1 << 0x10\n 10565: a0 = a0 << 0x18\n 10568: a0 = a0 | s1\n 10571: a0 = a0 | a4\n 10574: a0 = a0 << 0x20\n 10577: a0 = a0 | a1\n 10580: s1 = reverse a0\n 10582: a1 = reverse a3\n 10584: a2 = reverse a2\n 10586: a0 = reverse t0\n 10588: u64 [sp + 0x58] = a0\n 10591: u64 [sp + 0x50] = a2\n 10594: a0 = a0 | a2\n 10597: a2 = a1\n 10599: a1 = a1 | s1\n 10602: a1 = a1 | a0\n 10605: a1 = a1 >> 0x20\n 10608: a0 = a0 | s1\n 10611: a0 = a0 << 0x20\n 10614: a0 = a0 | a1\n 10617: jump @200 if a0 != 0\n      : @197 (gas: 5)\n 10621: u64 [sp + 0x48] = a2\n 10624: i32 a0 = a2 + 0\n 10626: a1 = 0x20\n 10629: u64 [sp + 0x40] = a0\n 10632: ra = 154, jump @0\n      : @198 [@dyn 77] (gas: 50)\n 10638: u8 [a0 + 31] = 0\n 10641: u8 [a0 + 30] = 0\n 10644: u8 [a0 + 29] = 0\n 10647: u8 [a0 + 28] = 0\n 10650: u8 [a0 + 27] = 0\n 10653: u8 [a0 + 26] = 0\n 10656: u8 [a0 + 25] = 0\n 10659: u8 [a0 + 24] = 0\n 10662: u8 [a0 + 23] = 0\n 10665: u8 [a0 + 22] = 0\n 10668: u8 [a0 + 21] = 0\n 10671: u8 [a0 + 20] = 0\n 10674: u8 [a0 + 19] = 0\n 10677: u8 [a0 + 18] = 0\n 10680: u8 [a0 + 17] = 0\n 10683: u8 [a0 + 16] = 0\n 10686: u8 [a0 + 15] = 0\n 10689: u8 [a0 + 14] = 0\n 10692: u8 [a0 + 13] = 0\n 10695: u8 [a0 + 12] = 0\n 10698: u8 [a0 + 11] = 0\n 10701: u8 [a0 + 10] = 0\n 10704: u8 [a0 + 9] = 0\n 10707: u8 [a0 + 8] = 0\n 10710: u8 [a0 + 7] = 0\n 10713: u8 [a0 + 6] = 0\n 10716: u8 [a0 + 5] = 0\n 10719: u8 [a0 + 4] = 0\n 10722: u8 [a0 + 3] = 0xa0\n 10727: u8 [a0 + 2] = 0x79\n 10731: u8 [a0 + 1] = 0xc3\n 10736: u8 [a0 + 0] = 0x8\n 10739: a1 = u64 [sp + 0x48]\n 10742: a0 = a1 + 0x4\n 10745: a1 = a0 <u a1\n 10748: a3 = u64 [sp + 0x58]\n 10751: a2 = a3 + a1\n 10754: a3 = a2 <u a3\n 10757: a3 = a1 if a1 == 0\n 10760: a3 = a3 + s1\n 10763: a1 = a3 <u s1\n 10766: a4 = u64 [sp + 0x50]\n 10769: a4 = a4 + a1\n 10772: u64 [sp + 0xa8] = a2\n 10776: u64 [sp + 0xa0] = a0\n 10780: u64 [sp + 0xb0] = a3\n 10784: a0 = sp + 0xc0\n 10788: a1 = sp + 0xa0\n 10792: u64 [sp + 0xb8] = a4\n 10796: ra = 156, jump @183\n      : @199 [@dyn 78] (gas: 30)\n 10802: a0 = u64 [sp + 0xc8]\n 10806: t0 = u64 [sp + 0xd8]\n 10810: t1 = u64 [sp + 0xc0]\n 10814: a3 = u64 [sp + 0xd0]\n 10818: a1 = u64 [sp + 0x58]\n 10821: a4 = a0 ^ a1\n 10824: a5 = a0 <u a1\n 10827: t2 = a1\n 10829: a2 = u64 [sp + 0x48]\n 10832: a1 = t1 <u a2\n 10835: a5 = a1 if a4 == 0\n 10838: a4 = a3 - s1\n 10841: a3 = a3 <u s1\n 10844: s1 = u64 [sp + 0x50]\n 10847: s1 = t0 - s1\n 10850: s1 = s1 - a3\n 10853: a3 = a4 <u a5\n 10856: s1 = s1 - a3\n 10859: a4 = a4 - a5\n 10862: a0 = a0 - t2\n 10865: a1 = a0 - a1\n 10868: a0 = t1 - a2\n 10871: a1 = a1 | s1\n 10874: a2 = a0 | a4\n 10877: a2 = a2 | a1\n 10880: a1 = a1 | a4\n 10883: a2 = a2 >> 0x20\n 10886: a1 = a1 << 0x20\n 10889: a1 = a1 | a2\n 10892: jump @201 if a1 == 0\n      : @200 (gas: 1)\n 10895: trap\n      : @201 (gas: 4)\n 10896: i32 s1 = a0 + 0\n 10898: a0 = u64 [sp + 0x40]\n 10901: a1 = s1\n 10903: ra = 158, jump @0\n      : @202 [@dyn 79] (gas: 6)\n 10909: i32 a1 = a0 + 0\n 10911: a0 = 0x1\n 10914: a2 = s1\n 10916: ra = 0xa0\n 10920: ecalli 13 // 'seal_return'\n 10922: fallthrough\n      : @203 [@dyn 80] (gas: 9)\n 10923: a2 = u64 [a1 + 0x18]\n 10926: a3 = u64 [a1 + 0x10]\n 10929: a4 = u64 [a1 + 0x8]\n 10932: a1 = u64 [a1]\n 10934: u64 [a0 + 0x18] = a2\n 10937: u64 [a0 + 0x10] = a3\n 10940: u64 [a0 + 0x8] = a4\n 10943: u64 [a0] = a1\n 10945: ret\n      : @204 (gas: 17)\n 10947: sp = sp + 0xffffffffffffff98\n 10950: u64 [sp + 0x60] = ra\n 10953: u64 [sp + 0x58] = s0\n 10956: u64 [sp + 0x50] = s1\n 10959: a3 = u64 [a1 + 0x18]\n 10962: a4 = u64 [a1 + 0x10]\n 10965: a5 = u64 [a1 + 0x8]\n 10968: s1 = u64 [a1]\n 10970: a1 = a5 | a3\n 10973: a2 = s1 | a4\n 10976: a2 = a2 | a1\n 10979: a2 = a2 >> 0x20\n 10982: a1 = a1 | a4\n 10985: a1 = a1 << 0x20\n 10988: a1 = a1 | a2\n 10991: u64 [sp + 0x30] = a0\n 10994: jump @213 if a1 != 0\n      : @205 (gas: 19)\n 10998: a0 = s1 + 0x20\n 11001: u64 [sp + 0x48] = a0\n 11004: a0 = a0 <u s1\n 11007: a1 = a5 + a0\n 11010: u64 [sp + 0x40] = a1\n 11013: u64 [sp + 0x18] = a5\n 11016: s0 = a1 <u a5\n 11019: s0 = a0 if a0 == 0\n 11022: s0 = s0 + a4\n 11025: u64 [sp + 0x20] = a4\n 11028: a0 = s0 <u a4\n 11031: u64 [sp + 0x28] = a3\n 11034: a0 = a0 + a3\n 11037: u64 [sp + 0x38] = a0\n 11040: u64 [sp + 0x10] = s1\n 11043: i32 a0 = s1 + 0\n 11045: a1 = 0x20\n 11048: s1 = 0x20\n 11051: ra = 162, jump @0\n      : @206 [@dyn 81] (gas: 43)\n 11057: u8 [a0 + 0x1f] = s1\n 11060: a1 = u64 [sp + 0x48]\n 11063: a1 = a1 | s0\n 11066: a2 = u64 [sp + 0x40]\n 11069: a3 = u64 [sp + 0x38]\n 11072: a2 = a2 | a3\n 11075: a1 = a1 | a2\n 11078: a1 = a1 >> 0x20\n 11081: a2 = a2 | s0\n 11084: a2 = a2 << 0x20\n 11087: a1 = a1 | a2\n 11090: u8 [a0 + 30] = 0\n 11093: u8 [a0 + 29] = 0\n 11096: u8 [a0 + 28] = 0\n 11099: u8 [a0 + 27] = 0\n 11102: u8 [a0 + 26] = 0\n 11105: u8 [a0 + 25] = 0\n 11108: u8 [a0 + 24] = 0\n 11111: u8 [a0 + 23] = 0\n 11114: u8 [a0 + 22] = 0\n 11117: u8 [a0 + 21] = 0\n 11120: u8 [a0 + 20] = 0\n 11123: u8 [a0 + 19] = 0\n 11126: u8 [a0 + 18] = 0\n 11129: u8 [a0 + 17] = 0\n 11132: u8 [a0 + 16] = 0\n 11135: u8 [a0 + 15] = 0\n 11138: u8 [a0 + 14] = 0\n 11141: u8 [a0 + 13] = 0\n 11144: u8 [a0 + 12] = 0\n 11147: u8 [a0 + 11] = 0\n 11150: u8 [a0 + 10] = 0\n 11153: u8 [a0 + 9] = 0\n 11156: u8 [a0 + 8] = 0\n 11159: u8 [a0 + 7] = 0\n 11162: u8 [a0 + 6] = 0\n 11165: u8 [a0 + 5] = 0\n 11168: u8 [a0 + 4] = 0\n 11171: u8 [a0 + 3] = 0\n 11174: u8 [a0 + 2] = 0\n 11177: u8 [a0 + 1] = 0\n 11180: u8 [a0 + 0] = 0\n 11182: jump @213 if a1 != 0\n      : @207 (gas: 6)\n 11186: s1 = s0\n 11188: s0 = u64 [sp + 0x48]\n 11191: i32 a0 = s0 + 0\n 11193: a1 = 0x20\n 11196: u64 [sp + 0x8] = a0\n 11199: ra = 164, jump @0\n      : @208 [@dyn 82] (gas: 44)\n 11205: u8 [a0 + 31] = 0x21\n 11209: u8 [a0 + 30] = 0\n 11212: u8 [a0 + 29] = 0\n 11215: u8 [a0 + 28] = 0\n 11218: u8 [a0 + 27] = 0\n 11221: u8 [a0 + 26] = 0\n 11224: u8 [a0 + 25] = 0\n 11227: u8 [a0 + 24] = 0\n 11230: u8 [a0 + 23] = 0\n 11233: u8 [a0 + 22] = 0\n 11236: u8 [a0 + 21] = 0\n 11239: u8 [a0 + 20] = 0\n 11242: u8 [a0 + 19] = 0\n 11245: u8 [a0 + 18] = 0\n 11248: u8 [a0 + 17] = 0\n 11251: u8 [a0 + 16] = 0\n 11254: u8 [a0 + 15] = 0\n 11257: u8 [a0 + 14] = 0\n 11260: u8 [a0 + 13] = 0\n 11263: u8 [a0 + 12] = 0\n 11266: u8 [a0 + 11] = 0\n 11269: u8 [a0 + 10] = 0\n 11272: u8 [a0 + 9] = 0\n 11275: u8 [a0 + 8] = 0\n 11278: u8 [a0 + 7] = 0\n 11281: u8 [a0 + 6] = 0\n 11284: u8 [a0 + 5] = 0\n 11287: u8 [a0 + 4] = 0\n 11290: u8 [a0 + 3] = 0\n 11293: u8 [a0 + 2] = 0\n 11296: u8 [a0 + 1] = 0\n 11299: a1 = u64 [sp + 0x38]\n 11302: a3 = s1 | a1\n 11305: s1 = 0x1\n 11308: a1 = 0x100000000\n 11318: u64 [sp] = a1\n 11320: a1 = 0xffffffe0\n 11330: a1 = s0 <u a1\n 11333: a2 = u64 [sp + 0x40]\n 11336: a1 = 0 if a2 != 0\n 11338: u64 [sp + 0x38] = a3\n 11341: a1 = 0 if a3 != 0\n 11343: u8 [a0 + 0] = 0\n 11345: jump @213 if a1 == 0\n      : @209 (gas: 4)\n 11349: s0 = u64 [sp + 0x8]\n 11352: i32 a0 = s0 + 0x20\n 11355: a1 = 0x20\n 11358: ra = 166, jump @0\n      : @210 [@dyn 83] (gas: 44)\n 11364: u8 [a0 + 31] = 0x73\n 11368: u8 [a0 + 30] = 0x65\n 11372: u8 [a0 + 29] = 0x72\n 11376: u8 [a0 + 28] = 0x64\n 11380: u8 [a0 + 27] = 0x64\n 11384: a5 = 0x61\n 11387: u8 [a0 + 0x1a] = a5\n 11390: s1 = 0x20\n 11393: u8 [a0 + 0x19] = s1\n 11396: u8 [a0 + 24] = 0x6f\n 11400: u8 [a0 + 23] = 0x72\n 11404: u8 [a0 + 22] = 0x65\n 11408: u8 [a0 + 21] = 0x7a\n 11412: u8 [a0 + 0x14] = s1\n 11415: u8 [a0 + 19] = 0x65\n 11419: u8 [a0 + 18] = 0x62\n 11423: u8 [a0 + 0x11] = s1\n 11426: u8 [a0 + 16] = 0x74\n 11430: u8 [a0 + 15] = 0x6f\n 11434: u8 [a0 + 14] = 0x6e\n 11438: u8 [a0 + 13] = 0x6e\n 11442: u8 [a0 + 0xc] = a5\n 11445: a4 = 0x63\n 11448: u8 [a0 + 0xb] = a4\n 11451: u8 [a0 + 0xa] = s1\n 11454: u8 [a0 + 9] = 0x65\n 11458: u8 [a0 + 8] = 0x6c\n 11462: u8 [a0 + 7] = 0x75\n 11466: u8 [a0 + 6] = 0x64\n 11470: u8 [a0 + 5] = 0x6f\n 11474: u8 [a0 + 4] = 0x6d\n 11478: u8 [a0 + 0x3] = s1\n 11481: u8 [a0 + 2] = 0x3a\n 11485: u8 [a0 + 1] = 0x57\n 11489: a2 = u64 [sp]\n 11491: a2 = a2 + 0xffffffffffffffc0\n 11494: a3 = u64 [sp + 0x48]\n 11497: a2 = a3 <u a2\n 11500: a3 = u64 [sp + 0x40]\n 11503: a2 = 0 if a3 != 0\n 11505: a3 = u64 [sp + 0x38]\n 11508: a2 = 0 if a3 != 0\n 11510: u8 [a0 + 0] = 0x53\n 11513: jump @213 if a2 == 0\n      : @211 (gas: 3)\n 11517: i32 a0 = s0 + 0x40\n 11520: a1 = 0x20\n 11523: ra = 168, jump @0\n      : @212 [@dyn 84] (gas: 54)\n 11529: u8 [a0 + 31] = 0\n 11532: u8 [a0 + 30] = 0\n 11535: u8 [a0 + 29] = 0\n 11538: u8 [a0 + 28] = 0\n 11541: u8 [a0 + 27] = 0\n 11544: u8 [a0 + 26] = 0\n 11547: u8 [a0 + 25] = 0\n 11550: u8 [a0 + 24] = 0\n 11553: u8 [a0 + 23] = 0\n 11556: u8 [a0 + 22] = 0\n 11559: u8 [a0 + 21] = 0\n 11562: u8 [a0 + 20] = 0\n 11565: u8 [a0 + 19] = 0\n 11568: u8 [a0 + 18] = 0\n 11571: u8 [a0 + 17] = 0\n 11574: u8 [a0 + 16] = 0\n 11577: u8 [a0 + 15] = 0\n 11580: u8 [a0 + 14] = 0\n 11583: u8 [a0 + 13] = 0\n 11586: u8 [a0 + 12] = 0\n 11589: u8 [a0 + 11] = 0\n 11592: u8 [a0 + 10] = 0\n 11595: u8 [a0 + 9] = 0\n 11598: u8 [a0 + 8] = 0\n 11601: u8 [a0 + 7] = 0\n 11604: u8 [a0 + 6] = 0\n 11607: u8 [a0 + 5] = 0\n 11610: u8 [a0 + 4] = 0\n 11613: u8 [a0 + 3] = 0\n 11616: u8 [a0 + 2] = 0\n 11619: u8 [a0 + 1] = 0\n 11622: u8 [a0 + 0] = 0x73\n 11625: a1 = u64 [sp + 0x10]\n 11628: a0 = a1 + 0x80\n 11632: a1 = a0 <u a1\n 11635: a3 = u64 [sp + 0x18]\n 11638: a2 = a3 + a1\n 11641: a3 = a2 <u a3\n 11644: a3 = a1 if a1 == 0\n 11647: a1 = u64 [sp + 0x20]\n 11650: a3 = a3 + a1\n 11653: a1 = a3 <u a1\n 11656: a4 = u64 [sp + 0x28]\n 11659: a1 = a1 + a4\n 11662: a4 = u64 [sp + 0x30]\n 11665: u64 [a4] = a0\n 11667: u64 [a4 + 0x8] = a2\n 11670: u64 [a4 + 0x10] = a3\n 11673: u64 [a4 + 0x18] = a1\n 11676: ra = u64 [sp + 0x60]\n 11679: s0 = u64 [sp + 0x58]\n 11682: s1 = u64 [sp + 0x50]\n 11685: sp = sp + 0x68\n 11688: ret\n      : @213 (gas: 1)\n 11690: trap\n      : @214 (gas: 17)\n 11691: sp = sp + 0xffffffffffffffa0\n 11694: u64 [sp + 0x58] = ra\n 11697: u64 [sp + 0x50] = s0\n 11700: u64 [sp + 0x48] = s1\n 11703: a3 = u64 [a1 + 0x18]\n 11706: a4 = u64 [a1 + 0x10]\n 11709: a5 = u64 [a1 + 0x8]\n 11712: s1 = u64 [a1]\n 11714: a1 = a5 | a3\n 11717: a2 = s1 | a4\n 11720: a2 = a2 | a1\n 11723: a2 = a2 >> 0x20\n 11726: a1 = a1 | a4\n 11729: a1 = a1 << 0x20\n 11732: a1 = a1 | a2\n 11735: u64 [sp + 0x28] = a0\n 11738: jump @221 if a1 != 0\n      : @215 (gas: 19)\n 11742: a0 = s1 + 0x20\n 11745: u64 [sp + 0x30] = a0\n 11748: a0 = a0 <u s1\n 11751: a1 = a5 + a0\n 11754: u64 [sp + 0x40] = a1\n 11757: u64 [sp + 0x8] = a5\n 11760: s0 = a1 <u a5\n 11763: s0 = a0 if a0 == 0\n 11766: s0 = s0 + a4\n 11769: u64 [sp + 0x10] = a4\n 11772: a0 = s0 <u a4\n 11775: u64 [sp + 0x18] = a3\n 11778: a0 = a0 + a3\n 11781: u64 [sp + 0x38] = a0\n 11784: u64 [sp] = s1\n 11786: i32 a0 = s1 + 0\n 11788: a1 = 0x20\n 11791: s1 = 0x20\n 11794: ra = 170, jump @0\n      : @216 [@dyn 85] (gas: 45)\n 11800: u8 [a0 + 0x1f] = s1\n 11803: a1 = u64 [sp + 0x30]\n 11806: s1 = a1\n 11808: a1 = a1 | s0\n 11811: a2 = u64 [sp + 0x40]\n 11814: a4 = u64 [sp + 0x38]\n 11817: a2 = a2 | a4\n 11820: a1 = a1 | a2\n 11823: a1 = a1 >> 0x20\n 11826: u64 [sp + 0x20] = s0\n 11829: a2 = a2 | s0\n 11832: a2 = a2 << 0x20\n 11835: a1 = a1 | a2\n 11838: u8 [a0 + 30] = 0\n 11841: u8 [a0 + 29] = 0\n 11844: u8 [a0 + 28] = 0\n 11847: u8 [a0 + 27] = 0\n 11850: u8 [a0 + 26] = 0\n 11853: u8 [a0 + 25] = 0\n 11856: u8 [a0 + 24] = 0\n 11859: u8 [a0 + 23] = 0\n 11862: u8 [a0 + 22] = 0\n 11865: u8 [a0 + 21] = 0\n 11868: u8 [a0 + 20] = 0\n 11871: u8 [a0 + 19] = 0\n 11874: u8 [a0 + 18] = 0\n 11877: u8 [a0 + 17] = 0\n 11880: u8 [a0 + 16] = 0\n 11883: u8 [a0 + 15] = 0\n 11886: u8 [a0 + 14] = 0\n 11889: u8 [a0 + 13] = 0\n 11892: u8 [a0 + 12] = 0\n 11895: u8 [a0 + 11] = 0\n 11898: u8 [a0 + 10] = 0\n 11901: u8 [a0 + 9] = 0\n 11904: u8 [a0 + 8] = 0\n 11907: u8 [a0 + 7] = 0\n 11910: u8 [a0 + 6] = 0\n 11913: u8 [a0 + 5] = 0\n 11916: u8 [a0 + 4] = 0\n 11919: u8 [a0 + 3] = 0\n 11922: u8 [a0 + 2] = 0\n 11925: u8 [a0 + 1] = 0\n 11928: u8 [a0 + 0] = 0\n 11930: jump @221 if a1 != 0\n      : @217 (gas: 4)\n 11934: i32 s0 = s1 + 0\n 11936: a1 = 0x20\n 11939: a0 = s0\n 11941: ra = 172, jump @0\n      : @218 [@dyn 86] (gas: 41)\n 11947: u8 [a0 + 31] = 0x1d\n 11951: u8 [a0 + 30] = 0\n 11954: u8 [a0 + 29] = 0\n 11957: u8 [a0 + 28] = 0\n 11960: u8 [a0 + 27] = 0\n 11963: u8 [a0 + 26] = 0\n 11966: u8 [a0 + 25] = 0\n 11969: u8 [a0 + 24] = 0\n 11972: u8 [a0 + 23] = 0\n 11975: u8 [a0 + 22] = 0\n 11978: u8 [a0 + 21] = 0\n 11981: u8 [a0 + 20] = 0\n 11984: u8 [a0 + 19] = 0\n 11987: u8 [a0 + 18] = 0\n 11990: u8 [a0 + 17] = 0\n 11993: u8 [a0 + 16] = 0\n 11996: u8 [a0 + 15] = 0\n 11999: u8 [a0 + 14] = 0\n 12002: u8 [a0 + 13] = 0\n 12005: u8 [a0 + 12] = 0\n 12008: u8 [a0 + 11] = 0\n 12011: u8 [a0 + 10] = 0\n 12014: u8 [a0 + 9] = 0\n 12017: u8 [a0 + 8] = 0\n 12020: u8 [a0 + 7] = 0\n 12023: u8 [a0 + 6] = 0\n 12026: u8 [a0 + 5] = 0\n 12029: u8 [a0 + 4] = 0\n 12032: u8 [a0 + 3] = 0\n 12035: u8 [a0 + 2] = 0\n 12038: u8 [a0 + 1] = 0\n 12041: a1 = u64 [sp + 0x20]\n 12044: a2 = u64 [sp + 0x38]\n 12047: a1 = a1 | a2\n 12050: a2 = 0xffffffe0\n 12060: a2 = s1 <u a2\n 12063: a3 = u64 [sp + 0x40]\n 12066: a2 = 0 if a3 != 0\n 12068: a2 = 0 if a1 != 0\n 12070: u8 [a0 + 0] = 0\n 12072: jump @221 if a2 == 0\n      : @219 (gas: 3)\n 12076: i32 a0 = s0 + 0x20\n 12079: a1 = 0x20\n 12082: ra = 174, jump @0\n      : @220 [@dyn 87] (gas: 54)\n 12088: u8 [a0 + 26] = 0x75\n 12092: u8 [a0 + 25] = 0x64\n 12096: u8 [a0 + 20] = 0x73\n 12100: u8 [a0 + 27] = 0x6c\n 12104: u8 [a0 + 18] = 0x6c\n 12108: u8 [a0 + 15] = 0x76\n 12112: u8 [a0 + 23] = 0x6d\n 12116: u8 [a0 + 13] = 0x6d\n 12120: u8 [a0 + 28] = 0x65\n 12124: u8 [a0 + 16] = 0x65\n 12128: u8 [a0 + 12] = 0x65\n 12132: u8 [a0 + 11] = 0x72\n 12136: u8 [a0 + 21] = 0x74\n 12140: u8 [a0 + 9] = 0x74\n 12144: u8 [a0 + 24] = 0x6f\n 12148: u8 [a0 + 14] = 0x6f\n 12152: u8 [a0 + 8] = 0x6f\n 12156: u8 [a0 + 7] = 0x6e\n 12160: u8 [a0 + 6] = 0x6e\n 12164: u8 [a0 + 19] = 0x61\n 12168: u8 [a0 + 5] = 0x61\n 12172: u8 [a0 + 4] = 0x63\n 12176: u8 [a0 + 31] = 0\n 12179: u8 [a0 + 30] = 0\n 12182: u8 [a0 + 29] = 0\n 12185: u8 [a0 + 22] = 0x20\n 12189: u8 [a0 + 17] = 0x20\n 12193: u8 [a0 + 10] = 0x20\n 12197: u8 [a0 + 3] = 0x20\n 12201: u8 [a0 + 2] = 0x3a\n 12205: u8 [a0 + 1] = 0x57\n 12209: u8 [a0 + 0] = 0x53\n 12212: a1 = u64 [sp]\n 12214: a0 = a1 + 0x60\n 12217: a1 = a0 <u a1\n 12220: a3 = u64 [sp + 0x8]\n 12223: a2 = a3 + a1\n 12226: a3 = a2 <u a3\n 12229: a3 = a1 if a1 == 0\n 12232: a1 = u64 [sp + 0x10]\n 12235: a3 = a3 + a1\n 12238: a1 = a3 <u a1\n 12241: a4 = u64 [sp + 0x18]\n 12244: a1 = a1 + a4\n 12247: a4 = u64 [sp + 0x28]\n 12250: u64 [a4] = a0\n 12252: u64 [a4 + 0x8] = a2\n 12255: u64 [a4 + 0x10] = a3\n 12258: u64 [a4 + 0x18] = a1\n 12261: ra = u64 [sp + 0x58]\n 12264: s0 = u64 [sp + 0x50]\n 12267: s1 = u64 [sp + 0x48]\n 12270: sp = sp + 0x60\n 12273: ret\n      : @221 (gas: 1)\n 12275: trap\n      : @222 [@dyn 88] (gas: 6)\n 12276: i32 a1 = a0 + 0\n 12278: a0 = 0x1\n 12281: a2 = 0\n 12283: ra = 0xb2\n 12287: ecalli 13 // 'seal_return'\n 12289: fallthrough\n      : @223 [@dyn 89] (gas: 18)\n 12290: a2 = u64 [a1]\n 12292: t0 = u64 [a1 + 0x18]\n 12295: a4 = u64 [a1 + 0x8]\n 12298: a1 = u64 [a1 + 0x10]\n 12301: a5 = a2 + 0x1f\n 12304: a2 = a5 <u a2\n 12307: a3 = a4 + a2\n 12310: a4 = a3 <u a4\n 12313: a4 = a2 if a2 == 0\n 12316: a4 = a4 + a1\n 12319: a1 = a4 <u a1\n 12322: a1 = a1 + t0\n 12325: a5 = a5 & 0xffffffffffffffe0\n 12328: u64 [a0] = a5\n 12330: u64 [a0 + 0x8] = a3\n 12333: u64 [a0 + 0x10] = a4\n 12336: u64 [a0 + 0x18] = a1\n 12339: ret\n      : @224 (gas: 9)\n 12341: sp = sp + 0xffffffffffffffc0\n 12344: u64 [sp + 0x38] = ra\n 12347: u64 [sp + 0x30] = s0\n 12350: u64 [sp + 0x28] = s1\n 12353: s0 = sp + 0x40\n 12356: sp = sp & 0xffffffffffffffe0\n 12359: a0 = 0x40\n 12362: a1 = 0x20\n 12365: ra = 180, jump @0\n      : @225 [@dyn 90] (gas: 97)\n 12371: a1 = u8 [a0 + 0x11]\n 12374: a2 = u8 [a0 + 0x10]\n 12377: a3 = u8 [a0 + 0x12]\n 12380: a4 = u8 [a0 + 0x13]\n 12383: a1 = a1 << 0x8\n 12386: a1 = a1 | a2\n 12389: a3 = a3 << 0x10\n 12392: a4 = a4 << 0x18\n 12395: a3 = a3 | a4\n 12398: a1 = a1 | a3\n 12401: a2 = u8 [a0 + 0x15]\n 12404: a3 = u8 [a0 + 0x14]\n 12407: a4 = u8 [a0 + 0x16]\n 12410: a5 = u8 [a0 + 0x17]\n 12413: a2 = a2 << 0x8\n 12416: a2 = a2 | a3\n 12419: a4 = a4 << 0x10\n 12422: a5 = a5 << 0x18\n 12425: a4 = a4 | a5\n 12428: a2 = a2 | a4\n 12431: a2 = a2 << 0x20\n 12434: t0 = a2 | a1\n 12437: a2 = u8 [a0 + 0x1]\n 12440: a3 = u8 [a0]\n 12442: a4 = u8 [a0 + 0x2]\n 12445: a5 = u8 [a0 + 0x3]\n 12448: a2 = a2 << 0x8\n 12451: a2 = a2 | a3\n 12454: a4 = a4 << 0x10\n 12457: a5 = a5 << 0x18\n 12460: a4 = a4 | a5\n 12463: a2 = a2 | a4\n 12466: a3 = u8 [a0 + 0x5]\n 12469: a4 = u8 [a0 + 0x4]\n 12472: a5 = u8 [a0 + 0x6]\n 12475: s1 = u8 [a0 + 0x7]\n 12478: a3 = a3 << 0x8\n 12481: a3 = a3 | a4\n 12484: a5 = a5 << 0x10\n 12487: s1 = s1 << 0x18\n 12490: a5 = a5 | s1\n 12493: a3 = a3 | a5\n 12496: a3 = a3 << 0x20\n 12499: a2 = a2 | a3\n 12502: a3 = u8 [a0 + 0x19]\n 12505: a4 = u8 [a0 + 0x18]\n 12508: a5 = u8 [a0 + 0x1a]\n 12511: s1 = u8 [a0 + 0x1b]\n 12514: a3 = a3 << 0x8\n 12517: a3 = a3 | a4\n 12520: a5 = a5 << 0x10\n 12523: s1 = s1 << 0x18\n 12526: a5 = a5 | s1\n 12529: a3 = a3 | a5\n 12532: a4 = u8 [a0 + 0x1d]\n 12535: a5 = u8 [a0 + 0x1c]\n 12538: s1 = u8 [a0 + 0x1e]\n 12541: a1 = u8 [a0 + 0x1f]\n 12544: a4 = a4 << 0x8\n 12547: a4 = a4 | a5\n 12550: s1 = s1 << 0x10\n 12553: a1 = a1 << 0x18\n 12556: a1 = a1 | s1\n 12559: a1 = a1 | a4\n 12562: a1 = a1 << 0x20\n 12565: a3 = a3 | a1\n 12568: a1 = u8 [a0 + 0x9]\n 12571: a4 = u8 [a0 + 0x8]\n 12574: a5 = u8 [a0 + 0xa]\n 12577: s1 = u8 [a0 + 0xb]\n 12580: a1 = a1 << 0x8\n 12583: a1 = a1 | a4\n 12586: a5 = a5 << 0x10\n 12589: s1 = s1 << 0x18\n 12592: a5 = a5 | s1\n 12595: a1 = a1 | a5\n 12598: a4 = u8 [a0 + 0xd]\n 12601: a5 = u8 [a0 + 0xc]\n 12604: s1 = u8 [a0 + 0xe]\n 12607: a0 = u8 [a0 + 0xf]\n 12610: a4 = a4 << 0x8\n 12613: a4 = a4 | a5\n 12616: s1 = s1 << 0x10\n 12619: a0 = a0 << 0x18\n 12622: a0 = a0 | s1\n 12625: a0 = a0 | a4\n 12628: a0 = a0 << 0x20\n 12631: a0 = a0 | a1\n 12634: s1 = reverse a0\n 12636: a0 = reverse a3\n 12638: u64 [sp + 0x8] = a0\n 12641: a0 = reverse a2\n 12643: u64 [sp + 0x18] = a0\n 12646: a0 = reverse t0\n 12648: u64 [sp + 0x10] = a0\n 12651: ecalli 12 // 'return_data_size'\n 12653: fallthrough\n      : @226 (gas: 11)\n 12654: a3 = u64 [sp + 0x8]\n 12657: a1 = u64 [sp + 0x18]\n 12660: a2 = u64 [sp + 0x10]\n 12663: a1 = a1 | a2\n 12666: a2 = a3 | s1\n 12669: a2 = a2 | a1\n 12672: a2 = a2 >> 0x20\n 12675: a1 = a1 | s1\n 12678: a1 = a1 << 0x20\n 12681: a1 = a1 | a2\n 12684: jump @233 if a1 != 0\n      : @227 (gas: 3)\n 12687: s1 = a0\n 12689: a0 = a0 >> 0x20\n 12692: jump @233 if a0 != 0\n      : @228 (gas: 5)\n 12695: i32 a0 = a3 + 0\n 12697: i32 a1 = s1 + 0\n 12699: u64 [sp + 0x18] = a1\n 12702: u64 [sp + 0x10] = a0\n 12705: ra = 182, jump @0\n      : @229 [@dyn 91] (gas: 6)\n 12711: u32 [sp + 0x20] = s1\n 12714: i32 a0 = a0 + 0\n 12716: i32 a1 = sp + 0x20\n 12719: a2 = 0\n 12721: ecalli 11 // 'return_data_copy'\n 12723: fallthrough\n      : @230 (gas: 3)\n 12724: a0 = i32 [sp + 0x20]\n 12727: a1 = u64 [sp + 0x18]\n 12730: jump @233 if a0 <u a1\n      : @231 (gas: 2)\n 12733: ecalli 12 // 'return_data_size'\n 12735: fallthrough\n      : @232 (gas: 2)\n 12736: a1 = a0 >> 0x20\n 12739: jump @234 if a1 == 0\n      : @233 (gas: 1)\n 12742: trap\n      : @234 (gas: 4)\n 12743: i32 s1 = a0 + 0\n 12745: a0 = u64 [sp + 0x10]\n 12748: a1 = s1\n 12750: ra = 184, jump @0\n      : @235 [@dyn 92] (gas: 6)\n 12756: i32 a1 = a0 + 0\n 12758: a0 = 0x1\n 12761: a2 = s1\n 12763: ra = 0xba\n 12767: ecalli 13 // 'seal_return'\n 12769: fallthrough\n      : @236 [@dyn 93] (gas: 17)\n 12770: sp = sp + 0xfffffffffffffce0\n 12774: u64 [sp + 0x318] = ra\n 12778: u64 [sp + 0x310] = s0\n 12782: u64 [sp + 0x308] = s1\n 12786: s0 = sp + 0x320\n 12790: sp = sp & 0xffffffffffffffe0\n 12793: s1 = u64 [a0 + 0x10]\n 12796: a2 = u64 [a0 + 0x8]\n 12799: a0 = u64 [a0]\n 12801: u64 [sp + 0x18] = s1\n 12804: s1 = s1 << 0x20\n 12807: s1 = s1 >> 0x20\n 12810: u64 [sp + 0xd8] = a0\n 12814: u64 [sp + 0xd0] = a2\n 12818: a0 = a0 | a2\n 12821: a0 = a0 | s1\n 12824: jump @238 if a0 != 0\n      : @237 (gas: 1)\n 12827: jump @279\n      : @238 (gas: 11)\n 12830: a0 = u64 [a1 + 0x18]\n 12833: u64 [sp + 0xc0] = a0\n 12837: a0 = u64 [a1 + 0x10]\n 12840: u64 [sp + 0xb0] = a0\n 12844: a0 = u64 [a1 + 0x8]\n 12847: u64 [sp + 0xb8] = a0\n 12851: a0 = u64 [a1]\n 12853: u64 [sp + 0xa8] = a0\n 12857: a1 = 0x20\n 12860: a0 = 0\n 12862: ra = 188, jump @0\n      : @239 [@dyn 94] (gas: 78)\n 12868: a3 = reverse s1\n 12870: a1 = u64 [sp + 0xd0]\n 12874: a2 = reverse a1\n 12876: a1 = u64 [sp + 0xd8]\n 12880: s1 = reverse a1\n 12882: a1 = s1 >> 0x38\n 12885: u64 [sp + 0x98] = a1\n 12889: u8 [a0 + 0x1f] = a1\n 12892: a1 = s1 >> 0x30\n 12895: u64 [sp + 0x90] = a1\n 12899: u8 [a0 + 0x1e] = a1\n 12902: a1 = s1 >> 0x28\n 12905: u64 [sp + 0x88] = a1\n 12909: u8 [a0 + 0x1d] = a1\n 12912: a1 = s1 >> 0x20\n 12915: u64 [sp + 0xd8] = a1\n 12919: u8 [a0 + 0x1c] = a1\n 12922: a1 = s1 >> 0x18\n 12925: u64 [sp + 0x80] = a1\n 12929: u8 [a0 + 0x1b] = a1\n 12932: a1 = s1 >> 0x10\n 12935: u64 [sp + 0x78] = a1\n 12938: u8 [a0 + 0x1a] = a1\n 12941: a1 = s1 >> 0x8\n 12944: u64 [sp + 0x70] = a1\n 12947: u8 [a0 + 0x19] = a1\n 12950: u8 [a0 + 0x18] = s1\n 12953: u8 [a0 + 0x10] = a2\n 12956: u8 [a0 + 11] = 0\n 12959: u8 [a0 + 10] = 0\n 12962: u8 [a0 + 9] = 0\n 12965: u8 [a0 + 7] = 0\n 12968: u8 [a0 + 6] = 0\n 12971: u8 [a0 + 5] = 0\n 12974: u8 [a0 + 4] = 0\n 12977: u8 [a0 + 3] = 0\n 12980: u8 [a0 + 2] = 0\n 12983: u8 [a0 + 1] = 0\n 12986: u8 [a0 + 0] = 0\n 12988: a1 = a2 >> 0x38\n 12991: u64 [sp + 0x68] = a1\n 12994: u8 [a0 + 0x17] = a1\n 12997: a1 = a2 >> 0x30\n 13000: u64 [sp + 0x60] = a1\n 13003: u8 [a0 + 0x16] = a1\n 13006: a1 = a2 >> 0x28\n 13009: u64 [sp + 0x58] = a1\n 13012: u8 [a0 + 0x15] = a1\n 13015: a1 = a2 >> 0x20\n 13018: u64 [sp + 0xc8] = a1\n 13022: u8 [a0 + 0x14] = a1\n 13025: a1 = a2 >> 0x18\n 13028: u64 [sp + 0x50] = a1\n 13031: u8 [a0 + 0x13] = a1\n 13034: a1 = a2 >> 0x10\n 13037: u64 [sp + 0x48] = a1\n 13040: u8 [a0 + 0x12] = a1\n 13043: u64 [sp + 0xd0] = a2\n 13047: a2 = a2 >> 0x8\n 13050: u64 [sp + 0x40] = a2\n 13053: u8 [a0 + 0x11] = a2\n 13056: u8 [a0 + 0x8] = a3\n 13059: a1 = a3 >> 0x38\n 13062: u64 [sp + 0x38] = a1\n 13065: u8 [a0 + 0xf] = a1\n 13068: a1 = a3 >> 0x30\n 13071: u64 [sp + 0x30] = a1\n 13074: u8 [a0 + 0xe] = a1\n 13077: a1 = a3 >> 0x28\n 13080: u64 [sp + 0x28] = a1\n 13083: u8 [a0 + 0xd] = a1\n 13086: u64 [sp + 0xa0] = a3\n 13090: a3 = a3 >> 0x20\n 13093: u64 [sp + 0x20] = a3\n 13096: u8 [a0 + 0xc] = a3\n 13099: a0 = 0x20\n 13102: a1 = 0x20\n 13105: ra = 190, jump @0\n      : @240 [@dyn 95] (gas: 35)\n 13111: u8 [a0 + 31] = 0x1\n 13115: u8 [a0 + 30] = 0\n 13118: u8 [a0 + 29] = 0\n 13121: u8 [a0 + 28] = 0\n 13124: u8 [a0 + 27] = 0\n 13127: u8 [a0 + 26] = 0\n 13130: u8 [a0 + 25] = 0\n 13133: u8 [a0 + 24] = 0\n 13136: u8 [a0 + 23] = 0\n 13139: u8 [a0 + 22] = 0\n 13142: u8 [a0 + 21] = 0\n 13145: u8 [a0 + 20] = 0\n 13148: u8 [a0 + 19] = 0\n 13151: u8 [a0 + 18] = 0\n 13154: u8 [a0 + 17] = 0\n 13157: u8 [a0 + 16] = 0\n 13160: u8 [a0 + 15] = 0\n 13163: u8 [a0 + 14] = 0\n 13166: u8 [a0 + 13] = 0\n 13169: u8 [a0 + 12] = 0\n 13172: u8 [a0 + 11] = 0\n 13175: u8 [a0 + 10] = 0\n 13178: u8 [a0 + 9] = 0\n 13181: u8 [a0 + 8] = 0\n 13184: u8 [a0 + 7] = 0\n 13187: u8 [a0 + 6] = 0\n 13190: u8 [a0 + 5] = 0\n 13193: u8 [a0 + 4] = 0\n 13196: u8 [a0 + 3] = 0\n 13199: u8 [a0 + 2] = 0\n 13202: u8 [a0 + 1] = 0\n 13205: u8 [a0 + 0] = 0\n 13207: a1 = 0x40\n 13210: a0 = 0\n 13212: ra = 192, jump @0\n      : @241 [@dyn 96] (gas: 28)\n 13218: i32 a0 = a0 + 0\n 13220: i32 a2 = sp + 0x2e0\n 13224: a1 = 0x40\n 13227: ecalli 9 // 'hash_keccak_256'\n 13229: a0 = u64 [sp + 0x2f8]\n 13233: a1 = u64 [sp + 0x2f0]\n 13237: a2 = u64 [sp + 0x2e8]\n 13241: a3 = u64 [sp + 0x2e0]\n 13245: a0 = reverse a0\n 13247: a1 = reverse a1\n 13249: a2 = reverse a2\n 13251: a3 = reverse a3\n 13253: u64 [sp + 0x2d8] = a3\n 13257: u64 [sp + 0x2d0] = a2\n 13261: u64 [sp + 0x2c8] = a1\n 13265: u64 [sp + 0x2c0] = a0\n 13269: u64 [sp + 760] = 0\n 13273: u64 [sp + 752] = 0\n 13277: u64 [sp + 744] = 0\n 13281: u64 [sp + 736] = 0\n 13285: u32 [sp + 672] = 0x20\n 13290: i32 a1 = sp + 0x2c0\n 13294: i32 a3 = sp + 0x2e0\n 13298: i32 a4 = sp + 0x2a0\n 13302: a2 = 0xffffffffffffffff\n 13305: a0 = 0\n 13307: ecalli 8 // 'get_storage'\n 13309: fallthrough\n      : @242 (gas: 11)\n 13310: a0 = u8 [sp + 0x2e0]\n 13314: a0 = a0 >u 0\n 13316: a1 = u64 [sp + 0xb0]\n 13320: a2 = u64 [sp + 0xa8]\n 13324: a1 = a1 | a2\n 13327: a2 = u64 [sp + 0xc0]\n 13331: a3 = u64 [sp + 0xb8]\n 13335: a2 = a2 | a3\n 13338: a2 = a2 | a1\n 13341: a1 = a2 <u 0x1\n 13344: jump @278 if a1 != a0\n      : @243 (gas: 5)\n 13348: u64 [sp + 0xb8] = a2\n 13352: u64 [sp + 0xc0] = s1\n 13356: a0 = 0x40\n 13359: a1 = 0x20\n 13362: ra = 194, jump @0\n      : @244 [@dyn 97] (gas: 102)\n 13368: a1 = u8 [a0 + 0x11]\n 13371: a2 = u8 [a0 + 0x10]\n 13374: a3 = u8 [a0 + 0x12]\n 13377: a4 = u8 [a0 + 0x13]\n 13380: a1 = a1 << 0x8\n 13383: a1 = a1 | a2\n 13386: a3 = a3 << 0x10\n 13389: a4 = a4 << 0x18\n 13392: a3 = a3 | a4\n 13395: a1 = a1 | a3\n 13398: a2 = u8 [a0 + 0x15]\n 13401: a3 = u8 [a0 + 0x14]\n 13404: a4 = u8 [a0 + 0x16]\n 13407: a5 = u8 [a0 + 0x17]\n 13410: a2 = a2 << 0x8\n 13413: a2 = a2 | a3\n 13416: a4 = a4 << 0x10\n 13419: a5 = a5 << 0x18\n 13422: a4 = a4 | a5\n 13425: a2 = a2 | a4\n 13428: a2 = a2 << 0x20\n 13431: t0 = a2 | a1\n 13434: a2 = u8 [a0 + 0x1]\n 13437: a3 = u8 [a0]\n 13439: a4 = u8 [a0 + 0x2]\n 13442: a5 = u8 [a0 + 0x3]\n 13445: a2 = a2 << 0x8\n 13448: a2 = a2 | a3\n 13451: a4 = a4 << 0x10\n 13454: a5 = a5 << 0x18\n 13457: a4 = a4 | a5\n 13460: a2 = a2 | a4\n 13463: a3 = u8 [a0 + 0x5]\n 13466: a4 = u8 [a0 + 0x4]\n 13469: a5 = u8 [a0 + 0x6]\n 13472: s1 = u8 [a0 + 0x7]\n 13475: a3 = a3 << 0x8\n 13478: a3 = a3 | a4\n 13481: a5 = a5 << 0x10\n 13484: s1 = s1 << 0x18\n 13487: a5 = a5 | s1\n 13490: a3 = a3 | a5\n 13493: a3 = a3 << 0x20\n 13496: a2 = a2 | a3\n 13499: a3 = u8 [a0 + 0x19]\n 13502: a4 = u8 [a0 + 0x18]\n 13505: a5 = u8 [a0 + 0x1a]\n 13508: s1 = u8 [a0 + 0x1b]\n 13511: a3 = a3 << 0x8\n 13514: a3 = a3 | a4\n 13517: a5 = a5 << 0x10\n 13520: s1 = s1 << 0x18\n 13523: a5 = a5 | s1\n 13526: a3 = a3 | a5\n 13529: a4 = u8 [a0 + 0x1d]\n 13532: a5 = u8 [a0 + 0x1c]\n 13535: s1 = u8 [a0 + 0x1e]\n 13538: a1 = u8 [a0 + 0x1f]\n 13541: a4 = a4 << 0x8\n 13544: a4 = a4 | a5\n 13547: s1 = s1 << 0x10\n 13550: a1 = a1 << 0x18\n 13553: a1 = a1 | s1\n 13556: a1 = a1 | a4\n 13559: a1 = a1 << 0x20\n 13562: a3 = a3 | a1\n 13565: a1 = u8 [a0 + 0x9]\n 13568: a4 = u8 [a0 + 0x8]\n 13571: a5 = u8 [a0 + 0xa]\n 13574: s1 = u8 [a0 + 0xb]\n 13577: a1 = a1 << 0x8\n 13580: a1 = a1 | a4\n 13583: a5 = a5 << 0x10\n 13586: s1 = s1 << 0x18\n 13589: a5 = a5 | s1\n 13592: a1 = a1 | a5\n 13595: a4 = u8 [a0 + 0xd]\n 13598: a5 = u8 [a0 + 0xc]\n 13601: s1 = u8 [a0 + 0xe]\n 13604: a0 = u8 [a0 + 0xf]\n 13607: a4 = a4 << 0x8\n 13610: a4 = a4 | a5\n 13613: s1 = s1 << 0x10\n 13616: a0 = a0 << 0x18\n 13619: a0 = a0 | s1\n 13622: a0 = a0 | a4\n 13625: a0 = a0 << 0x20\n 13628: a0 = a0 | a1\n 13631: s1 = reverse a0\n 13633: a3 = reverse a3\n 13635: a1 = reverse a2\n 13637: a0 = reverse t0\n 13639: u64 [sp + 0xb0] = a0\n 13643: u64 [sp + 0xa8] = a1\n 13647: a0 = a0 | a1\n 13650: a1 = a3 | s1\n 13653: a1 = a1 | a0\n 13656: a1 = a1 >> 0x20\n 13659: a0 = a0 | s1\n 13662: a0 = a0 << 0x20\n 13665: a0 = a0 | a1\n 13668: jump @246 if a0 == 0\n      : @245 (gas: 1)\n 13671: jump @285\n      : @246 (gas: 5)\n 13674: i32 a0 = a3 + 0\n 13676: a1 = 0x20\n 13679: u64 [sp + 0x8] = a0\n 13682: u64 [sp + 0x10] = a3\n 13685: ra = 196, jump @0\n      : @247 [@dyn 98] (gas: 68)\n 13691: a1 = u64 [sp + 0xd0]\n 13695: u8 [a0 + 0x10] = a1\n 13698: a1 = u64 [sp + 0x38]\n 13701: u8 [a0 + 0xf] = a1\n 13704: a1 = u64 [sp + 0x30]\n 13707: u8 [a0 + 0xe] = a1\n 13710: a1 = u64 [sp + 0x28]\n 13713: u8 [a0 + 0xd] = a1\n 13716: a1 = u64 [sp + 0x20]\n 13719: u8 [a0 + 0xc] = a1\n 13722: a2 = u64 [sp + 0xa8]\n 13726: a2 = a2 | s1\n 13729: a1 = 0xffffffe0\n 13739: a3 = u64 [sp + 0x10]\n 13742: a1 = a3 <u a1\n 13745: a3 = u64 [sp + 0xa0]\n 13749: a4 = a3 >> 0x18\n 13752: u64 [sp + 0xa8] = a4\n 13756: u8 [a0 + 0xb] = a4\n 13759: a4 = u64 [sp + 0xb0]\n 13763: a1 = 0 if a4 != 0\n 13765: a4 = a3 >> 0x10\n 13768: u64 [sp + 0xb0] = a4\n 13772: u8 [a0 + 0xa] = a4\n 13775: a1 = 0 if a2 != 0\n 13777: a2 = a3 >> 0x8\n 13780: u64 [sp + 0x10] = a2\n 13783: u8 [a0 + 0x9] = a2\n 13786: u8 [a0 + 0x8] = a3\n 13789: u8 [a0 + 7] = 0\n 13792: u8 [a0 + 6] = 0\n 13795: u8 [a0 + 5] = 0\n 13798: u8 [a0 + 4] = 0\n 13801: u8 [a0 + 3] = 0\n 13804: u8 [a0 + 2] = 0\n 13807: u8 [a0 + 1] = 0\n 13810: u8 [a0 + 0] = 0\n 13812: a2 = u64 [sp + 0xc0]\n 13816: u8 [a0 + 0x18] = a2\n 13819: a2 = u64 [sp + 0x68]\n 13822: u8 [a0 + 0x17] = a2\n 13825: a2 = u64 [sp + 0x60]\n 13828: u8 [a0 + 0x16] = a2\n 13831: a2 = u64 [sp + 0x58]\n 13834: u8 [a0 + 0x15] = a2\n 13837: a2 = u64 [sp + 0xc8]\n 13841: u8 [a0 + 0x14] = a2\n 13844: a2 = u64 [sp + 0x50]\n 13847: u8 [a0 + 0x13] = a2\n 13850: a2 = u64 [sp + 0x48]\n 13853: u8 [a0 + 0x12] = a2\n 13856: a2 = u64 [sp + 0x40]\n 13859: u8 [a0 + 0x11] = a2\n 13862: a2 = u64 [sp + 0x98]\n 13866: u8 [a0 + 0x1f] = a2\n 13869: a2 = u64 [sp + 0x90]\n 13873: u8 [a0 + 0x1e] = a2\n 13876: a2 = u64 [sp + 0x88]\n 13880: u8 [a0 + 0x1d] = a2\n 13883: a2 = u64 [sp + 0xd8]\n 13887: u8 [a0 + 0x1c] = a2\n 13890: a2 = u64 [sp + 0x80]\n 13894: u8 [a0 + 0x1b] = a2\n 13897: a2 = u64 [sp + 0x78]\n 13900: u8 [a0 + 0x1a] = a2\n 13903: a2 = u64 [sp + 0x70]\n 13906: u8 [a0 + 0x19] = a2\n 13909: jump @285 if a1 == 0\n      : @248 (gas: 7)\n 13913: a0 = u64 [sp + 0xb8]\n 13917: a0 = a0 >u 0\n 13919: u64 [sp] = a0\n 13921: s1 = u64 [sp + 0x8]\n 13924: i32 a0 = s1 + 0x20\n 13927: a1 = 0x20\n 13930: ra = 198, jump @0\n      : @249 [@dyn 99] (gas: 36)\n 13936: u8 [a0 + 30] = 0\n 13939: u8 [a0 + 29] = 0\n 13942: u8 [a0 + 28] = 0\n 13945: u8 [a0 + 27] = 0\n 13948: u8 [a0 + 26] = 0\n 13951: u8 [a0 + 25] = 0\n 13954: u8 [a0 + 24] = 0\n 13957: u8 [a0 + 23] = 0\n 13960: u8 [a0 + 22] = 0\n 13963: u8 [a0 + 21] = 0\n 13966: u8 [a0 + 20] = 0\n 13969: u8 [a0 + 19] = 0\n 13972: u8 [a0 + 18] = 0\n 13975: u8 [a0 + 17] = 0\n 13978: u8 [a0 + 16] = 0\n 13981: u8 [a0 + 15] = 0\n 13984: u8 [a0 + 14] = 0\n 13987: u8 [a0 + 13] = 0\n 13990: u8 [a0 + 12] = 0\n 13993: u8 [a0 + 11] = 0\n 13996: u8 [a0 + 10] = 0\n 13999: u8 [a0 + 9] = 0\n 14002: u8 [a0 + 8] = 0\n 14005: u8 [a0 + 7] = 0\n 14008: u8 [a0 + 6] = 0\n 14011: u8 [a0 + 5] = 0\n 14014: u8 [a0 + 4] = 0\n 14017: u8 [a0 + 3] = 0\n 14020: u8 [a0 + 2] = 0\n 14023: u8 [a0 + 1] = 0\n 14026: u8 [a0 + 0] = 0\n 14028: a1 = u64 [sp]\n 14030: u8 [a0 + 0x1f] = a1\n 14033: a1 = 0x40\n 14036: a0 = s1\n 14038: ra = 200, jump @0\n      : @250 [@dyn 100] (gas: 14)\n 14044: a1 = u64 [0x20000]\n 14049: a2 = u64 [0x20008]\n 14054: a3 = u64 [0x20010]\n 14059: a4 = u64 [0x20018]\n 14064: u64 [sp + 0x2f8] = a1\n 14068: u64 [sp + 0x2f0] = a2\n 14072: u64 [sp + 0x2e8] = a3\n 14076: u64 [sp + 0x2e0] = a4\n 14080: i32 a2 = a0 + 0\n 14082: i32 a0 = sp + 0x2e0\n 14086: a1 = 0x1\n 14089: a3 = 0x40\n 14092: ecalli 7 // 'deposit_event'\n 14094: fallthrough\n      : @251 (gas: 2)\n 14095: a0 = u64 [sp + 0xb8]\n 14099: jump @270 if a0 == 0\n      : @252 (gas: 16)\n 14103: u64 [sp + 728] = 0\n 14107: u64 [sp + 720] = 0\n 14111: u64 [sp + 712] = 0\n 14115: u64 [sp + 704] = 0x2\n 14120: u64 [sp + 760] = 0\n 14124: u64 [sp + 752] = 0\n 14128: u64 [sp + 744] = 0\n 14132: u64 [sp + 736] = 0\n 14136: u32 [sp + 672] = 0x20\n 14141: i32 a1 = sp + 0x2c0\n 14145: i32 a3 = sp + 0x2e0\n 14149: i32 a4 = sp + 0x2a0\n 14153: a2 = 0xffffffffffffffff\n 14156: a0 = 0\n 14158: ecalli 8 // 'get_storage'\n 14160: fallthrough\n      : @253 (gas: 19)\n 14161: s1 = u64 [sp + 0x2e0]\n 14165: a0 = u64 [sp + 0x2f8]\n 14169: a1 = u64 [sp + 0x2e8]\n 14173: a2 = u64 [sp + 0x2f0]\n 14177: s1 = s1 + 0x1\n 14180: a3 = s1 <u 0x1\n 14183: a3 = a3 + a1\n 14186: a1 = s1 | a3\n 14189: a1 = a1 <u 0x1\n 14192: a4 = a2 + a1\n 14195: a1 = a4 <u a2\n 14198: a0 = a0 + a1\n 14201: u64 [sp + 0xb8] = a3\n 14205: u64 [sp] = a0\n 14207: a0 = a0 | a3\n 14210: u64 [sp + 0x8] = a4\n 14213: a1 = s1 | a4\n 14216: a0 = a0 | a1\n 14219: jump @292 if a0 == 0\n      : @254 (gas: 35)\n 14223: u64 [sp + 728] = 0\n 14227: u64 [sp + 720] = 0\n 14231: u64 [sp + 712] = 0\n 14235: u64 [sp + 704] = 0x2\n 14240: u64 [sp + 760] = 0\n 14244: u64 [sp + 752] = 0\n 14248: u64 [sp + 744] = 0\n 14252: u64 [sp + 736] = 0\n 14256: u32 [sp + 672] = 0x20\n 14261: i32 a1 = sp + 0x2c0\n 14265: i32 a3 = sp + 0x2e0\n 14269: i32 a4 = sp + 0x2a0\n 14273: a2 = 0xffffffffffffffff\n 14276: a0 = 0\n 14278: ecalli 8 // 'get_storage'\n 14280: u64 [sp + 728] = 0\n 14284: u64 [sp + 720] = 0\n 14288: u64 [sp + 712] = 0\n 14292: u64 [sp + 704] = 0x2\n 14297: a0 = u64 [sp]\n 14299: u64 [sp + 0x2f8] = a0\n 14303: a0 = u64 [sp + 0x8]\n 14306: u64 [sp + 0x2f0] = a0\n 14310: a0 = u64 [sp + 0xb8]\n 14314: u64 [sp + 0x2e8] = a0\n 14318: u64 [sp + 0x2e0] = s1\n 14322: i32 a1 = sp + 0x2c0\n 14326: i32 a3 = sp + 0x2e0\n 14330: a2 = 0xffffffffffffffff\n 14333: a4 = 0x20\n 14336: a0 = 0\n 14338: ecalli 15 // 'set_storage'\n 14340: a1 = 0x20\n 14343: a0 = 0\n 14345: ra = 202, jump @0\n      : @255 [@dyn 101] (gas: 59)\n 14351: a1 = u64 [sp + 0x98]\n 14355: u8 [a0 + 0x1f] = a1\n 14358: a1 = u64 [sp + 0x90]\n 14362: u8 [a0 + 0x1e] = a1\n 14365: a1 = u64 [sp + 0x88]\n 14369: u8 [a0 + 0x1d] = a1\n 14372: a1 = u64 [sp + 0x80]\n 14376: u8 [a0 + 0x1b] = a1\n 14379: a1 = u64 [sp + 0x78]\n 14382: u8 [a0 + 0x1a] = a1\n 14385: a1 = u64 [sp + 0x70]\n 14388: u8 [a0 + 0x19] = a1\n 14391: a1 = u64 [sp + 0x68]\n 14394: u8 [a0 + 0x17] = a1\n 14397: a1 = u64 [sp + 0x60]\n 14400: u8 [a0 + 0x16] = a1\n 14403: a1 = u64 [sp + 0x58]\n 14406: u8 [a0 + 0x15] = a1\n 14409: a1 = u64 [sp + 0x50]\n 14412: u8 [a0 + 0x13] = a1\n 14415: a1 = u64 [sp + 0x48]\n 14418: u8 [a0 + 0x12] = a1\n 14421: a1 = u64 [sp + 0x40]\n 14424: u8 [a0 + 0x11] = a1\n 14427: a1 = u64 [sp + 0x38]\n 14430: u8 [a0 + 0xf] = a1\n 14433: a1 = u64 [sp + 0x30]\n 14436: u8 [a0 + 0xe] = a1\n 14439: a1 = u64 [sp + 0x28]\n 14442: u8 [a0 + 0xd] = a1\n 14445: a1 = u64 [sp + 0x20]\n 14448: u8 [a0 + 0xc] = a1\n 14451: a1 = u64 [sp + 0xa8]\n 14455: u8 [a0 + 0xb] = a1\n 14458: a1 = u64 [sp + 0xb0]\n 14462: u8 [a0 + 0xa] = a1\n 14465: a1 = u64 [sp + 0x10]\n 14468: u8 [a0 + 0x9] = a1\n 14471: a1 = u64 [sp + 0xa0]\n 14475: u8 [a0 + 0x8] = a1\n 14478: a1 = u64 [sp + 0xd8]\n 14482: u8 [a0 + 0x1c] = a1\n 14485: a1 = u64 [sp + 0xc0]\n 14489: u8 [a0 + 0x18] = a1\n 14492: a1 = u64 [sp + 0xc8]\n 14496: u8 [a0 + 0x14] = a1\n 14499: a1 = u64 [sp + 0xd0]\n 14503: u8 [a0 + 0x10] = a1\n 14506: u8 [a0 + 7] = 0\n 14509: u8 [a0 + 6] = 0\n 14512: u8 [a0 + 5] = 0\n 14515: u8 [a0 + 4] = 0\n 14518: u8 [a0 + 3] = 0\n 14521: u8 [a0 + 2] = 0\n 14524: u8 [a0 + 1] = 0\n 14527: u8 [a0 + 0] = 0\n 14529: a0 = 0x20\n 14532: a1 = 0x20\n 14535: ra = 204, jump @0\n      : @256 [@dyn 102] (gas: 35)\n 14541: u8 [a0 + 31] = 0x1\n 14545: u8 [a0 + 30] = 0\n 14548: u8 [a0 + 29] = 0\n 14551: u8 [a0 + 28] = 0\n 14554: u8 [a0 + 27] = 0\n 14557: u8 [a0 + 26] = 0\n 14560: u8 [a0 + 25] = 0\n 14563: u8 [a0 + 24] = 0\n 14566: u8 [a0 + 23] = 0\n 14569: u8 [a0 + 22] = 0\n 14572: u8 [a0 + 21] = 0\n 14575: u8 [a0 + 20] = 0\n 14578: u8 [a0 + 19] = 0\n 14581: u8 [a0 + 18] = 0\n 14584: u8 [a0 + 17] = 0\n 14587: u8 [a0 + 16] = 0\n 14590: u8 [a0 + 15] = 0\n 14593: u8 [a0 + 14] = 0\n 14596: u8 [a0 + 13] = 0\n 14599: u8 [a0 + 12] = 0\n 14602: u8 [a0 + 11] = 0\n 14605: u8 [a0 + 10] = 0\n 14608: u8 [a0 + 9] = 0\n 14611: u8 [a0 + 8] = 0\n 14614: u8 [a0 + 7] = 0\n 14617: u8 [a0 + 6] = 0\n 14620: u8 [a0 + 5] = 0\n 14623: u8 [a0 + 4] = 0\n 14626: u8 [a0 + 3] = 0\n 14629: u8 [a0 + 2] = 0\n 14632: u8 [a0 + 1] = 0\n 14635: u8 [a0 + 0] = 0\n 14637: a1 = 0x40\n 14640: a0 = 0\n 14642: ra = 206, jump @0\n      : @257 [@dyn 103] (gas: 80)\n 14648: i32 a0 = a0 + 0\n 14650: i32 a2 = sp + 0x2e0\n 14654: a1 = 0x40\n 14657: ecalli 9 // 'hash_keccak_256'\n 14659: a0 = u64 [sp + 0x2f8]\n 14663: a1 = u64 [sp + 0x2f0]\n 14667: a2 = u64 [sp + 0x2e8]\n 14671: a3 = u64 [sp + 0x2e0]\n 14675: a0 = reverse a0\n 14677: u64 [sp + 0xb8] = a0\n 14681: a1 = reverse a1\n 14683: u64 [sp + 0xb0] = a1\n 14687: a2 = reverse a2\n 14689: u64 [sp + 0xa8] = a2\n 14693: s1 = reverse a3\n 14695: u64 [sp + 0x2d8] = s1\n 14699: u64 [sp + 0x2d0] = a2\n 14703: u64 [sp + 0x2c8] = a1\n 14707: u64 [sp + 0x2c0] = a0\n 14711: u64 [sp + 760] = 0\n 14715: u64 [sp + 752] = 0\n 14719: u64 [sp + 744] = 0\n 14723: u64 [sp + 736] = 0\n 14727: u32 [sp + 672] = 0x20\n 14732: i32 a1 = sp + 0x2c0\n 14736: i32 a3 = sp + 0x2e0\n 14740: i32 a4 = sp + 0x2a0\n 14744: a2 = 0xffffffffffffffff\n 14747: a0 = 0\n 14749: ecalli 8 // 'get_storage'\n 14751: a0 = u64 [sp + 0x2e0]\n 14755: a1 = u64 [sp + 0x2e8]\n 14759: a2 = u64 [sp + 0x2f0]\n 14763: a3 = u64 [sp + 0x2f8]\n 14767: a0 = a0 & 0xffffffffffffff00\n 14771: a0 = a0 | 0x1\n 14774: u64 [sp + 0x2d8] = s1\n 14778: a4 = u64 [sp + 0xa8]\n 14782: u64 [sp + 0x2d0] = a4\n 14786: a4 = u64 [sp + 0xb0]\n 14790: u64 [sp + 0x2c8] = a4\n 14794: a4 = u64 [sp + 0xb8]\n 14798: u64 [sp + 0x2c0] = a4\n 14802: u64 [sp + 0x2f8] = a3\n 14806: u64 [sp + 0x2f0] = a2\n 14810: u64 [sp + 0x2e8] = a1\n 14814: u64 [sp + 0x2e0] = a0\n 14818: i32 a1 = sp + 0x2c0\n 14822: i32 a3 = sp + 0x2e0\n 14826: a2 = 0xffffffffffffffff\n 14829: a4 = 0x20\n 14832: a0 = 0\n 14834: ecalli 15 // 'set_storage'\n 14836: i32 a0 = sp + 0x1e0\n 14840: ecalli 0 // 'address'\n 14841: a0 = i32 [sp + 0x1f0]\n 14845: u64 [sp + 0xa8] = a0\n 14849: a0 = u64 [sp + 0x1e0]\n 14853: u64 [sp + 0xa0] = a0\n 14857: a0 = u64 [sp + 0x1e8]\n 14861: u64 [sp + 0x98] = a0\n 14865: a0 = u64 [sp + 0xd0]\n 14869: a0 = a0 << 0x20\n 14872: a1 = u64 [sp + 0x18]\n 14875: a1 = reverse a1\n 14877: a1 = a1 >> 0x20\n 14880: a1 = a1 | a0\n 14883: a0 = u64 [sp + 0xc0]\n 14887: a0 = a0 << 0x20\n 14890: a2 = u64 [sp + 0xc8]\n 14894: a0 = a0 | a2\n 14897: u64 [sp + 0xb0] = a0\n 14901: u64 [sp + 0x208] = a0\n 14905: u64 [sp + 0xb8] = a1\n 14909: u64 [sp + 0x200] = a1\n 14913: a0 = u64 [sp + 0xd8]\n 14917: u32 [sp + 0x210] = a0\n 14921: i32 a0 = sp + 0x200\n 14925: ecalli 6 // 'code_size'\n 14927: fallthrough\n      : @258 (gas: 1)\n 14928: jump @294 if a0 == 0\n      : @259 (gas: 3)\n 14932: a0 = 0x40\n 14935: a1 = 0x20\n 14938: ra = 208, jump @0\n      : @260 [@dyn 104] (gas: 106)\n 14944: a1 = u8 [a0 + 0x11]\n 14947: a2 = u8 [a0 + 0x10]\n 14950: a3 = u8 [a0 + 0x12]\n 14953: a4 = u8 [a0 + 0x13]\n 14956: a1 = a1 << 0x8\n 14959: a1 = a1 | a2\n 14962: a3 = a3 << 0x10\n 14965: a4 = a4 << 0x18\n 14968: a3 = a3 | a4\n 14971: a1 = a1 | a3\n 14974: a2 = u8 [a0 + 0x15]\n 14977: a3 = u8 [a0 + 0x14]\n 14980: a4 = u8 [a0 + 0x16]\n 14983: a5 = u8 [a0 + 0x17]\n 14986: a2 = a2 << 0x8\n 14989: a2 = a2 | a3\n 14992: a4 = a4 << 0x10\n 14995: a5 = a5 << 0x18\n 14998: a4 = a4 | a5\n 15001: a2 = a2 | a4\n 15004: a2 = a2 << 0x20\n 15007: t1 = a2 | a1\n 15010: a1 = u8 [a0 + 0x1]\n 15013: a2 = u8 [a0]\n 15015: a3 = u8 [a0 + 0x2]\n 15018: a4 = u8 [a0 + 0x3]\n 15021: a1 = a1 << 0x8\n 15024: a1 = a1 | a2\n 15027: a3 = a3 << 0x10\n 15030: a4 = a4 << 0x18\n 15033: a3 = a3 | a4\n 15036: a1 = a1 | a3\n 15039: a2 = u8 [a0 + 0x5]\n 15042: a3 = u8 [a0 + 0x4]\n 15045: a4 = u8 [a0 + 0x6]\n 15048: a5 = u8 [a0 + 0x7]\n 15051: a2 = a2 << 0x8\n 15054: a2 = a2 | a3\n 15057: a4 = a4 << 0x10\n 15060: a5 = a5 << 0x18\n 15063: a4 = a4 | a5\n 15066: a2 = a2 | a4\n 15069: a2 = a2 << 0x20\n 15072: t0 = a2 | a1\n 15075: a1 = u8 [a0 + 0x19]\n 15078: a2 = u8 [a0 + 0x18]\n 15081: a3 = u8 [a0 + 0x1a]\n 15084: a4 = u8 [a0 + 0x1b]\n 15087: a1 = a1 << 0x8\n 15090: a1 = a1 | a2\n 15093: a3 = a3 << 0x10\n 15096: a4 = a4 << 0x18\n 15099: a3 = a3 | a4\n 15102: a1 = a1 | a3\n 15105: a2 = u8 [a0 + 0x1d]\n 15108: a3 = u8 [a0 + 0x1c]\n 15111: a4 = u8 [a0 + 0x1e]\n 15114: a5 = u8 [a0 + 0x1f]\n 15117: a2 = a2 << 0x8\n 15120: a2 = a2 | a3\n 15123: a4 = a4 << 0x10\n 15126: a5 = a5 << 0x18\n 15129: a4 = a4 | a5\n 15132: a2 = a2 | a4\n 15135: a2 = a2 << 0x20\n 15138: a5 = a2 | a1\n 15141: a1 = u8 [a0 + 0x9]\n 15144: a2 = u8 [a0 + 0x8]\n 15147: a3 = u8 [a0 + 0xa]\n 15150: a4 = u8 [a0 + 0xb]\n 15153: a1 = a1 << 0x8\n 15156: a1 = a1 | a2\n 15159: a3 = a3 << 0x10\n 15162: a4 = a4 << 0x18\n 15165: a3 = a3 | a4\n 15168: a1 = a1 | a3\n 15171: a2 = u8 [a0 + 0xd]\n 15174: a3 = u8 [a0 + 0xc]\n 15177: a4 = u8 [a0 + 0xe]\n 15180: a0 = u8 [a0 + 0xf]\n 15183: a2 = a2 << 0x8\n 15186: a2 = a2 | a3\n 15189: a4 = a4 << 0x10\n 15192: a0 = a0 << 0x18\n 15195: a0 = a0 | a4\n 15198: a0 = a0 | a2\n 15201: a0 = a0 << 0x20\n 15204: a0 = a0 | a1\n 15207: u64 [sp + 0x70] = a0\n 15210: s1 = reverse a0\n 15212: u64 [sp + 0x78] = a5\n 15215: a2 = reverse a5\n 15217: u64 [sp + 0x88] = t0\n 15221: a1 = reverse t0\n 15223: u64 [sp + 0x80] = t1\n 15227: a0 = reverse t1\n 15229: u64 [sp + 0xc8] = a0\n 15233: u64 [sp + 0xc0] = a1\n 15237: a0 = a0 | a1\n 15240: a1 = a2 | s1\n 15243: a1 = a1 | a0\n 15246: a1 = a1 >> 0x20\n 15249: a0 = a0 | s1\n 15252: a0 = a0 << 0x20\n 15255: a0 = a0 | a1\n 15258: jump @285 if a0 != 0\n      : @261 (gas: 5)\n 15262: i32 a0 = a2 + 0\n 15264: a1 = 0x20\n 15267: u64 [sp + 0xd0] = a0\n 15271: u64 [sp + 0x90] = a2\n 15275: ra = 210, jump @0\n      : @262 [@dyn 105] (gas: 41)\n 15281: u8 [a0 + 31] = 0\n 15284: u8 [a0 + 30] = 0\n 15287: u8 [a0 + 29] = 0\n 15290: u8 [a0 + 28] = 0\n 15293: u8 [a0 + 27] = 0\n 15296: u8 [a0 + 26] = 0\n 15299: u8 [a0 + 25] = 0\n 15302: u8 [a0 + 24] = 0\n 15305: u8 [a0 + 23] = 0\n 15308: u8 [a0 + 22] = 0\n 15311: u8 [a0 + 21] = 0\n 15314: u8 [a0 + 20] = 0\n 15317: u8 [a0 + 19] = 0\n 15320: u8 [a0 + 18] = 0\n 15323: u8 [a0 + 17] = 0\n 15326: u8 [a0 + 16] = 0\n 15329: u8 [a0 + 15] = 0\n 15332: u8 [a0 + 14] = 0\n 15335: u8 [a0 + 13] = 0\n 15338: u8 [a0 + 12] = 0\n 15341: u8 [a0 + 11] = 0\n 15344: u8 [a0 + 10] = 0\n 15347: u8 [a0 + 9] = 0\n 15350: u8 [a0 + 8] = 0\n 15353: u8 [a0 + 7] = 0\n 15356: u8 [a0 + 6] = 0\n 15359: u8 [a0 + 5] = 0\n 15362: u8 [a0 + 4] = 0\n 15365: u8 [a0 + 3] = 0x3c\n 15369: u8 [a0 + 2] = 0x45\n 15373: u8 [a0 + 1] = 0xab\n 15378: a1 = u64 [sp + 0xc0]\n 15382: a1 = a1 | s1\n 15385: a2 = 0xfffffffc\n 15395: a3 = u64 [sp + 0x90]\n 15399: a2 = a3 <u a2\n 15402: a4 = u64 [sp + 0xc8]\n 15406: a2 = 0 if a4 != 0\n 15408: a2 = 0 if a1 != 0\n 15410: u8 [a0 + 0] = 0x19\n 15413: jump @285 if a2 == 0\n      : @263 (gas: 19)\n 15417: a0 = u64 [sp + 0x98]\n 15421: a0 = reverse a0\n 15423: a1 = a0 >> 0x20\n 15426: a2 = u64 [sp + 0xa0]\n 15430: a2 = reverse a2\n 15432: a3 = a2 << 0x20\n 15435: a1 = a1 | a3\n 15438: u64 [sp + 0xc8] = a1\n 15442: a0 = a0 << 0x20\n 15445: a1 = u64 [sp + 0xa8]\n 15449: a1 = reverse a1\n 15451: a1 = a1 >> 0x20\n 15454: a0 = a0 | a1\n 15457: u64 [sp + 0xc0] = a0\n 15461: s1 = a2 >> 0x20\n 15464: a0 = u64 [sp + 0xd0]\n 15468: i32 a0 = a0 + 0x4\n 15471: a1 = 0x20\n 15474: ra = 212, jump @0\n      : @264 [@dyn 106] (gas: 70)\n 15480: a1 = reverse s1\n 15482: a2 = u64 [sp + 0xc8]\n 15486: a2 = reverse a2\n 15488: a3 = u64 [sp + 0xc0]\n 15492: a3 = reverse a3\n 15494: a4 = a3 >> 0x38\n 15497: u8 [a0 + 0x1f] = a4\n 15500: a4 = a3 >> 0x30\n 15503: u8 [a0 + 0x1e] = a4\n 15506: a4 = a3 >> 0x28\n 15509: u8 [a0 + 0x1d] = a4\n 15512: a4 = a3 >> 0x20\n 15515: u8 [a0 + 0x1c] = a4\n 15518: a4 = a3 >> 0x18\n 15521: u8 [a0 + 0x1b] = a4\n 15524: a4 = a3 >> 0x10\n 15527: u8 [a0 + 0x1a] = a4\n 15530: a4 = a3 >> 0x8\n 15533: u8 [a0 + 0x19] = a4\n 15536: u8 [a0 + 0x18] = a3\n 15539: u8 [a0 + 0x10] = a2\n 15542: u8 [a0 + 11] = 0\n 15545: u8 [a0 + 10] = 0\n 15548: u8 [a0 + 9] = 0\n 15551: u8 [a0 + 7] = 0\n 15554: u8 [a0 + 6] = 0\n 15557: u8 [a0 + 5] = 0\n 15560: u8 [a0 + 4] = 0\n 15563: u8 [a0 + 3] = 0\n 15566: u8 [a0 + 2] = 0\n 15569: u8 [a0 + 1] = 0\n 15572: u8 [a0 + 0] = 0\n 15574: a3 = a2 >> 0x38\n 15577: u8 [a0 + 0x17] = a3\n 15580: a3 = a2 >> 0x30\n 15583: u8 [a0 + 0x16] = a3\n 15586: a3 = a2 >> 0x28\n 15589: u8 [a0 + 0x15] = a3\n 15592: a3 = a2 >> 0x20\n 15595: u8 [a0 + 0x14] = a3\n 15598: a3 = a2 >> 0x18\n 15601: u8 [a0 + 0x13] = a3\n 15604: a3 = a2 >> 0x10\n 15607: u8 [a0 + 0x12] = a3\n 15610: a2 = a2 >> 0x8\n 15613: u8 [a0 + 0x11] = a2\n 15616: u8 [a0 + 0x8] = a1\n 15619: a2 = a1 >> 0x38\n 15622: u8 [a0 + 0xf] = a2\n 15625: a2 = a1 >> 0x30\n 15628: u8 [a0 + 0xe] = a2\n 15631: a2 = a1 >> 0x28\n 15634: u8 [a0 + 0xd] = a2\n 15637: a1 = a1 >> 0x20\n 15640: u8 [a0 + 0xc] = a1\n 15643: ecalli 10 // 'ref_time_left'\n 15645: a0 = u64 [sp + 0xb0]\n 15649: u64 [sp + 0x228] = a0\n 15653: a0 = u64 [sp + 0xb8]\n 15657: u64 [sp + 0x220] = a0\n 15661: a0 = u64 [sp + 0xd8]\n 15665: u32 [sp + 0x230] = a0\n 15669: u64 [sp + 600] = 0\n 15673: u64 [sp + 592] = 0\n 15677: u64 [sp + 584] = 0\n 15681: u64 [sp + 576] = 0\n 15685: a1 = 0x24\n 15688: s1 = u64 [sp + 0xd0]\n 15692: a0 = s1\n 15694: ra = 214, jump @0\n      : @265 [@dyn 107] (gas: 4)\n 15700: u64 [sp + 0xd8] = a0\n 15704: a0 = s1\n 15706: a1 = 0\n 15708: ra = 216, jump @0\n      : @266 [@dyn 108] (gas: 31)\n 15714: u32 [sp + 608] = 0\n 15718: u64 [sp + 664] = 0xffffffffffffffff\n 15723: u64 [sp + 656] = 0xffffffffffffffff\n 15728: u64 [sp + 648] = 0xffffffffffffffff\n 15733: u64 [sp + 640] = 0xffffffffffffffff\n 15738: a1 = sp + 0x220\n 15742: a1 = a1 << 0x20\n 15745: a1 = a1 >> 0x20\n 15748: s1 = 0x800000000\n 15758: s1 = s1 | a1\n 15761: a1 = sp + 0x240\n 15765: a1 = a1 << 0x20\n 15768: a1 = a1 >> 0x20\n 15771: a2 = sp + 0x280\n 15775: a2 = a2 << 0x20\n 15778: a3 = a2 | a1\n 15781: a1 = u64 [sp + 0xd8]\n 15785: a1 = a1 << 0x20\n 15788: a1 = a1 >> 0x20\n 15791: a2 = 0x2400000000\n 15801: a4 = a1 | a2\n 15804: a0 = a0 << 0x20\n 15807: a0 = a0 >> 0x20\n 15810: a1 = sp + 0x260\n 15814: a1 = a1 << 0x20\n 15817: a5 = a1 | a0\n 15820: a1 = 0xffffffffffffffff\n 15823: a2 = 0xffffffffffffffff\n 15826: a0 = s1\n 15828: ecalli 1 // 'call'\n 15830: fallthrough\n      : @267 (gas: 1)\n 15831: jump @286 if a0 != 0\n      : @268 (gas: 4)\n 15835: ecalli 12 // 'return_data_size'\n 15837: a0 = 0x40\n 15840: a1 = 0x20\n 15843: ra = 218, jump @0\n      : @269 [@dyn 109] (gas: 65)\n 15849: a3 = u64 [sp + 0x78]\n 15852: u8 [a0 + 0x18] = a3\n 15855: a2 = u64 [sp + 0x80]\n 15859: a1 = a2 >> 0x38\n 15862: u8 [a0 + 0x17] = a1\n 15865: a1 = a2 >> 0x30\n 15868: u8 [a0 + 0x16] = a1\n 15871: a1 = a2 >> 0x28\n 15874: u8 [a0 + 0x15] = a1\n 15877: a1 = a2 >> 0x20\n 15880: u8 [a0 + 0x14] = a1\n 15883: a1 = a2 >> 0x18\n 15886: u8 [a0 + 0x13] = a1\n 15889: a1 = a2 >> 0x10\n 15892: u8 [a0 + 0x12] = a1\n 15895: a1 = a2 >> 0x8\n 15898: u8 [a0 + 0x11] = a1\n 15901: u8 [a0 + 0x10] = a2\n 15904: a2 = u64 [sp + 0x70]\n 15907: a1 = a2 >> 0x38\n 15910: u8 [a0 + 0xf] = a1\n 15913: a1 = a2 >> 0x30\n 15916: u8 [a0 + 0xe] = a1\n 15919: a1 = a2 >> 0x28\n 15922: u8 [a0 + 0xd] = a1\n 15925: a1 = a2 >> 0x20\n 15928: u8 [a0 + 0xc] = a1\n 15931: a1 = a2 >> 0x18\n 15934: u8 [a0 + 0xb] = a1\n 15937: a1 = a2 >> 0x10\n 15940: u8 [a0 + 0xa] = a1\n 15943: a1 = a2 >> 0x8\n 15946: u8 [a0 + 0x9] = a1\n 15949: u8 [a0 + 0x8] = a2\n 15952: a2 = u64 [sp + 0x88]\n 15956: a1 = a2 >> 0x38\n 15959: u8 [a0 + 0x7] = a1\n 15962: a1 = a2 >> 0x30\n 15965: u8 [a0 + 0x6] = a1\n 15968: a1 = a2 >> 0x28\n 15971: u8 [a0 + 0x5] = a1\n 15974: a1 = a2 >> 0x20\n 15977: u8 [a0 + 0x4] = a1\n 15980: a1 = a2 >> 0x18\n 15983: u8 [a0 + 0x3] = a1\n 15986: a1 = a2 >> 0x10\n 15989: u8 [a0 + 0x2] = a1\n 15992: a1 = a2 >> 0x8\n 15995: u8 [a0 + 0x1] = a1\n 15998: u8 [a0] = a2\n 16000: a1 = a3 >> 0x38\n 16003: u8 [a0 + 0x1f] = a1\n 16006: a1 = a3 >> 0x30\n 16009: u8 [a0 + 0x1e] = a1\n 16012: a1 = a3 >> 0x28\n 16015: u8 [a0 + 0x1d] = a1\n 16018: a1 = a3 >> 0x20\n 16021: u8 [a0 + 0x1c] = a1\n 16024: a1 = a3 >> 0x18\n 16027: u8 [a0 + 0x1b] = a1\n 16030: a1 = a3 >> 0x10\n 16033: u8 [a0 + 0x1a] = a1\n 16036: a1 = a3 >> 0x8\n 16039: u8 [a0 + 0x19] = a1\n 16042: jump @278\n      : @270 (gas: 16)\n 16045: u64 [sp + 728] = 0\n 16049: u64 [sp + 720] = 0\n 16053: u64 [sp + 712] = 0\n 16057: u64 [sp + 704] = 0x2\n 16062: u64 [sp + 760] = 0\n 16066: u64 [sp + 752] = 0\n 16070: u64 [sp + 744] = 0\n 16074: u64 [sp + 736] = 0\n 16078: u32 [sp + 672] = 0x20\n 16083: i32 a1 = sp + 0x2c0\n 16087: i32 a3 = sp + 0x2e0\n 16091: i32 a4 = sp + 0x2a0\n 16095: a2 = 0xffffffffffffffff\n 16098: a0 = 0\n 16100: ecalli 8 // 'get_storage'\n 16102: fallthrough\n      : @271 (gas: 8)\n 16103: a0 = u64 [sp + 0x2f8]\n 16107: a2 = u64 [sp + 0x2f0]\n 16111: a3 = u64 [sp + 0x2e8]\n 16115: a1 = u64 [sp + 0x2e0]\n 16119: a4 = a3 | a0\n 16122: a5 = a1 | a2\n 16125: a4 = a4 | a5\n 16128: jump @296 if a4 == 0\n      : @272 (gas: 59)\n 16132: a4 = a1 <u 0x1\n 16135: a4 = a3 - a4\n 16138: u64 [sp + 0xb8] = a4\n 16142: a3 = a3 | a1\n 16145: a3 = a3 <u 0x1\n 16148: a4 = a2 - a3\n 16151: u64 [sp + 0x18] = a4\n 16154: a2 = a2 <u a3\n 16157: s1 = a0 - a2\n 16160: a1 = a1 + 0xffffffffffffffff\n 16163: u64 [sp + 0x8] = a1\n 16166: u64 [sp + 728] = 0\n 16170: u64 [sp + 720] = 0\n 16174: u64 [sp + 712] = 0\n 16178: u64 [sp + 704] = 0x2\n 16183: u64 [sp + 760] = 0\n 16187: u64 [sp + 752] = 0\n 16191: u64 [sp + 744] = 0\n 16195: u64 [sp + 736] = 0\n 16199: u32 [sp + 672] = 0x20\n 16204: i32 a1 = sp + 0x2c0\n 16208: i32 a3 = sp + 0x2e0\n 16212: i32 a4 = sp + 0x2a0\n 16216: a2 = 0xffffffffffffffff\n 16219: a0 = 0\n 16221: ecalli 8 // 'get_storage'\n 16223: u64 [sp + 728] = 0\n 16227: u64 [sp + 720] = 0\n 16231: u64 [sp + 712] = 0\n 16235: u64 [sp + 704] = 0x2\n 16240: u64 [sp + 0x2f8] = s1\n 16244: a0 = u64 [sp + 0x18]\n 16247: u64 [sp + 0x2f0] = a0\n 16251: a0 = u64 [sp + 0xb8]\n 16255: u64 [sp + 0x2e8] = a0\n 16259: a0 = u64 [sp + 0x8]\n 16262: u64 [sp + 0x2e0] = a0\n 16266: i32 a1 = sp + 0x2c0\n 16270: i32 a3 = sp + 0x2e0\n 16274: a2 = 0xffffffffffffffff\n 16277: a4 = 0x20\n 16280: a0 = 0\n 16282: ecalli 15 // 'set_storage'\n 16284: u64 [sp + 728] = 0\n 16288: u64 [sp + 720] = 0\n 16292: u64 [sp + 712] = 0\n 16296: u64 [sp + 704] = 0x2\n 16301: u64 [sp + 760] = 0\n 16305: u64 [sp + 752] = 0\n 16309: u64 [sp + 744] = 0\n 16313: u64 [sp + 736] = 0\n 16317: u32 [sp + 672] = 0x20\n 16322: i32 a1 = sp + 0x2c0\n 16326: i32 a3 = sp + 0x2e0\n 16330: i32 a4 = sp + 0x2a0\n 16334: a2 = 0xffffffffffffffff\n 16337: a0 = 0\n 16339: ecalli 8 // 'get_storage'\n 16341: fallthrough\n      : @273 (gas: 8)\n 16342: a0 = u64 [sp + 0x2f0]\n 16346: a1 = u64 [sp + 0x2f8]\n 16350: a2 = u64 [sp + 0x2e8]\n 16354: a3 = u64 [sp + 0x2e0]\n 16358: a1 = a1 | a2\n 16361: a0 = a0 | a3\n 16364: a0 = a0 | a1\n 16367: jump @287 if a0 == 0\n      : @274 (gas: 3)\n 16371: a1 = 0x20\n 16374: a0 = 0\n 16376: ra = 220, jump @0\n      : @275 [@dyn 110] (gas: 59)\n 16382: a1 = u64 [sp + 0xd0]\n 16386: u8 [a0 + 0x10] = a1\n 16389: a1 = u64 [sp + 0x38]\n 16392: u8 [a0 + 0xf] = a1\n 16395: a1 = u64 [sp + 0x30]\n 16398: u8 [a0 + 0xe] = a1\n 16401: a1 = u64 [sp + 0x28]\n 16404: u8 [a0 + 0xd] = a1\n 16407: a1 = u64 [sp + 0x20]\n 16410: u8 [a0 + 0xc] = a1\n 16413: a1 = u64 [sp + 0xa8]\n 16417: u8 [a0 + 0xb] = a1\n 16420: a1 = u64 [sp + 0xb0]\n 16424: u8 [a0 + 0xa] = a1\n 16427: a1 = u64 [sp + 0x10]\n 16430: u8 [a0 + 0x9] = a1\n 16433: a1 = u64 [sp + 0xa0]\n 16437: u8 [a0 + 0x8] = a1\n 16440: a1 = u64 [sp + 0xc0]\n 16444: u8 [a0 + 0x18] = a1\n 16447: a1 = u64 [sp + 0x68]\n 16450: u8 [a0 + 0x17] = a1\n 16453: a1 = u64 [sp + 0x60]\n 16456: u8 [a0 + 0x16] = a1\n 16459: a1 = u64 [sp + 0x58]\n 16462: u8 [a0 + 0x15] = a1\n 16465: a1 = u64 [sp + 0xc8]\n 16469: u8 [a0 + 0x14] = a1\n 16472: a1 = u64 [sp + 0x50]\n 16475: u8 [a0 + 0x13] = a1\n 16478: a1 = u64 [sp + 0x48]\n 16481: u8 [a0 + 0x12] = a1\n 16484: a1 = u64 [sp + 0x40]\n 16487: u8 [a0 + 0x11] = a1\n 16490: a1 = u64 [sp + 0x98]\n 16494: u8 [a0 + 0x1f] = a1\n 16497: a1 = u64 [sp + 0x90]\n 16501: u8 [a0 + 0x1e] = a1\n 16504: a1 = u64 [sp + 0x88]\n 16508: u8 [a0 + 0x1d] = a1\n 16511: a1 = u64 [sp + 0xd8]\n 16515: u8 [a0 + 0x1c] = a1\n 16518: a1 = u64 [sp + 0x80]\n 16522: u8 [a0 + 0x1b] = a1\n 16525: a1 = u64 [sp + 0x78]\n 16528: u8 [a0 + 0x1a] = a1\n 16531: a1 = u64 [sp + 0x70]\n 16534: u8 [a0 + 0x19] = a1\n 16537: u8 [a0 + 7] = 0\n 16540: u8 [a0 + 6] = 0\n 16543: u8 [a0 + 5] = 0\n 16546: u8 [a0 + 4] = 0\n 16549: u8 [a0 + 3] = 0\n 16552: u8 [a0 + 2] = 0\n 16555: u8 [a0 + 1] = 0\n 16558: u8 [a0 + 0] = 0\n 16560: a0 = 0x20\n 16563: a1 = 0x20\n 16566: ra = 222, jump @0\n      : @276 [@dyn 111] (gas: 35)\n 16572: u8 [a0 + 31] = 0x1\n 16576: u8 [a0 + 30] = 0\n 16579: u8 [a0 + 29] = 0\n 16582: u8 [a0 + 28] = 0\n 16585: u8 [a0 + 27] = 0\n 16588: u8 [a0 + 26] = 0\n 16591: u8 [a0 + 25] = 0\n 16594: u8 [a0 + 24] = 0\n 16597: u8 [a0 + 23] = 0\n 16600: u8 [a0 + 22] = 0\n 16603: u8 [a0 + 21] = 0\n 16606: u8 [a0 + 20] = 0\n 16609: u8 [a0 + 19] = 0\n 16612: u8 [a0 + 18] = 0\n 16615: u8 [a0 + 17] = 0\n 16618: u8 [a0 + 16] = 0\n 16621: u8 [a0 + 15] = 0\n 16624: u8 [a0 + 14] = 0\n 16627: u8 [a0 + 13] = 0\n 16630: u8 [a0 + 12] = 0\n 16633: u8 [a0 + 11] = 0\n 16636: u8 [a0 + 10] = 0\n 16639: u8 [a0 + 9] = 0\n 16642: u8 [a0 + 8] = 0\n 16645: u8 [a0 + 7] = 0\n 16648: u8 [a0 + 6] = 0\n 16651: u8 [a0 + 5] = 0\n 16654: u8 [a0 + 4] = 0\n 16657: u8 [a0 + 3] = 0\n 16660: u8 [a0 + 2] = 0\n 16663: u8 [a0 + 1] = 0\n 16666: u8 [a0 + 0] = 0\n 16668: a1 = 0x40\n 16671: a0 = 0\n 16673: ra = 224, jump @0\n      : @277 [@dyn 112] (gas: 53)\n 16679: i32 a0 = a0 + 0\n 16681: i32 a2 = sp + 0x2e0\n 16685: a1 = 0x40\n 16688: ecalli 9 // 'hash_keccak_256'\n 16690: a0 = u64 [sp + 0x2f8]\n 16694: a1 = u64 [sp + 0x2f0]\n 16698: a2 = u64 [sp + 0x2e8]\n 16702: a3 = u64 [sp + 0x2e0]\n 16706: a0 = reverse a0\n 16708: u64 [sp + 0xd8] = a0\n 16712: a1 = reverse a1\n 16714: u64 [sp + 0xd0] = a1\n 16718: a2 = reverse a2\n 16720: u64 [sp + 0xc8] = a2\n 16724: s1 = reverse a3\n 16726: u64 [sp + 0x2d8] = s1\n 16730: u64 [sp + 0x2d0] = a2\n 16734: u64 [sp + 0x2c8] = a1\n 16738: u64 [sp + 0x2c0] = a0\n 16742: u64 [sp + 760] = 0\n 16746: u64 [sp + 752] = 0\n 16750: u64 [sp + 744] = 0\n 16754: u64 [sp + 736] = 0\n 16758: u32 [sp + 672] = 0x20\n 16763: i32 a1 = sp + 0x2c0\n 16767: i32 a3 = sp + 0x2e0\n 16771: i32 a4 = sp + 0x2a0\n 16775: a2 = 0xffffffffffffffff\n 16778: a0 = 0\n 16780: ecalli 8 // 'get_storage'\n 16782: a0 = u64 [sp + 0x2e0]\n 16786: a1 = u64 [sp + 0x2e8]\n 16790: a2 = u64 [sp + 0x2f0]\n 16794: a3 = u64 [sp + 0x2f8]\n 16798: a0 = a0 & 0xffffffffffffff00\n 16802: u64 [sp + 0x2d8] = s1\n 16806: a4 = u64 [sp + 0xc8]\n 16810: u64 [sp + 0x2d0] = a4\n 16814: a4 = u64 [sp + 0xd0]\n 16818: u64 [sp + 0x2c8] = a4\n 16822: a4 = u64 [sp + 0xd8]\n 16826: u64 [sp + 0x2c0] = a4\n 16830: u64 [sp + 0x2f8] = a3\n 16834: u64 [sp + 0x2f0] = a2\n 16838: u64 [sp + 0x2e8] = a1\n 16842: u64 [sp + 0x2e0] = a0\n 16846: i32 a1 = sp + 0x2c0\n 16850: i32 a3 = sp + 0x2e0\n 16854: a2 = 0xffffffffffffffff\n 16857: a4 = 0x20\n 16860: a0 = 0\n 16862: ecalli 15 // 'set_storage'\n 16864: fallthrough\n      : @278 (gas: 6)\n 16865: sp = s0 + 0xfffffffffffffce0\n 16869: ra = u64 [sp + 0x318]\n 16873: s0 = u64 [sp + 0x310]\n 16877: s1 = u64 [sp + 0x308]\n 16881: sp = sp + 0x320\n 16885: ret\n      : @279 (gas: 3)\n 16887: a0 = 0x40\n 16890: a1 = 0x20\n 16893: ra = 226, jump @0\n      : @280 [@dyn 113] (gas: 103)\n 16899: a1 = u8 [a0 + 0x11]\n 16902: a2 = u8 [a0 + 0x10]\n 16905: a3 = u8 [a0 + 0x12]\n 16908: a4 = u8 [a0 + 0x13]\n 16911: a1 = a1 << 0x8\n 16914: a1 = a1 | a2\n 16917: a3 = a3 << 0x10\n 16920: a4 = a4 << 0x18\n 16923: a3 = a3 | a4\n 16926: a1 = a1 | a3\n 16929: a2 = u8 [a0 + 0x15]\n 16932: a3 = u8 [a0 + 0x14]\n 16935: a4 = u8 [a0 + 0x16]\n 16938: a5 = u8 [a0 + 0x17]\n 16941: a2 = a2 << 0x8\n 16944: a2 = a2 | a3\n 16947: a4 = a4 << 0x10\n 16950: a5 = a5 << 0x18\n 16953: a4 = a4 | a5\n 16956: a2 = a2 | a4\n 16959: a2 = a2 << 0x20\n 16962: t0 = a2 | a1\n 16965: a2 = u8 [a0 + 0x1]\n 16968: a3 = u8 [a0]\n 16970: a4 = u8 [a0 + 0x2]\n 16973: a5 = u8 [a0 + 0x3]\n 16976: a2 = a2 << 0x8\n 16979: a2 = a2 | a3\n 16982: a4 = a4 << 0x10\n 16985: a5 = a5 << 0x18\n 16988: a4 = a4 | a5\n 16991: a2 = a2 | a4\n 16994: a3 = u8 [a0 + 0x5]\n 16997: a4 = u8 [a0 + 0x4]\n 17000: a5 = u8 [a0 + 0x6]\n 17003: s1 = u8 [a0 + 0x7]\n 17006: a3 = a3 << 0x8\n 17009: a3 = a3 | a4\n 17012: a5 = a5 << 0x10\n 17015: s1 = s1 << 0x18\n 17018: a5 = a5 | s1\n 17021: a3 = a3 | a5\n 17024: a3 = a3 << 0x20\n 17027: a2 = a2 | a3\n 17030: a3 = u8 [a0 + 0x19]\n 17033: a4 = u8 [a0 + 0x18]\n 17036: a5 = u8 [a0 + 0x1a]\n 17039: s1 = u8 [a0 + 0x1b]\n 17042: a3 = a3 << 0x8\n 17045: a3 = a3 | a4\n 17048: a5 = a5 << 0x10\n 17051: s1 = s1 << 0x18\n 17054: a5 = a5 | s1\n 17057: a3 = a3 | a5\n 17060: a4 = u8 [a0 + 0x1d]\n 17063: a5 = u8 [a0 + 0x1c]\n 17066: s1 = u8 [a0 + 0x1e]\n 17069: a1 = u8 [a0 + 0x1f]\n 17072: a4 = a4 << 0x8\n 17075: a4 = a4 | a5\n 17078: s1 = s1 << 0x10\n 17081: a1 = a1 << 0x18\n 17084: a1 = a1 | s1\n 17087: a1 = a1 | a4\n 17090: a1 = a1 << 0x20\n 17093: a3 = a3 | a1\n 17096: a1 = u8 [a0 + 0x9]\n 17099: a4 = u8 [a0 + 0x8]\n 17102: a5 = u8 [a0 + 0xa]\n 17105: s1 = u8 [a0 + 0xb]\n 17108: a1 = a1 << 0x8\n 17111: a1 = a1 | a4\n 17114: a5 = a5 << 0x10\n 17117: s1 = s1 << 0x18\n 17120: a5 = a5 | s1\n 17123: a1 = a1 | a5\n 17126: a4 = u8 [a0 + 0xd]\n 17129: a5 = u8 [a0 + 0xc]\n 17132: s1 = u8 [a0 + 0xe]\n 17135: a0 = u8 [a0 + 0xf]\n 17138: a4 = a4 << 0x8\n 17141: a4 = a4 | a5\n 17144: s1 = s1 << 0x10\n 17147: a0 = a0 << 0x18\n 17150: a0 = a0 | s1\n 17153: a0 = a0 | a4\n 17156: a0 = a0 << 0x20\n 17159: a0 = a0 | a1\n 17162: s1 = reverse a0\n 17164: a1 = reverse a3\n 17166: a2 = reverse a2\n 17168: a0 = reverse t0\n 17170: u64 [sp + 0xd8] = a0\n 17174: u64 [sp + 0xd0] = a2\n 17178: a0 = a0 | a2\n 17181: a2 = a1\n 17183: a1 = a1 | s1\n 17186: a1 = a1 | a0\n 17189: a1 = a1 >> 0x20\n 17192: a0 = a0 | s1\n 17195: a0 = a0 << 0x20\n 17198: a0 = a0 | a1\n 17201: jump @285 if a0 != 0\n      : @281 (gas: 5)\n 17205: u64 [sp + 0xc8] = a2\n 17209: i32 a0 = a2 + 0\n 17211: a1 = 0x20\n 17214: u64 [sp + 0xc0] = a0\n 17218: ra = 228, jump @0\n      : @282 [@dyn 114] (gas: 50)\n 17224: u8 [a0 + 31] = 0\n 17227: u8 [a0 + 30] = 0\n 17230: u8 [a0 + 29] = 0\n 17233: u8 [a0 + 28] = 0\n 17236: u8 [a0 + 27] = 0\n 17239: u8 [a0 + 26] = 0\n 17242: u8 [a0 + 25] = 0\n 17245: u8 [a0 + 24] = 0\n 17248: u8 [a0 + 23] = 0\n 17251: u8 [a0 + 22] = 0\n 17254: u8 [a0 + 21] = 0\n 17257: u8 [a0 + 20] = 0\n 17260: u8 [a0 + 19] = 0\n 17263: u8 [a0 + 18] = 0\n 17266: u8 [a0 + 17] = 0\n 17269: u8 [a0 + 16] = 0\n 17272: u8 [a0 + 15] = 0\n 17275: u8 [a0 + 14] = 0\n 17278: u8 [a0 + 13] = 0\n 17281: u8 [a0 + 12] = 0\n 17284: u8 [a0 + 11] = 0\n 17287: u8 [a0 + 10] = 0\n 17290: u8 [a0 + 9] = 0\n 17293: u8 [a0 + 8] = 0\n 17296: u8 [a0 + 7] = 0\n 17299: u8 [a0 + 6] = 0\n 17302: u8 [a0 + 5] = 0\n 17305: u8 [a0 + 4] = 0\n 17308: u8 [a0 + 3] = 0xa0\n 17313: u8 [a0 + 2] = 0x79\n 17317: u8 [a0 + 1] = 0xc3\n 17322: u8 [a0 + 0] = 0x8\n 17325: a1 = u64 [sp + 0xc8]\n 17329: a0 = a1 + 0x4\n 17332: a1 = a0 <u a1\n 17335: a3 = u64 [sp + 0xd8]\n 17339: a2 = a3 + a1\n 17342: a3 = a2 <u a3\n 17345: a3 = a1 if a1 == 0\n 17348: a3 = a3 + s1\n 17351: a1 = a3 <u s1\n 17354: a4 = u64 [sp + 0xd0]\n 17358: a4 = a4 + a1\n 17361: u64 [sp + 0xe8] = a2\n 17365: u64 [sp + 0xe0] = a0\n 17369: u64 [sp + 0xf0] = a3\n 17373: a0 = sp + 0x100\n 17377: a1 = sp + 0xe0\n 17381: u64 [sp + 0xf8] = a4\n 17385: ra = 230, jump @204\n      : @283 [@dyn 115] (gas: 5)\n 17391: a0 = u64 [sp + 0x108]\n 17395: t0 = u64 [sp + 0x118]\n 17399: t1 = u64 [sp + 0x100]\n 17403: a3 = u64 [sp + 0x110]\n 17407: fallthrough\n      : @284 (gas: 26)\n 17408: a1 = u64 [sp + 0xd8]\n 17412: a4 = a0 ^ a1\n 17415: a5 = a0 <u a1\n 17418: t2 = a1\n 17420: a2 = u64 [sp + 0xc8]\n 17424: a1 = t1 <u a2\n 17427: a5 = a1 if a4 == 0\n 17430: a4 = a3 - s1\n 17433: a3 = a3 <u s1\n 17436: s1 = u64 [sp + 0xd0]\n 17440: s1 = t0 - s1\n 17443: s1 = s1 - a3\n 17446: a3 = a4 <u a5\n 17449: s1 = s1 - a3\n 17452: a4 = a4 - a5\n 17455: a0 = a0 - t2\n 17458: a1 = a0 - a1\n 17461: a0 = t1 - a2\n 17464: a1 = a1 | s1\n 17467: a2 = a0 | a4\n 17470: a2 = a2 | a1\n 17473: a1 = a1 | a4\n 17476: a2 = a2 >> 0x20\n 17479: a1 = a1 << 0x20\n 17482: a1 = a1 | a2\n 17485: jump @300 if a1 == 0\n      : @285 (gas: 1)\n 17489: trap\n      : @286 (gas: 1)\n 17490: ra = 232, jump @224\n      : @287 [@dyn 116] (gas: 3)\n 17496: a0 = 0x40\n 17499: a1 = 0x20\n 17502: ra = 234, jump @0\n      : @288 [@dyn 117] (gas: 103)\n 17508: a1 = u8 [a0 + 0x11]\n 17511: a2 = u8 [a0 + 0x10]\n 17514: a3 = u8 [a0 + 0x12]\n 17517: a4 = u8 [a0 + 0x13]\n 17520: a1 = a1 << 0x8\n 17523: a1 = a1 | a2\n 17526: a3 = a3 << 0x10\n 17529: a4 = a4 << 0x18\n 17532: a3 = a3 | a4\n 17535: a1 = a1 | a3\n 17538: a2 = u8 [a0 + 0x15]\n 17541: a3 = u8 [a0 + 0x14]\n 17544: a4 = u8 [a0 + 0x16]\n 17547: a5 = u8 [a0 + 0x17]\n 17550: a2 = a2 << 0x8\n 17553: a2 = a2 | a3\n 17556: a4 = a4 << 0x10\n 17559: a5 = a5 << 0x18\n 17562: a4 = a4 | a5\n 17565: a2 = a2 | a4\n 17568: a2 = a2 << 0x20\n 17571: t0 = a2 | a1\n 17574: a2 = u8 [a0 + 0x1]\n 17577: a3 = u8 [a0]\n 17579: a4 = u8 [a0 + 0x2]\n 17582: a5 = u8 [a0 + 0x3]\n 17585: a2 = a2 << 0x8\n 17588: a2 = a2 | a3\n 17591: a4 = a4 << 0x10\n 17594: a5 = a5 << 0x18\n 17597: a4 = a4 | a5\n 17600: a2 = a2 | a4\n 17603: a3 = u8 [a0 + 0x5]\n 17606: a4 = u8 [a0 + 0x4]\n 17609: a5 = u8 [a0 + 0x6]\n 17612: s1 = u8 [a0 + 0x7]\n 17615: a3 = a3 << 0x8\n 17618: a3 = a3 | a4\n 17621: a5 = a5 << 0x10\n 17624: s1 = s1 << 0x18\n 17627: a5 = a5 | s1\n 17630: a3 = a3 | a5\n 17633: a3 = a3 << 0x20\n 17636: a2 = a2 | a3\n 17639: a3 = u8 [a0 + 0x19]\n 17642: a4 = u8 [a0 + 0x18]\n 17645: a5 = u8 [a0 + 0x1a]\n 17648: s1 = u8 [a0 + 0x1b]\n 17651: a3 = a3 << 0x8\n 17654: a3 = a3 | a4\n 17657: a5 = a5 << 0x10\n 17660: s1 = s1 << 0x18\n 17663: a5 = a5 | s1\n 17666: a3 = a3 | a5\n 17669: a4 = u8 [a0 + 0x1d]\n 17672: a5 = u8 [a0 + 0x1c]\n 17675: s1 = u8 [a0 + 0x1e]\n 17678: a1 = u8 [a0 + 0x1f]\n 17681: a4 = a4 << 0x8\n 17684: a4 = a4 | a5\n 17687: s1 = s1 << 0x10\n 17690: a1 = a1 << 0x18\n 17693: a1 = a1 | s1\n 17696: a1 = a1 | a4\n 17699: a1 = a1 << 0x20\n 17702: a3 = a3 | a1\n 17705: a1 = u8 [a0 + 0x9]\n 17708: a4 = u8 [a0 + 0x8]\n 17711: a5 = u8 [a0 + 0xa]\n 17714: s1 = u8 [a0 + 0xb]\n 17717: a1 = a1 << 0x8\n 17720: a1 = a1 | a4\n 17723: a5 = a5 << 0x10\n 17726: s1 = s1 << 0x18\n 17729: a5 = a5 | s1\n 17732: a1 = a1 | a5\n 17735: a4 = u8 [a0 + 0xd]\n 17738: a5 = u8 [a0 + 0xc]\n 17741: s1 = u8 [a0 + 0xe]\n 17744: a0 = u8 [a0 + 0xf]\n 17747: a4 = a4 << 0x8\n 17750: a4 = a4 | a5\n 17753: s1 = s1 << 0x10\n 17756: a0 = a0 << 0x18\n 17759: a0 = a0 | s1\n 17762: a0 = a0 | a4\n 17765: a0 = a0 << 0x20\n 17768: a0 = a0 | a1\n 17771: s1 = reverse a0\n 17773: a1 = reverse a3\n 17775: a2 = reverse a2\n 17777: a0 = reverse t0\n 17779: u64 [sp + 0xd8] = a0\n 17783: u64 [sp + 0xd0] = a2\n 17787: a0 = a0 | a2\n 17790: a2 = a1\n 17792: a1 = a1 | s1\n 17795: a1 = a1 | a0\n 17798: a1 = a1 >> 0x20\n 17801: a0 = a0 | s1\n 17804: a0 = a0 << 0x20\n 17807: a0 = a0 | a1\n 17810: jump @285 if a0 != 0\n      : @289 (gas: 5)\n 17814: u64 [sp + 0xc8] = a2\n 17818: i32 a0 = a2 + 0\n 17820: a1 = 0x20\n 17823: u64 [sp + 0xc0] = a0\n 17827: ra = 236, jump @0\n      : @290 [@dyn 118] (gas: 50)\n 17833: u8 [a0 + 31] = 0\n 17836: u8 [a0 + 30] = 0\n 17839: u8 [a0 + 29] = 0\n 17842: u8 [a0 + 28] = 0\n 17845: u8 [a0 + 27] = 0\n 17848: u8 [a0 + 26] = 0\n 17851: u8 [a0 + 25] = 0\n 17854: u8 [a0 + 24] = 0\n 17857: u8 [a0 + 23] = 0\n 17860: u8 [a0 + 22] = 0\n 17863: u8 [a0 + 21] = 0\n 17866: u8 [a0 + 20] = 0\n 17869: u8 [a0 + 19] = 0\n 17872: u8 [a0 + 18] = 0\n 17875: u8 [a0 + 17] = 0\n 17878: u8 [a0 + 16] = 0\n 17881: u8 [a0 + 15] = 0\n 17884: u8 [a0 + 14] = 0\n 17887: u8 [a0 + 13] = 0\n 17890: u8 [a0 + 12] = 0\n 17893: u8 [a0 + 11] = 0\n 17896: u8 [a0 + 10] = 0\n 17899: u8 [a0 + 9] = 0\n 17902: u8 [a0 + 8] = 0\n 17905: u8 [a0 + 7] = 0\n 17908: u8 [a0 + 6] = 0\n 17911: u8 [a0 + 5] = 0\n 17914: u8 [a0 + 4] = 0\n 17917: u8 [a0 + 3] = 0xa0\n 17922: u8 [a0 + 2] = 0x79\n 17926: u8 [a0 + 1] = 0xc3\n 17931: u8 [a0 + 0] = 0x8\n 17934: a1 = u64 [sp + 0xc8]\n 17938: a0 = a1 + 0x4\n 17941: a1 = a0 <u a1\n 17944: a3 = u64 [sp + 0xd8]\n 17948: a2 = a3 + a1\n 17951: a3 = a2 <u a3\n 17954: a3 = a1 if a1 == 0\n 17957: a3 = a3 + s1\n 17960: a1 = a3 <u s1\n 17963: a4 = u64 [sp + 0xd0]\n 17967: a4 = a4 + a1\n 17970: u64 [sp + 0x168] = a2\n 17974: u64 [sp + 0x160] = a0\n 17978: u64 [sp + 0x170] = a3\n 17982: a0 = sp + 0x180\n 17986: a1 = sp + 0x160\n 17990: u64 [sp + 0x178] = a4\n 17994: ra = 238, jump @214\n      : @291 [@dyn 119] (gas: 5)\n 18000: a0 = u64 [sp + 0x188]\n 18004: t0 = u64 [sp + 0x198]\n 18008: t1 = u64 [sp + 0x180]\n 18012: a3 = u64 [sp + 0x190]\n 18016: jump @284\n      : @292 (gas: 8)\n 18019: u64 [sp + 464] = 0\n 18023: u64 [sp + 456] = 0\n 18027: u64 [sp + 448] = 0\n 18031: a0 = 0x4e487b7100000000\n 18041: a1 = sp + 0x1c0\n 18045: u64 [sp + 0x1d8] = a0\n 18049: a0 = 0\n 18051: ra = 240, jump @8\n      : @293 [@dyn 120] (gas: 8)\n 18057: u64 [sp + 440] = 0\n 18061: u64 [sp + 432] = 0\n 18065: u64 [sp + 416] = 0x11\n 18070: a0 = 0x4\n 18073: a1 = sp + 0x1a0\n 18077: u64 [sp + 424] = 0\n 18081: ra = 0xf6\n 18085: jump @8\n      : @294 (gas: 2)\n 18088: a1 = 0\n 18090: ra = 242, jump @0\n      : @295 [@dyn 121] (gas: 5)\n 18096: i32 a1 = a0 + 0\n 18098: a0 = 0x1\n 18101: a2 = 0\n 18103: ecalli 13 // 'seal_return'\n 18105: fallthrough\n      : @296 (gas: 8)\n 18106: u64 [sp + 336] = 0\n 18110: u64 [sp + 328] = 0\n 18114: u64 [sp + 320] = 0\n 18118: a0 = 0x4e487b7100000000\n 18128: a1 = sp + 0x140\n 18132: u64 [sp + 0x158] = a0\n 18136: a0 = 0\n 18138: ra = 244, jump @8\n      : @297 [@dyn 122] (gas: 7)\n 18144: u64 [sp + 312] = 0\n 18148: u64 [sp + 304] = 0\n 18152: u64 [sp + 288] = 0x11\n 18157: a0 = 0x4\n 18160: a1 = sp + 0x120\n 18164: u64 [sp + 296] = 0\n 18168: ra = 246, jump @8\n      : @298 [@dyn 123] (gas: 3)\n 18174: a1 = 0x24\n 18177: a0 = 0\n 18179: ra = 248, jump @0\n      : @299 [@dyn 124] (gas: 5)\n 18185: i32 a1 = a0 + 0\n 18187: a0 = 0x1\n 18190: a2 = 0x24\n 18193: ecalli 13 // 'seal_return'\n 18195: fallthrough\n      : @300 (gas: 4)\n 18196: i32 s1 = a0 + 0\n 18198: a0 = u64 [sp + 0xc0]\n 18202: a1 = s1\n 18204: ra = 250, jump @0\n      : @301 [@dyn 125] (gas: 6)\n 18210: i32 a1 = a0 + 0\n 18212: a0 = 0x1\n 18215: a2 = s1\n 18217: ra = 0xfc\n 18221: ecalli 13 // 'seal_return'\n 18223: fallthrough\n      : @302 [@dyn 126] (gas: 24)\n 18224: sp = sp + 0xffffffffffffffb0\n 18227: u64 [sp + 0x48] = ra\n 18230: u64 [sp + 0x40] = s0\n 18233: s0 = sp + 0x50\n 18236: sp = sp & 0xfffffffffffffff0\n 18239: t0 = u64 [a0]\n 18241: t1 = u64 [a0 + 0x8]\n 18244: a4 = u64 [a0 + 0x10]\n 18247: a0 = u64 [a0 + 0x18]\n 18250: a5 = u64 [a1]\n 18252: a2 = u64 [a1 + 0x8]\n 18255: a3 = u64 [a1 + 0x10]\n 18258: a1 = u64 [a1 + 0x18]\n 18261: u64 [sp + 0x18] = a1\n 18264: u64 [sp + 0x10] = a3\n 18267: u64 [sp + 0x8] = a2\n 18270: u64 [sp] = a5\n 18272: u64 [sp + 0x38] = a0\n 18275: u64 [sp + 0x30] = a4\n 18278: u64 [sp + 0x28] = t1\n 18281: a0 = sp + 0x20\n 18284: a1 = sp\n 18286: u64 [sp + 0x20] = t0\n 18289: ra = 254, jump @191\n      : @303 [@dyn 127] (gas: 5)\n 18295: sp = s0 + 0xffffffffffffffb0\n 18298: ra = u64 [sp + 0x48]\n 18301: s0 = u64 [sp + 0x40]\n 18304: sp = sp + 0x50\n 18307: ret\n      : @304 (gas: 17)\n 18309: sp = sp + 0xffffffffffffffa0\n 18312: u64 [sp + 0x58] = ra\n 18315: u64 [sp + 0x50] = s0\n 18318: u64 [sp + 0x48] = s1\n 18321: a3 = u64 [a1 + 0x18]\n 18324: a4 = u64 [a1 + 0x10]\n 18327: a5 = u64 [a1 + 0x8]\n 18330: s1 = u64 [a1]\n 18332: a1 = a5 | a3\n 18335: a2 = s1 | a4\n 18338: a2 = a2 | a1\n 18341: a2 = a2 >> 0x20\n 18344: a1 = a1 | a4\n 18347: a1 = a1 << 0x20\n 18350: a1 = a1 | a2\n 18353: u64 [sp + 0x20] = a0\n 18356: jump @313 if a1 != 0\n      : @305 (gas: 19)\n 18360: a0 = s1 + 0x20\n 18363: u64 [sp + 0x38] = a0\n 18366: a0 = a0 <u s1\n 18369: a1 = a5 + a0\n 18372: u64 [sp + 0x40] = a1\n 18375: u64 [sp + 0x8] = a5\n 18378: s0 = a1 <u a5\n 18381: s0 = a0 if a0 == 0\n 18384: s0 = s0 + a4\n 18387: u64 [sp + 0x10] = a4\n 18390: a0 = s0 <u a4\n 18393: u64 [sp + 0x18] = a3\n 18396: a0 = a0 + a3\n 18399: u64 [sp + 0x30] = a0\n 18402: u64 [sp] = s1\n 18404: i32 a0 = s1 + 0\n 18406: a1 = 0x20\n 18409: s1 = 0x20\n 18412: ra = 256, jump @0\n      : @306 [@dyn 128] (gas: 43)\n 18418: u8 [a0 + 0x1f] = s1\n 18421: a1 = u64 [sp + 0x38]\n 18424: a1 = a1 | s0\n 18427: a2 = u64 [sp + 0x40]\n 18430: a3 = u64 [sp + 0x30]\n 18433: a2 = a2 | a3\n 18436: a1 = a1 | a2\n 18439: a1 = a1 >> 0x20\n 18442: a2 = a2 | s0\n 18445: a2 = a2 << 0x20\n 18448: a1 = a1 | a2\n 18451: u8 [a0 + 30] = 0\n 18454: u8 [a0 + 29] = 0\n 18457: u8 [a0 + 28] = 0\n 18460: u8 [a0 + 27] = 0\n 18463: u8 [a0 + 26] = 0\n 18466: u8 [a0 + 25] = 0\n 18469: u8 [a0 + 24] = 0\n 18472: u8 [a0 + 23] = 0\n 18475: u8 [a0 + 22] = 0\n 18478: u8 [a0 + 21] = 0\n 18481: u8 [a0 + 20] = 0\n 18484: u8 [a0 + 19] = 0\n 18487: u8 [a0 + 18] = 0\n 18490: u8 [a0 + 17] = 0\n 18493: u8 [a0 + 16] = 0\n 18496: u8 [a0 + 15] = 0\n 18499: u8 [a0 + 14] = 0\n 18502: u8 [a0 + 13] = 0\n 18505: u8 [a0 + 12] = 0\n 18508: u8 [a0 + 11] = 0\n 18511: u8 [a0 + 10] = 0\n 18514: u8 [a0 + 9] = 0\n 18517: u8 [a0 + 8] = 0\n 18520: u8 [a0 + 7] = 0\n 18523: u8 [a0 + 6] = 0\n 18526: u8 [a0 + 5] = 0\n 18529: u8 [a0 + 4] = 0\n 18532: u8 [a0 + 3] = 0\n 18535: u8 [a0 + 2] = 0\n 18538: u8 [a0 + 1] = 0\n 18541: u8 [a0 + 0] = 0\n 18543: jump @313 if a1 != 0\n      : @307 (gas: 6)\n 18547: s1 = s0\n 18549: s0 = u64 [sp + 0x38]\n 18552: i32 a0 = s0 + 0\n 18554: a1 = 0x20\n 18557: u64 [sp + 0x28] = a0\n 18560: ra = 258, jump @0\n      : @308 [@dyn 129] (gas: 42)\n 18566: u8 [a0 + 31] = 0x23\n 18570: u8 [a0 + 30] = 0\n 18573: u8 [a0 + 29] = 0\n 18576: u8 [a0 + 28] = 0\n 18579: u8 [a0 + 27] = 0\n 18582: u8 [a0 + 26] = 0\n 18585: u8 [a0 + 25] = 0\n 18588: u8 [a0 + 24] = 0\n 18591: u8 [a0 + 23] = 0\n 18594: u8 [a0 + 22] = 0\n 18597: u8 [a0 + 21] = 0\n 18600: u8 [a0 + 20] = 0\n 18603: u8 [a0 + 19] = 0\n 18606: u8 [a0 + 18] = 0\n 18609: u8 [a0 + 17] = 0\n 18612: u8 [a0 + 16] = 0\n 18615: u8 [a0 + 15] = 0\n 18618: u8 [a0 + 14] = 0\n 18621: u8 [a0 + 13] = 0\n 18624: u8 [a0 + 12] = 0\n 18627: u8 [a0 + 11] = 0\n 18630: u8 [a0 + 10] = 0\n 18633: u8 [a0 + 9] = 0\n 18636: u8 [a0 + 8] = 0\n 18639: u8 [a0 + 7] = 0\n 18642: u8 [a0 + 6] = 0\n 18645: u8 [a0 + 5] = 0\n 18648: u8 [a0 + 4] = 0\n 18651: u8 [a0 + 3] = 0\n 18654: u8 [a0 + 2] = 0\n 18657: u8 [a0 + 1] = 0\n 18660: a1 = u64 [sp + 0x30]\n 18663: a2 = s1 | a1\n 18666: s1 = 0x100000000\n 18676: a1 = 0xffffffe0\n 18686: a1 = s0 <u a1\n 18689: s0 = a2\n 18691: a2 = u64 [sp + 0x40]\n 18694: a1 = 0 if a2 != 0\n 18696: a1 = 0 if s0 != 0\n 18698: u8 [a0 + 0] = 0\n 18700: jump @313 if a1 == 0\n      : @309 (gas: 4)\n 18704: a0 = u64 [sp + 0x28]\n 18707: i32 a0 = a0 + 0x20\n 18710: a1 = 0x20\n 18713: ra = 260, jump @0\n      : @310 [@dyn 130] (gas: 41)\n 18719: u8 [a0 + 29] = 0x6d\n 18723: u8 [a0 + 31] = 0x64\n 18727: u8 [a0 + 27] = 0x64\n 18731: u8 [a0 + 21] = 0x68\n 18735: u8 [a0 + 20] = 0x74\n 18739: u8 [a0 + 16] = 0x74\n 18743: u8 [a0 + 30] = 0x6f\n 18747: u8 [a0 + 22] = 0x6f\n 18751: u8 [a0 + 15] = 0x6f\n 18755: u8 [a0 + 14] = 0x6e\n 18759: u8 [a0 + 25] = 0x73\n 18763: u8 [a0 + 12] = 0x73\n 18767: u8 [a0 + 24] = 0x69\n 18771: u8 [a0 + 11] = 0x69\n 18775: u8 [a0 + 23] = 0x72\n 18779: u8 [a0 + 9] = 0x72\n 18783: u8 [a0 + 18] = 0x61\n 18787: u8 [a0 + 5] = 0x61\n 18791: u8 [a0 + 4] = 0x63\n 18795: u8 [a0 + 28] = 0x20\n 18799: u8 [a0 + 17] = 0x20\n 18803: u8 [a0 + 13] = 0x20\n 18807: u8 [a0 + 10] = 0x20\n 18811: u8 [a0 + 3] = 0x20\n 18815: u8 [a0 + 2] = 0x3a\n 18819: u8 [a0 + 1] = 0x57\n 18823: u8 [a0 + 0] = 0x53\n 18826: a1 = s1 + 0xffffffffffffffc0\n 18829: a2 = u64 [sp + 0x38]\n 18832: a1 = a2 <u a1\n 18835: s1 = 0x65\n 18838: u8 [a0 + 0x1a] = s1\n 18841: a2 = u64 [sp + 0x40]\n 18844: a1 = 0 if a2 != 0\n 18846: u8 [a0 + 19] = 0x75\n 18850: u8 [a0 + 0x8] = s1\n 18853: a1 = 0 if s0 != 0\n 18855: s0 = 0x6c\n 18858: u8 [a0 + 0x7] = s0\n 18861: u8 [a0 + 0x6] = s0\n 18864: jump @313 if a1 == 0\n      : @311 (gas: 4)\n 18868: a0 = u64 [sp + 0x28]\n 18871: i32 a0 = a0 + 0x40\n 18874: a1 = 0x20\n 18877: ra = 262, jump @0\n      : @312 [@dyn 131] (gas: 54)\n 18883: u8 [a0 + 31] = 0\n 18886: u8 [a0 + 30] = 0\n 18889: u8 [a0 + 29] = 0\n 18892: u8 [a0 + 28] = 0\n 18895: u8 [a0 + 27] = 0\n 18898: u8 [a0 + 26] = 0\n 18901: u8 [a0 + 25] = 0\n 18904: u8 [a0 + 24] = 0\n 18907: u8 [a0 + 23] = 0\n 18910: u8 [a0 + 22] = 0\n 18913: u8 [a0 + 21] = 0\n 18916: u8 [a0 + 20] = 0\n 18919: u8 [a0 + 19] = 0\n 18922: u8 [a0 + 18] = 0\n 18925: u8 [a0 + 17] = 0\n 18928: u8 [a0 + 16] = 0\n 18931: u8 [a0 + 15] = 0\n 18934: u8 [a0 + 14] = 0\n 18937: u8 [a0 + 13] = 0\n 18940: u8 [a0 + 12] = 0\n 18943: u8 [a0 + 11] = 0\n 18946: u8 [a0 + 10] = 0\n 18949: u8 [a0 + 9] = 0\n 18952: u8 [a0 + 8] = 0\n 18955: u8 [a0 + 7] = 0\n 18958: u8 [a0 + 6] = 0\n 18961: u8 [a0 + 5] = 0\n 18964: u8 [a0 + 4] = 0\n 18967: u8 [a0 + 3] = 0\n 18970: u8 [a0 + 0x2] = s1\n 18973: u8 [a0 + 0x1] = s0\n 18976: u8 [a0 + 0] = 0x75\n 18979: a1 = u64 [sp]\n 18981: a0 = a1 + 0x80\n 18985: a1 = a0 <u a1\n 18988: a3 = u64 [sp + 0x8]\n 18991: a2 = a3 + a1\n 18994: a3 = a2 <u a3\n 18997: a3 = a1 if a1 == 0\n 19000: a1 = u64 [sp + 0x10]\n 19003: a3 = a3 + a1\n 19006: a1 = a3 <u a1\n 19009: a4 = u64 [sp + 0x18]\n 19012: a1 = a1 + a4\n 19015: a4 = u64 [sp + 0x20]\n 19018: u64 [a4] = a0\n 19020: u64 [a4 + 0x8] = a2\n 19023: u64 [a4 + 0x10] = a3\n 19026: u64 [a4 + 0x18] = a1\n 19029: ra = u64 [sp + 0x58]\n 19032: s0 = u64 [sp + 0x50]\n 19035: s1 = u64 [sp + 0x48]\n 19038: sp = sp + 0x60\n 19041: ret\n      : @313 (gas: 1)\n 19043: trap\n      : @314 (gas: 57)\n 19044: sp = sp + 0xfffffffffffffe20\n 19048: u64 [sp + 0x1d8] = ra\n 19052: u64 [sp + 0x1d0] = s0\n 19056: u64 [sp + 0x1c8] = s1\n 19060: s0 = sp + 0x1e0\n 19064: sp = sp & 0xffffffffffffffe0\n 19067: a4 = u64 [a3 + 0x18]\n 19070: u64 [sp + 0x80] = a4\n 19074: a4 = u64 [a3 + 0x10]\n 19077: u64 [sp + 0x70] = a4\n 19080: a4 = u64 [a3 + 0x8]\n 19083: u64 [sp + 0x58] = a4\n 19086: a3 = u64 [a3]\n 19088: u64 [sp + 0x38] = a3\n 19091: a3 = u64 [a2 + 0x18]\n 19094: u64 [sp + 0x78] = a3\n 19097: a3 = u64 [a2 + 0x10]\n 19100: u64 [sp + 0x60] = a3\n 19103: a3 = u64 [a2 + 0x8]\n 19106: u64 [sp + 0x48] = a3\n 19109: a2 = u64 [a2]\n 19111: u64 [sp + 0x28] = a2\n 19114: a2 = u64 [a1 + 0x18]\n 19117: u64 [sp + 0x68] = a2\n 19120: a2 = u64 [a1 + 0x10]\n 19123: u64 [sp + 0x50] = a2\n 19126: a2 = u64 [a1 + 0x8]\n 19129: u64 [sp + 0x30] = a2\n 19132: a1 = u64 [a1]\n 19134: u64 [sp + 0x18] = a1\n 19137: a1 = u64 [a0 + 0x18]\n 19140: u64 [sp + 0x88] = a1\n 19144: a1 = u64 [a0 + 0x10]\n 19147: u64 [sp + 0x40] = a1\n 19150: a1 = u64 [a0 + 0x8]\n 19153: u64 [sp + 0x20] = a1\n 19156: a0 = u64 [a0]\n 19158: u64 [sp + 0x10] = a0\n 19161: i32 a0 = sp + 0x160\n 19165: ecalli 5 // 'caller'\n 19167: a0 = u64 [sp + 0x168]\n 19171: a1 = i32 [sp + 0x170]\n 19175: s1 = u64 [sp + 0x160]\n 19179: a0 = reverse a0\n 19181: a2 = a0 << 0x20\n 19184: a1 = reverse a1\n 19186: a1 = a1 >> 0x20\n 19189: a1 = a1 | a2\n 19192: u64 [sp + 0x98] = a1\n 19196: a0 = a0 >> 0x20\n 19199: a1 = reverse s1\n 19201: a1 = a1 << 0x20\n 19204: a0 = a0 | a1\n 19207: u64 [sp + 0x90] = a0\n 19211: a1 = 0x20\n 19214: a0 = 0\n 19216: ra = 264, jump @0\n      : @315 [@dyn 132] (gas: 56)\n 19222: a1 = u64 [sp + 0x90]\n 19226: a1 = reverse a1\n 19228: a2 = u64 [sp + 0x98]\n 19232: a2 = reverse a2\n 19234: a3 = s1 >> 0x18\n 19237: u8 [a0 + 0xf] = a3\n 19240: a3 = s1 >> 0x10\n 19243: u8 [a0 + 0xe] = a3\n 19246: a3 = s1 >> 0x8\n 19249: u8 [a0 + 0xd] = a3\n 19252: u8 [a0 + 0xc] = s1\n 19255: u8 [a0 + 11] = 0\n 19258: u8 [a0 + 10] = 0\n 19261: u8 [a0 + 9] = 0\n 19264: u8 [a0 + 8] = 0\n 19267: u8 [a0 + 7] = 0\n 19270: u8 [a0 + 6] = 0\n 19273: u8 [a0 + 5] = 0\n 19276: u8 [a0 + 4] = 0\n 19279: u8 [a0 + 3] = 0\n 19282: u8 [a0 + 2] = 0\n 19285: u8 [a0 + 1] = 0\n 19288: u8 [a0 + 0] = 0\n 19290: u8 [a0 + 0x18] = a2\n 19293: u8 [a0 + 0x10] = a1\n 19296: a3 = a2 >> 0x38\n 19299: u8 [a0 + 0x1f] = a3\n 19302: a3 = a2 >> 0x30\n 19305: u8 [a0 + 0x1e] = a3\n 19308: a3 = a2 >> 0x28\n 19311: u8 [a0 + 0x1d] = a3\n 19314: a3 = a2 >> 0x20\n 19317: u8 [a0 + 0x1c] = a3\n 19320: a3 = a2 >> 0x18\n 19323: u8 [a0 + 0x1b] = a3\n 19326: a3 = a2 >> 0x10\n 19329: u8 [a0 + 0x1a] = a3\n 19332: a2 = a2 >> 0x8\n 19335: u8 [a0 + 0x19] = a2\n 19338: a2 = a1 >> 0x38\n 19341: u8 [a0 + 0x17] = a2\n 19344: a2 = a1 >> 0x30\n 19347: u8 [a0 + 0x16] = a2\n 19350: a2 = a1 >> 0x28\n 19353: u8 [a0 + 0x15] = a2\n 19356: a2 = a1 >> 0x20\n 19359: u8 [a0 + 0x14] = a2\n 19362: a2 = a1 >> 0x18\n 19365: u8 [a0 + 0x13] = a2\n 19368: a2 = a1 >> 0x10\n 19371: u8 [a0 + 0x12] = a2\n 19374: a1 = a1 >> 0x8\n 19377: u8 [a0 + 0x11] = a1\n 19380: a0 = 0x20\n 19383: a1 = 0x20\n 19386: ra = 266, jump @0\n      : @316 [@dyn 133] (gas: 35)\n 19392: u8 [a0 + 31] = 0x1\n 19396: u8 [a0 + 30] = 0\n 19399: u8 [a0 + 29] = 0\n 19402: u8 [a0 + 28] = 0\n 19405: u8 [a0 + 27] = 0\n 19408: u8 [a0 + 26] = 0\n 19411: u8 [a0 + 25] = 0\n 19414: u8 [a0 + 24] = 0\n 19417: u8 [a0 + 23] = 0\n 19420: u8 [a0 + 22] = 0\n 19423: u8 [a0 + 21] = 0\n 19426: u8 [a0 + 20] = 0\n 19429: u8 [a0 + 19] = 0\n 19432: u8 [a0 + 18] = 0\n 19435: u8 [a0 + 17] = 0\n 19438: u8 [a0 + 16] = 0\n 19441: u8 [a0 + 15] = 0\n 19444: u8 [a0 + 14] = 0\n 19447: u8 [a0 + 13] = 0\n 19450: u8 [a0 + 12] = 0\n 19453: u8 [a0 + 11] = 0\n 19456: u8 [a0 + 10] = 0\n 19459: u8 [a0 + 9] = 0\n 19462: u8 [a0 + 8] = 0\n 19465: u8 [a0 + 7] = 0\n 19468: u8 [a0 + 6] = 0\n 19471: u8 [a0 + 5] = 0\n 19474: u8 [a0 + 4] = 0\n 19477: u8 [a0 + 3] = 0\n 19480: u8 [a0 + 2] = 0\n 19483: u8 [a0 + 1] = 0\n 19486: u8 [a0 + 0] = 0\n 19488: a1 = 0x40\n 19491: a0 = 0\n 19493: ra = 268, jump @0\n      : @317 [@dyn 134] (gas: 28)\n 19499: i32 a0 = a0 + 0\n 19501: i32 a2 = sp + 0x1a0\n 19505: a1 = 0x40\n 19508: ecalli 9 // 'hash_keccak_256'\n 19510: a0 = u64 [sp + 0x1b8]\n 19514: a1 = u64 [sp + 0x1b0]\n 19518: a2 = u64 [sp + 0x1a8]\n 19522: a3 = u64 [sp + 0x1a0]\n 19526: a0 = reverse a0\n 19528: a1 = reverse a1\n 19530: a2 = reverse a2\n 19532: a3 = reverse a3\n 19534: u64 [sp + 0x198] = a3\n 19538: u64 [sp + 0x190] = a2\n 19542: u64 [sp + 0x188] = a1\n 19546: u64 [sp + 0x180] = a0\n 19550: u64 [sp + 440] = 0\n 19554: u64 [sp + 432] = 0\n 19558: u64 [sp + 424] = 0\n 19562: u64 [sp + 416] = 0\n 19566: u32 [sp + 448] = 0x20\n 19571: i32 a1 = sp + 0x180\n 19575: i32 a3 = sp + 0x1a0\n 19579: i32 a4 = sp + 0x1c0\n 19583: a2 = 0xffffffffffffffff\n 19586: a0 = 0\n 19588: ecalli 8 // 'get_storage'\n 19590: fallthrough\n      : @318 (gas: 2)\n 19591: a0 = u8 [sp + 0x1a0]\n 19595: jump @321 if a0 == 0\n      : @319 (gas: 76)\n 19599: a0 = u64 [sp + 0x38]\n 19602: u64 [sp + 0xe0] = a0\n 19606: a0 = u64 [sp + 0x28]\n 19609: u64 [sp + 0x100] = a0\n 19613: a0 = u64 [sp + 0x18]\n 19616: u64 [sp + 0x120] = a0\n 19620: a0 = u64 [sp + 0x10]\n 19623: u64 [sp + 0x140] = a0\n 19627: a0 = u64 [sp + 0x58]\n 19630: u64 [sp + 0xe8] = a0\n 19634: a0 = u64 [sp + 0x48]\n 19637: u64 [sp + 0x108] = a0\n 19641: a0 = u64 [sp + 0x30]\n 19644: u64 [sp + 0x128] = a0\n 19648: a0 = u64 [sp + 0x20]\n 19651: u64 [sp + 0x148] = a0\n 19655: a0 = u64 [sp + 0x70]\n 19658: u64 [sp + 0xf0] = a0\n 19662: a0 = u64 [sp + 0x60]\n 19665: u64 [sp + 0x110] = a0\n 19669: a0 = u64 [sp + 0x50]\n 19672: u64 [sp + 0x130] = a0\n 19676: a0 = u64 [sp + 0x40]\n 19679: u64 [sp + 0x150] = a0\n 19683: a0 = u64 [sp + 0x80]\n 19687: u64 [sp + 0xf8] = a0\n 19691: a0 = u64 [sp + 0x78]\n 19694: u64 [sp + 0x118] = a0\n 19698: a0 = u64 [sp + 0x68]\n 19701: u64 [sp + 0x138] = a0\n 19705: a0 = sp + 0x140\n 19709: a1 = sp + 0x120\n 19713: a2 = sp + 0x100\n 19717: a3 = sp + 0xe0\n 19721: a4 = u64 [sp + 0x88]\n 19725: u64 [sp + 0x158] = a4\n 19729: ra = 0x10e\n 19733: sp = sp + 0xfffffffffffffd60\n 19737: u64 [sp + 0x298] = ra\n 19741: u64 [sp + 0x290] = s0\n 19745: u64 [sp + 0x288] = s1\n 19749: s0 = sp + 0x2a0\n 19753: sp = sp & 0xffffffffffffffe0\n 19756: a4 = u64 [a3 + 0x18]\n 19759: u64 [sp + 0xa8] = a4\n 19763: a4 = u64 [a3 + 0x10]\n 19766: u64 [sp + 0xa0] = a4\n 19770: a4 = u64 [a3 + 0x8]\n 19773: u64 [sp + 0x98] = a4\n 19777: a3 = u64 [a3]\n 19779: u64 [sp + 0xb8] = a3\n 19783: a3 = u64 [a1 + 0x18]\n 19786: u64 [sp + 0x80] = a3\n 19790: a3 = u64 [a1 + 0x10]\n 19793: u64 [sp + 0x78] = a3\n 19796: a3 = u64 [a1 + 0x8]\n 19799: u64 [sp + 0x70] = a3\n 19802: a1 = u64 [a1]\n 19804: u64 [sp + 0x68] = a1\n 19807: a1 = u64 [a0 + 0x10]\n 19810: u64 [sp + 0x60] = a1\n 19813: a1 = u64 [a0 + 0x8]\n 19816: u64 [sp + 0x50] = a1\n 19819: a0 = u64 [a0]\n 19821: u64 [sp + 0x58] = a0\n 19824: s1 = u64 [a2 + 0x10]\n 19827: a0 = u64 [a2]\n 19829: u64 [sp + 0xb0] = a0\n 19833: a0 = u64 [a2 + 0x18]\n 19836: u64 [sp + 0x90] = a0\n 19840: a0 = u64 [a2 + 0x8]\n 19843: u64 [sp + 0x88] = a0\n 19847: a0 = 0x40\n 19850: a1 = 0x20\n 19853: ra = 0x150\n 19857: jump @0\n      : @320 [@dyn 135] (gas: 6)\n 19860: sp = s0 + 0xfffffffffffffe20\n 19864: ra = u64 [sp + 0x1d8]\n 19868: s0 = u64 [sp + 0x1d0]\n 19872: s1 = u64 [sp + 0x1c8]\n 19876: sp = sp + 0x1e0\n 19880: ret\n      : @321 (gas: 3)\n 19882: a0 = 0x40\n 19885: a1 = 0x20\n 19888: ra = 272, jump @0\n      : @322 [@dyn 136] (gas: 103)\n 19894: a1 = u8 [a0 + 0x11]\n 19897: a2 = u8 [a0 + 0x10]\n 19900: a3 = u8 [a0 + 0x12]\n 19903: a4 = u8 [a0 + 0x13]\n 19906: a1 = a1 << 0x8\n 19909: a1 = a1 | a2\n 19912: a3 = a3 << 0x10\n 19915: a4 = a4 << 0x18\n 19918: a3 = a3 | a4\n 19921: a1 = a1 | a3\n 19924: a2 = u8 [a0 + 0x15]\n 19927: a3 = u8 [a0 + 0x14]\n 19930: a4 = u8 [a0 + 0x16]\n 19933: a5 = u8 [a0 + 0x17]\n 19936: a2 = a2 << 0x8\n 19939: a2 = a2 | a3\n 19942: a4 = a4 << 0x10\n 19945: a5 = a5 << 0x18\n 19948: a4 = a4 | a5\n 19951: a2 = a2 | a4\n 19954: a2 = a2 << 0x20\n 19957: t0 = a2 | a1\n 19960: a2 = u8 [a0 + 0x1]\n 19963: a3 = u8 [a0]\n 19965: a4 = u8 [a0 + 0x2]\n 19968: a5 = u8 [a0 + 0x3]\n 19971: a2 = a2 << 0x8\n 19974: a2 = a2 | a3\n 19977: a4 = a4 << 0x10\n 19980: a5 = a5 << 0x18\n 19983: a4 = a4 | a5\n 19986: a2 = a2 | a4\n 19989: a3 = u8 [a0 + 0x5]\n 19992: a4 = u8 [a0 + 0x4]\n 19995: a5 = u8 [a0 + 0x6]\n 19998: s1 = u8 [a0 + 0x7]\n 20001: a3 = a3 << 0x8\n 20004: a3 = a3 | a4\n 20007: a5 = a5 << 0x10\n 20010: s1 = s1 << 0x18\n 20013: a5 = a5 | s1\n 20016: a3 = a3 | a5\n 20019: a3 = a3 << 0x20\n 20022: a2 = a2 | a3\n 20025: a3 = u8 [a0 + 0x19]\n 20028: a4 = u8 [a0 + 0x18]\n 20031: a5 = u8 [a0 + 0x1a]\n 20034: s1 = u8 [a0 + 0x1b]\n 20037: a3 = a3 << 0x8\n 20040: a3 = a3 | a4\n 20043: a5 = a5 << 0x10\n 20046: s1 = s1 << 0x18\n 20049: a5 = a5 | s1\n 20052: a3 = a3 | a5\n 20055: a4 = u8 [a0 + 0x1d]\n 20058: a5 = u8 [a0 + 0x1c]\n 20061: s1 = u8 [a0 + 0x1e]\n 20064: a1 = u8 [a0 + 0x1f]\n 20067: a4 = a4 << 0x8\n 20070: a4 = a4 | a5\n 20073: s1 = s1 << 0x10\n 20076: a1 = a1 << 0x18\n 20079: a1 = a1 | s1\n 20082: a1 = a1 | a4\n 20085: a1 = a1 << 0x20\n 20088: a3 = a3 | a1\n 20091: a1 = u8 [a0 + 0x9]\n 20094: a4 = u8 [a0 + 0x8]\n 20097: a5 = u8 [a0 + 0xa]\n 20100: s1 = u8 [a0 + 0xb]\n 20103: a1 = a1 << 0x8\n 20106: a1 = a1 | a4\n 20109: a5 = a5 << 0x10\n 20112: s1 = s1 << 0x18\n 20115: a5 = a5 | s1\n 20118: a1 = a1 | a5\n 20121: a4 = u8 [a0 + 0xd]\n 20124: a5 = u8 [a0 + 0xc]\n 20127: s1 = u8 [a0 + 0xe]\n 20130: a0 = u8 [a0 + 0xf]\n 20133: a4 = a4 << 0x8\n 20136: a4 = a4 | a5\n 20139: s1 = s1 << 0x10\n 20142: a0 = a0 << 0x18\n 20145: a0 = a0 | s1\n 20148: a0 = a0 | a4\n 20151: a0 = a0 << 0x20\n 20154: a0 = a0 | a1\n 20157: s1 = reverse a0\n 20159: a1 = reverse a3\n 20161: a2 = reverse a2\n 20163: a0 = reverse t0\n 20165: u64 [sp + 0x98] = a0\n 20169: u64 [sp + 0x90] = a2\n 20173: a0 = a0 | a2\n 20176: a2 = a1\n 20178: a1 = a1 | s1\n 20181: a1 = a1 | a0\n 20184: a1 = a1 >> 0x20\n 20187: a0 = a0 | s1\n 20190: a0 = a0 << 0x20\n 20193: a0 = a0 | a1\n 20196: jump @326 if a0 != 0\n      : @323 (gas: 5)\n 20200: u64 [sp + 0x88] = a2\n 20204: i32 a0 = a2 + 0\n 20206: a1 = 0x20\n 20209: u64 [sp + 0x80] = a0\n 20213: ra = 274, jump @0\n      : @324 [@dyn 137] (gas: 50)\n 20219: u8 [a0 + 31] = 0\n 20222: u8 [a0 + 30] = 0\n 20225: u8 [a0 + 29] = 0\n 20228: u8 [a0 + 28] = 0\n 20231: u8 [a0 + 27] = 0\n 20234: u8 [a0 + 26] = 0\n 20237: u8 [a0 + 25] = 0\n 20240: u8 [a0 + 24] = 0\n 20243: u8 [a0 + 23] = 0\n 20246: u8 [a0 + 22] = 0\n 20249: u8 [a0 + 21] = 0\n 20252: u8 [a0 + 20] = 0\n 20255: u8 [a0 + 19] = 0\n 20258: u8 [a0 + 18] = 0\n 20261: u8 [a0 + 17] = 0\n 20264: u8 [a0 + 16] = 0\n 20267: u8 [a0 + 15] = 0\n 20270: u8 [a0 + 14] = 0\n 20273: u8 [a0 + 13] = 0\n 20276: u8 [a0 + 12] = 0\n 20279: u8 [a0 + 11] = 0\n 20282: u8 [a0 + 10] = 0\n 20285: u8 [a0 + 9] = 0\n 20288: u8 [a0 + 8] = 0\n 20291: u8 [a0 + 7] = 0\n 20294: u8 [a0 + 6] = 0\n 20297: u8 [a0 + 5] = 0\n 20300: u8 [a0 + 4] = 0\n 20303: u8 [a0 + 3] = 0xa0\n 20308: u8 [a0 + 2] = 0x79\n 20312: u8 [a0 + 1] = 0xc3\n 20317: u8 [a0 + 0] = 0x8\n 20320: a1 = u64 [sp + 0x88]\n 20324: a0 = a1 + 0x4\n 20327: a1 = a0 <u a1\n 20330: a3 = u64 [sp + 0x98]\n 20334: a2 = a3 + a1\n 20337: a3 = a2 <u a3\n 20340: a3 = a1 if a1 == 0\n 20343: a3 = a3 + s1\n 20346: a1 = a3 <u s1\n 20349: a4 = u64 [sp + 0x90]\n 20353: a4 = a4 + a1\n 20356: u64 [sp + 0xa8] = a2\n 20360: u64 [sp + 0xa0] = a0\n 20364: u64 [sp + 0xb0] = a3\n 20368: a0 = sp + 0xc0\n 20372: a1 = sp + 0xa0\n 20376: u64 [sp + 0xb8] = a4\n 20380: ra = 276, jump @304\n      : @325 [@dyn 138] (gas: 30)\n 20386: a0 = u64 [sp + 0xc8]\n 20390: t0 = u64 [sp + 0xd8]\n 20394: t1 = u64 [sp + 0xc0]\n 20398: a3 = u64 [sp + 0xd0]\n 20402: a1 = u64 [sp + 0x98]\n 20406: a4 = a0 ^ a1\n 20409: a5 = a0 <u a1\n 20412: t2 = a1\n 20414: a2 = u64 [sp + 0x88]\n 20418: a1 = t1 <u a2\n 20421: a5 = a1 if a4 == 0\n 20424: a4 = a3 - s1\n 20427: a3 = a3 <u s1\n 20430: s1 = u64 [sp + 0x90]\n 20434: s1 = t0 - s1\n 20437: s1 = s1 - a3\n 20440: a3 = a4 <u a5\n 20443: s1 = s1 - a3\n 20446: a4 = a4 - a5\n 20449: a0 = a0 - t2\n 20452: a1 = a0 - a1\n 20455: a0 = t1 - a2\n 20458: a1 = a1 | s1\n 20461: a2 = a0 | a4\n 20464: a2 = a2 | a1\n 20467: a1 = a1 | a4\n 20470: a2 = a2 >> 0x20\n 20473: a1 = a1 << 0x20\n 20476: a1 = a1 | a2\n 20479: jump @327 if a1 == 0\n      : @326 (gas: 1)\n 20482: trap\n      : @327 (gas: 4)\n 20483: i32 s1 = a0 + 0\n 20485: a0 = u64 [sp + 0x80]\n 20489: a1 = s1\n 20491: ra = 278, jump @0\n      : @328 [@dyn 139] (gas: 6)\n 20497: i32 a1 = a0 + 0\n 20499: a0 = 0x1\n 20502: a2 = s1\n 20504: ra = 0x118\n 20508: ecalli 13 // 'seal_return'\n 20510: fallthrough\n      : @329 [@dyn 140] (gas: 9)\n 20511: a2 = u64 [a1 + 0x18]\n 20514: a3 = u64 [a1 + 0x10]\n 20517: a4 = u64 [a1 + 0x8]\n 20520: a1 = u64 [a1]\n 20522: u64 [a0 + 0x18] = a2\n 20525: u64 [a0 + 0x10] = a3\n 20528: u64 [a0 + 0x8] = a4\n 20531: u64 [a0] = a1\n 20533: ret\n      : @330 [@dyn 141] (gas: 130)\n 20535: a1 = u8 [a0 + 0x19]\n 20538: a2 = u8 [a0 + 0x18]\n 20541: a3 = u8 [a0 + 0x1a]\n 20544: a4 = u8 [a0 + 0x1b]\n 20547: a1 = a1 << 0x8\n 20550: a1 = a1 | a2\n 20553: a3 = a3 << 0x10\n 20556: a4 = a4 << 0x18\n 20559: a3 = a3 | a4\n 20562: a1 = a1 | a3\n 20565: a2 = u8 [a0 + 0x1d]\n 20568: a3 = u8 [a0 + 0x1c]\n 20571: a4 = u8 [a0 + 0x1e]\n 20574: a5 = u8 [a0 + 0x1f]\n 20577: a2 = a2 << 0x8\n 20580: a2 = a2 | a3\n 20583: a4 = a4 << 0x10\n 20586: a5 = a5 << 0x18\n 20589: a4 = a4 | a5\n 20592: a2 = a2 | a4\n 20595: a2 = a2 << 0x20\n 20598: t0 = a2 | a1\n 20601: a2 = u8 [a0 + 0x11]\n 20604: a3 = u8 [a0 + 0x10]\n 20607: a4 = u8 [a0 + 0x12]\n 20610: a5 = u8 [a0 + 0x13]\n 20613: a2 = a2 << 0x8\n 20616: a2 = a2 | a3\n 20619: a4 = a4 << 0x10\n 20622: a5 = a5 << 0x18\n 20625: a4 = a4 | a5\n 20628: a2 = a2 | a4\n 20631: a3 = u8 [a0 + 0x15]\n 20634: a4 = u8 [a0 + 0x14]\n 20637: a5 = u8 [a0 + 0x16]\n 20640: s1 = u8 [a0 + 0x17]\n 20643: a3 = a3 << 0x8\n 20646: a3 = a3 | a4\n 20649: a5 = a5 << 0x10\n 20652: s1 = s1 << 0x18\n 20655: a5 = a5 | s1\n 20658: a3 = a3 | a5\n 20661: a3 = a3 << 0x20\n 20664: a2 = a2 | a3\n 20667: a3 = u8 [a0 + 0x9]\n 20670: a4 = u8 [a0 + 0x8]\n 20673: a5 = u8 [a0 + 0xa]\n 20676: s1 = u8 [a0 + 0xb]\n 20679: a3 = a3 << 0x8\n 20682: a3 = a3 | a4\n 20685: a5 = a5 << 0x10\n 20688: s1 = s1 << 0x18\n 20691: a5 = a5 | s1\n 20694: a3 = a3 | a5\n 20697: a4 = u8 [a0 + 0xd]\n 20700: a5 = u8 [a0 + 0xc]\n 20703: s1 = u8 [a0 + 0xe]\n 20706: a1 = u8 [a0 + 0xf]\n 20709: a4 = a4 << 0x8\n 20712: a4 = a4 | a5\n 20715: s1 = s1 << 0x10\n 20718: a1 = a1 << 0x18\n 20721: a1 = a1 | s1\n 20724: a1 = a1 | a4\n 20727: a1 = a1 << 0x20\n 20730: a3 = a3 | a1\n 20733: a1 = u8 [a0 + 0x1]\n 20736: a4 = u8 [a0]\n 20738: a5 = u8 [a0 + 0x2]\n 20741: s1 = u8 [a0 + 0x3]\n 20744: a1 = a1 << 0x8\n 20747: a1 = a1 | a4\n 20750: a5 = a5 << 0x10\n 20753: s1 = s1 << 0x18\n 20756: a5 = a5 | s1\n 20759: a1 = a1 | a5\n 20762: a4 = u8 [a0 + 0x5]\n 20765: a5 = u8 [a0 + 0x4]\n 20768: s1 = u8 [a0 + 0x6]\n 20771: a0 = u8 [a0 + 0x7]\n 20774: a4 = a4 << 0x8\n 20777: a4 = a4 | a5\n 20780: s1 = s1 << 0x10\n 20783: a0 = a0 << 0x18\n 20786: a0 = a0 | s1\n 20789: a0 = a0 | a4\n 20792: a0 = a0 << 0x20\n 20795: a0 = a0 | a1\n 20798: t1 = reverse a0\n 20800: t2 = reverse a3\n 20802: s1 = reverse a2\n 20804: a5 = reverse t0\n 20806: a1 = u64 [sp + 0x18]\n 20809: a0 = a1 + 0x1f\n 20812: a1 = a0 <u a1\n 20815: a3 = u64 [sp + 0x20]\n 20818: a2 = a3 + a1\n 20821: a3 = a2 <u a3\n 20824: a3 = a1 if a1 == 0\n 20827: a1 = u64 [sp + 0x28]\n 20830: a3 = a3 + a1\n 20833: a1 = a3 <u a1\n 20836: a4 = u64 [sp + 0x30]\n 20839: a1 = a1 + a4\n 20842: a0 = a0 & 0xffffffffffffffe0\n 20845: a0 = a0 + a5\n 20848: u64 [sp + 0x28] = a5\n 20851: u64 [sp + 0x10] = a0\n 20854: a4 = a0 <u a5\n 20857: a2 = a2 + s1\n 20860: a5 = a2 + a4\n 20863: a2 = a5 ^ s1\n 20866: u64 [sp + 0x30] = s1\n 20869: a0 = a5 <u s1\n 20872: a0 = a4 if a2 == 0\n 20875: a3 = a3 + t2\n 20878: a4 = a3 + a0\n 20881: s1 = a4 <u a3\n 20884: a2 = a3 <u t2\n 20887: a1 = a1 + t1\n 20890: a1 = a1 + a2\n 20893: s1 = s1 + a1\n 20896: a1 = a4 >u 0\n 20898: a2 = s1 >u 0\n 20900: a2 = a1 if s1 == 0\n 20903: a1 = a4 | s1\n 20906: u64 [sp + 0x8] = a5\n 20909: a3 = a5 >u 0\n 20911: a3 = a2 if a1 != 0\n 20914: jump @334 if a3 != 0\n      : @331 (gas: 8)\n 20918: a1 = a4 <u t2\n 20921: a2 = s1 ^ t1\n 20924: a3 = s1 <u t1\n 20927: a3 = a1 if a2 == 0\n 20930: a1 = a4 ^ t2\n 20933: a1 = a1 | a2\n 20936: a0 = a3 if a1 != 0\n 20939: jump @334 if a0 != 0\n      : @332 (gas: 6)\n 20943: a0 = 0x40\n 20946: a1 = 0x20\n 20949: u64 [sp + 0x20] = t2\n 20952: u64 [sp + 0x18] = t1\n 20955: u64 [sp] = a4\n 20957: ra = 284, jump @0\n      : @333 [@dyn 142] (gas: 82)\n 20963: a1 = reverse s1\n 20965: a2 = u64 [sp]\n 20967: a2 = reverse a2\n 20969: a3 = u64 [sp + 0x8]\n 20972: a3 = reverse a3\n 20974: a4 = u64 [sp + 0x10]\n 20977: a4 = reverse a4\n 20979: u8 [a0 + 0x18] = a4\n 20982: a5 = a4 >> 0x38\n 20985: u8 [a0 + 0x1f] = a5\n 20988: a5 = a4 >> 0x30\n 20991: u8 [a0 + 0x1e] = a5\n 20994: a5 = a4 >> 0x28\n 20997: u8 [a0 + 0x1d] = a5\n 21000: a5 = a4 >> 0x20\n 21003: u8 [a0 + 0x1c] = a5\n 21006: a5 = a4 >> 0x18\n 21009: u8 [a0 + 0x1b] = a5\n 21012: a5 = a4 >> 0x10\n 21015: u8 [a0 + 0x1a] = a5\n 21018: a4 = a4 >> 0x8\n 21021: u8 [a0 + 0x19] = a4\n 21024: u8 [a0 + 0x10] = a3\n 21027: a4 = a3 >> 0x38\n 21030: u8 [a0 + 0x17] = a4\n 21033: a4 = a3 >> 0x30\n 21036: u8 [a0 + 0x16] = a4\n 21039: a4 = a3 >> 0x28\n 21042: u8 [a0 + 0x15] = a4\n 21045: a4 = a3 >> 0x20\n 21048: u8 [a0 + 0x14] = a4\n 21051: a4 = a3 >> 0x18\n 21054: u8 [a0 + 0x13] = a4\n 21057: a4 = a3 >> 0x10\n 21060: u8 [a0 + 0x12] = a4\n 21063: a3 = a3 >> 0x8\n 21066: u8 [a0 + 0x11] = a3\n 21069: u8 [a0 + 0x8] = a2\n 21072: a3 = a2 >> 0x38\n 21075: u8 [a0 + 0xf] = a3\n 21078: a3 = a2 >> 0x30\n 21081: u8 [a0 + 0xe] = a3\n 21084: a3 = a2 >> 0x28\n 21087: u8 [a0 + 0xd] = a3\n 21090: a3 = a2 >> 0x20\n 21093: u8 [a0 + 0xc] = a3\n 21096: a3 = a2 >> 0x18\n 21099: u8 [a0 + 0xb] = a3\n 21102: a3 = a2 >> 0x10\n 21105: u8 [a0 + 0xa] = a3\n 21108: a2 = a2 >> 0x8\n 21111: u8 [a0 + 0x9] = a2\n 21114: u8 [a0] = a1\n 21116: a2 = a1 >> 0x38\n 21119: u8 [a0 + 0x7] = a2\n 21122: a2 = a1 >> 0x30\n 21125: u8 [a0 + 0x6] = a2\n 21128: a2 = a1 >> 0x28\n 21131: u8 [a0 + 0x5] = a2\n 21134: a2 = a1 >> 0x20\n 21137: u8 [a0 + 0x4] = a2\n 21140: a2 = a1 >> 0x18\n 21143: u8 [a0 + 0x3] = a2\n 21146: a2 = a1 >> 0x10\n 21149: u8 [a0 + 0x2] = a2\n 21152: a1 = a1 >> 0x8\n 21155: u8 [a0 + 0x1] = a1\n 21158: a0 = u64 [sp + 0x38]\n 21161: a1 = u64 [sp + 0x28]\n 21164: u64 [a0] = a1\n 21166: a1 = u64 [sp + 0x18]\n 21169: u64 [a0 + 0x18] = a1\n 21172: a1 = u64 [sp + 0x30]\n 21175: u64 [a0 + 0x8] = a1\n 21178: a1 = u64 [sp + 0x20]\n 21181: u64 [a0 + 0x10] = a1\n 21184: sp = s0 + 0xffffffffffffff60\n 21188: ra = u64 [sp + 0x98]\n 21192: s0 = u64 [sp + 0x90]\n 21196: s1 = u64 [sp + 0x88]\n 21200: sp = sp + 0xa0\n 21204: ret\n      : @334 (gas: 8)\n 21206: u64 [sp + 112] = 0\n 21209: u64 [sp + 104] = 0\n 21212: u64 [sp + 96] = 0\n 21215: a0 = 0x4e487b7100000000\n 21225: a1 = sp + 0x60\n 21228: u64 [sp + 0x78] = a0\n 21231: a0 = 0\n 21233: ra = 286, jump @8\n      : @335 [@dyn 143] (gas: 7)\n 21239: u64 [sp + 88] = 0\n 21242: u64 [sp + 80] = 0\n 21245: u64 [sp + 64] = 0x41\n 21249: a0 = 0x4\n 21252: a1 = sp + 0x40\n 21255: u64 [sp + 72] = 0\n 21258: ra = 288, jump @8\n      : @336 [@dyn 144] (gas: 3)\n 21264: a1 = 0x24\n 21267: a0 = 0\n 21269: ra = 290, jump @0\n      : @337 [@dyn 145] (gas: 6)\n 21275: i32 a1 = a0 + 0\n 21277: a0 = 0x1\n 21280: a2 = 0x24\n 21283: ra = 0x124\n 21287: ecalli 13 // 'seal_return'\n 21289: fallthrough\n      : @338 [@dyn 146] (gas: 7)\n 21290: a3 = u64 [a1 + 0x18]\n 21293: a4 = u64 [a1 + 0x10]\n 21296: a2 = u64 [a1 + 0x8]\n 21299: a3 = a3 | a4\n 21302: a4 = a2 <u 0x1\n 21305: a4 = 0 if a3 != 0\n 21307: jump @340 if a4 == 0\n      : @339 (gas: 16)\n 21310: a1 = u64 [a1]\n 21312: a3 = a1 + 0x1f\n 21315: a1 = a3 <u a1\n 21318: a1 = a1 + a2\n 21321: a1 = a1 & 0x1\n 21324: a3 = a3 & 0xffffffffffffffe0\n 21327: a2 = a3 + 0x20\n 21330: a3 = a2 <u a3\n 21333: a4 = a1 + a3\n 21336: a1 = a4 <u a1\n 21339: a1 = a3 if a3 == 0\n 21342: u64 [a0 + 24] = 0\n 21345: u64 [a0] = a2\n 21347: u64 [a0 + 0x8] = a4\n 21350: u64 [a0 + 0x10] = a1\n 21353: ret\n      : @340 (gas: 13)\n 21355: sp = sp + 0xffffffffffffffb0\n 21358: u64 [sp + 0x48] = ra\n 21361: u64 [sp + 0x40] = s0\n 21364: s0 = sp + 0x50\n 21367: sp = sp & 0xfffffffffffffff0\n 21370: u64 [sp + 48] = 0\n 21373: u64 [sp + 40] = 0\n 21376: u64 [sp + 32] = 0\n 21379: a0 = 0x4e487b7100000000\n 21389: a1 = sp + 0x20\n 21392: u64 [sp + 0x38] = a0\n 21395: a0 = 0\n 21397: ra = 294, jump @8\n      : @341 [@dyn 147] (gas: 7)\n 21403: u64 [sp + 24] = 0\n 21406: u64 [sp + 16] = 0\n 21409: u64 [sp + 0] = 0x41\n 21412: a0 = 0x4\n 21415: a1 = sp\n 21417: u64 [sp + 8] = 0\n 21420: ra = 296, jump @8\n      : @342 [@dyn 148] (gas: 3)\n 21426: a1 = 0x24\n 21429: a0 = 0\n 21431: ra = 298, jump @0\n      : @343 [@dyn 149] (gas: 6)\n 21437: i32 a1 = a0 + 0\n 21439: a0 = 0x1\n 21442: a2 = 0x24\n 21445: ra = 0x12c\n 21449: ecalli 13 // 'seal_return'\n 21451: fallthrough\n      : @344 [@dyn 150] (gas: 16)\n 21452: sp = sp + 0xffffffffffffff20\n 21456: u64 [sp + 0xd8] = ra\n 21460: u64 [sp + 0xd0] = s0\n 21464: u64 [sp + 0xc8] = s1\n 21468: s0 = sp + 0xe0\n 21472: sp = sp & 0xfffffffffffffff0\n 21475: a3 = u64 [a1 + 0x18]\n 21478: a2 = u64 [a1 + 0x10]\n 21481: a4 = u64 [a1 + 0x8]\n 21484: u64 [sp + 0x10] = a2\n 21487: u64 [sp + 0x8] = a3\n 21490: a2 = a2 | a3\n 21493: a3 = a4 <u 0x1\n 21496: a3 = 0 if a2 != 0\n 21498: u64 [sp + 0x38] = a0\n 21501: jump @350 if a3 == 0\n      : @345 (gas: 38)\n 21505: s1 = u64 [a1]\n 21507: a0 = s1 + 0x1f\n 21510: a1 = a0 <u s1\n 21513: u64 [sp + 0x18] = a4\n 21516: a1 = a1 + a4\n 21519: a1 = a1 & 0x1\n 21522: a0 = a0 & 0xffffffffffffffe0\n 21525: a2 = a0 + 0x20\n 21528: a0 = a2 <u a0\n 21531: a3 = a1 + a0\n 21534: a4 = a3 <u a1\n 21537: a4 = a0 if a0 == 0\n 21540: u64 [sp + 152] = 0\n 21544: u64 [sp + 0x80] = a2\n 21548: u64 [sp + 0x88] = a3\n 21552: a0 = sp + 0xa0\n 21556: a1 = sp + 0x80\n 21560: u64 [sp + 0x90] = a4\n 21564: ra = 0x12e\n 21568: sp = sp + 0xffffffffffffff60\n 21572: u64 [sp + 0x98] = ra\n 21576: u64 [sp + 0x90] = s0\n 21580: u64 [sp + 0x88] = s1\n 21584: s0 = sp + 0xa0\n 21588: sp = sp & 0xfffffffffffffff0\n 21591: a2 = u64 [a1 + 0x18]\n 21594: u64 [sp + 0x30] = a2\n 21597: a2 = u64 [a1 + 0x10]\n 21600: u64 [sp + 0x28] = a2\n 21603: a2 = u64 [a1 + 0x8]\n 21606: u64 [sp + 0x20] = a2\n 21609: a1 = u64 [a1]\n 21611: u64 [sp + 0x18] = a1\n 21614: u64 [sp + 0x38] = a0\n 21617: a0 = 0x40\n 21620: a1 = 0x20\n 21623: ra = 0x11a\n 21627: jump @0\n      : @346 [@dyn 151] (gas: 15)\n 21630: a0 = u64 [sp + 0xb8]\n 21634: a2 = u64 [sp + 0xb0]\n 21638: a1 = u64 [sp + 0xa8]\n 21642: a3 = u64 [sp + 0xa0]\n 21646: u64 [sp + 0x28] = a0\n 21649: u64 [sp + 0x20] = a1\n 21652: a0 = a0 | a1\n 21655: a1 = a3 | a2\n 21658: a1 = a1 | a0\n 21661: a1 = a1 >> 0x20\n 21664: u64 [sp + 0x30] = a2\n 21667: a0 = a0 | a2\n 21670: a0 = a0 << 0x20\n 21673: a0 = a0 | a1\n 21676: jump @349 if a0 != 0\n      : @347 (gas: 4)\n 21680: i32 a0 = a3 + 0\n 21682: a1 = 0x20\n 21685: u64 [sp] = a3\n 21687: ra = 304, jump @0\n      : @348 [@dyn 152] (gas: 82)\n 21693: a1 = u64 [sp + 0x8]\n 21696: a1 = reverse a1\n 21698: a2 = u64 [sp + 0x10]\n 21701: a2 = reverse a2\n 21703: a3 = u64 [sp + 0x18]\n 21706: a3 = reverse a3\n 21708: a4 = reverse s1\n 21710: a5 = a4 >> 0x38\n 21713: u8 [a0 + 0x1f] = a5\n 21716: a5 = a4 >> 0x30\n 21719: u8 [a0 + 0x1e] = a5\n 21722: a5 = a4 >> 0x28\n 21725: u8 [a0 + 0x1d] = a5\n 21728: a5 = a4 >> 0x20\n 21731: u8 [a0 + 0x1c] = a5\n 21734: a5 = a4 >> 0x18\n 21737: u8 [a0 + 0x1b] = a5\n 21740: a5 = a4 >> 0x10\n 21743: u8 [a0 + 0x1a] = a5\n 21746: a5 = a4 >> 0x8\n 21749: u8 [a0 + 0x19] = a5\n 21752: u8 [a0 + 0x18] = a4\n 21755: u8 [a0 + 0x10] = a3\n 21758: a4 = a3 >> 0x38\n 21761: u8 [a0 + 0x17] = a4\n 21764: a4 = a3 >> 0x30\n 21767: u8 [a0 + 0x16] = a4\n 21770: a4 = a3 >> 0x28\n 21773: u8 [a0 + 0x15] = a4\n 21776: a4 = a3 >> 0x20\n 21779: u8 [a0 + 0x14] = a4\n 21782: a4 = a3 >> 0x18\n 21785: u8 [a0 + 0x13] = a4\n 21788: a4 = a3 >> 0x10\n 21791: u8 [a0 + 0x12] = a4\n 21794: a3 = a3 >> 0x8\n 21797: u8 [a0 + 0x11] = a3\n 21800: u8 [a0 + 0x8] = a2\n 21803: a3 = a2 >> 0x38\n 21806: u8 [a0 + 0xf] = a3\n 21809: a3 = a2 >> 0x30\n 21812: u8 [a0 + 0xe] = a3\n 21815: a3 = a2 >> 0x28\n 21818: u8 [a0 + 0xd] = a3\n 21821: a3 = a2 >> 0x20\n 21824: u8 [a0 + 0xc] = a3\n 21827: a3 = a2 >> 0x18\n 21830: u8 [a0 + 0xb] = a3\n 21833: a3 = a2 >> 0x10\n 21836: u8 [a0 + 0xa] = a3\n 21839: a2 = a2 >> 0x8\n 21842: u8 [a0 + 0x9] = a2\n 21845: u8 [a0] = a1\n 21847: a2 = a1 >> 0x38\n 21850: u8 [a0 + 0x7] = a2\n 21853: a2 = a1 >> 0x30\n 21856: u8 [a0 + 0x6] = a2\n 21859: a2 = a1 >> 0x28\n 21862: u8 [a0 + 0x5] = a2\n 21865: a2 = a1 >> 0x20\n 21868: u8 [a0 + 0x4] = a2\n 21871: a2 = a1 >> 0x18\n 21874: u8 [a0 + 0x3] = a2\n 21877: a2 = a1 >> 0x10\n 21880: u8 [a0 + 0x2] = a2\n 21883: a1 = a1 >> 0x8\n 21886: u8 [a0 + 0x1] = a1\n 21889: a0 = u64 [sp + 0x38]\n 21892: a1 = u64 [sp]\n 21894: u64 [a0] = a1\n 21896: a1 = u64 [sp + 0x28]\n 21899: u64 [a0 + 0x18] = a1\n 21902: a1 = u64 [sp + 0x20]\n 21905: u64 [a0 + 0x8] = a1\n 21908: a1 = u64 [sp + 0x30]\n 21911: u64 [a0 + 0x10] = a1\n 21914: sp = s0 + 0xffffffffffffff20\n 21918: ra = u64 [sp + 0xd8]\n 21922: s0 = u64 [sp + 0xd0]\n 21926: s1 = u64 [sp + 0xc8]\n 21930: sp = sp + 0xe0\n 21934: ret\n      : @349 (gas: 1)\n 21936: trap\n      : @350 (gas: 8)\n 21937: u64 [sp + 112] = 0\n 21940: u64 [sp + 104] = 0\n 21943: u64 [sp + 96] = 0\n 21946: a0 = 0x4e487b7100000000\n 21956: a1 = sp + 0x60\n 21959: u64 [sp + 0x78] = a0\n 21962: a0 = 0\n 21964: ra = 306, jump @8\n      : @351 [@dyn 153] (gas: 7)\n 21970: u64 [sp + 88] = 0\n 21973: u64 [sp + 80] = 0\n 21976: u64 [sp + 64] = 0x41\n 21980: a0 = 0x4\n 21983: a1 = sp + 0x40\n 21986: u64 [sp + 72] = 0\n 21989: ra = 308, jump @8\n      : @352 [@dyn 154] (gas: 3)\n 21995: a1 = 0x24\n 21998: a0 = 0\n 22000: ra = 310, jump @0\n      : @353 [@dyn 155] (gas: 6)\n 22006: i32 a1 = a0 + 0\n 22008: a0 = 0x1\n 22011: a2 = 0x24\n 22014: ra = 0x138\n 22018: ecalli 13 // 'seal_return'\n 22020: fallthrough\n      : @354 [@dyn 156] (gas: 6)\n 22021: u64 [a0 + 24] = 0\n 22024: u64 [a0 + 16] = 0\n 22027: u64 [a0 + 8] = 0\n 22030: a1 = 0x60\n 22033: u64 [a0] = a1\n 22035: ret\n      : @355 (gas: 1)\n 22037: jump @364 if a0 == 0\n      : @356 (gas: 9)\n 22041: u64 [sp + 0x20] = s1\n 22044: ecalli 12 // 'return_data_size'\n 22046: u64 [sp + 88] = 0\n 22049: u64 [sp + 80] = 0\n 22052: u64 [sp + 0x40] = a0\n 22055: a0 = sp + 0x60\n 22058: a1 = sp + 0x40\n 22061: u64 [sp + 72] = 0\n 22064: ra = 314, jump @344\n      : @357 [@dyn 157] (gas: 9)\n 22070: a0 = u64 [sp + 0x78]\n 22073: u64 [sp + 0x38] = a0\n 22076: a0 = u64 [sp + 0x70]\n 22079: u64 [sp + 0x30] = a0\n 22082: a0 = u64 [sp + 0x68]\n 22085: u64 [sp + 0x28] = a0\n 22088: s1 = u64 [sp + 0x60]\n 22091: ecalli 12 // 'return_data_size'\n 22093: fallthrough\n      : @358 (gas: 20)\n 22094: a1 = s1 + 0x20\n 22097: u64 [sp + 0x18] = s1\n 22100: a2 = a1 <u s1\n 22103: a4 = u64 [sp + 0x28]\n 22106: a3 = a4 + a2\n 22109: a4 = a3 <u a4\n 22112: a4 = a2 if a2 == 0\n 22115: a2 = u64 [sp + 0x30]\n 22118: a4 = a4 + a2\n 22121: a2 = a4 <u a2\n 22124: a5 = u64 [sp + 0x38]\n 22127: a2 = a2 + a5\n 22130: a5 = a1 | a4\n 22133: a2 = a2 | a3\n 22136: a5 = a5 | a2\n 22139: a5 = a5 >> 0x20\n 22142: a2 = a2 | a4\n 22145: a2 = a2 << 0x20\n 22148: a2 = a2 | a5\n 22151: jump @363 if a2 != 0\n      : @359 (gas: 3)\n 22154: s1 = a0\n 22156: a0 = a0 >> 0x20\n 22159: jump @363 if a0 != 0\n      : @360 (gas: 4)\n 22162: i32 a0 = a1 + 0\n 22164: i32 a1 = s1 + 0\n 22166: u64 [sp + 0x10] = a1\n 22169: ra = 316, jump @0\n      : @361 [@dyn 158] (gas: 6)\n 22175: u32 [sp + 0x80] = s1\n 22179: i32 a0 = a0 + 0\n 22181: i32 a1 = sp + 0x80\n 22185: a2 = 0\n 22187: ecalli 11 // 'return_data_copy'\n 22189: fallthrough\n      : @362 (gas: 8)\n 22190: a0 = i32 [sp + 0x80]\n 22194: s1 = u64 [sp + 0x20]\n 22197: a1 = u64 [sp + 0x38]\n 22200: a2 = u64 [sp + 0x30]\n 22203: a3 = u64 [sp + 0x28]\n 22206: a4 = u64 [sp + 0x18]\n 22209: a5 = u64 [sp + 0x10]\n 22212: jump @365 if a0 >=u a5\n      : @363 (gas: 1)\n 22215: trap\n      : @364 (gas: 5)\n 22216: a3 = 0\n 22218: a2 = 0\n 22220: a1 = 0\n 22222: a4 = 0x60\n 22225: fallthrough\n      : @365 (gas: 10)\n 22226: u64 [s1] = a4\n 22228: u64 [s1 + 0x8] = a3\n 22231: u64 [s1 + 0x10] = a2\n 22234: u64 [s1 + 0x18] = a1\n 22237: sp = s0 + 0xffffffffffffff60\n 22241: ra = u64 [sp + 0x98]\n 22245: s0 = u64 [sp + 0x90]\n 22249: s1 = u64 [sp + 0x88]\n 22253: sp = sp + 0xa0\n 22257: ret\n      : @366 (gas: 17)\n 22259: sp = sp + 0xffffffffffffffa0\n 22262: u64 [sp + 0x58] = ra\n 22265: u64 [sp + 0x50] = s0\n 22268: u64 [sp + 0x48] = s1\n 22271: a3 = u64 [a1 + 0x18]\n 22274: a4 = u64 [a1 + 0x10]\n 22277: a5 = u64 [a1 + 0x8]\n 22280: s1 = u64 [a1]\n 22282: a1 = a5 | a3\n 22285: a2 = s1 | a4\n 22288: a2 = a2 | a1\n 22291: a2 = a2 >> 0x20\n 22294: a1 = a1 | a4\n 22297: a1 = a1 << 0x20\n 22300: a1 = a1 | a2\n 22303: u64 [sp + 0x28] = a0\n 22306: jump @373 if a1 != 0\n      : @367 (gas: 19)\n 22310: a0 = s1 + 0x20\n 22313: u64 [sp + 0x30] = a0\n 22316: a0 = a0 <u s1\n 22319: a1 = a5 + a0\n 22322: u64 [sp + 0x40] = a1\n 22325: u64 [sp + 0x8] = a5\n 22328: s0 = a1 <u a5\n 22331: s0 = a0 if a0 == 0\n 22334: s0 = s0 + a4\n 22337: u64 [sp + 0x10] = a4\n 22340: a0 = s0 <u a4\n 22343: u64 [sp + 0x18] = a3\n 22346: a0 = a0 + a3\n 22349: u64 [sp + 0x38] = a0\n 22352: u64 [sp] = s1\n 22354: i32 a0 = s1 + 0\n 22356: a1 = 0x20\n 22359: s1 = 0x20\n 22362: ra = 318, jump @0\n      : @368 [@dyn 159] (gas: 45)\n 22368: u8 [a0 + 0x1f] = s1\n 22371: a1 = u64 [sp + 0x30]\n 22374: s1 = a1\n 22376: a1 = a1 | s0\n 22379: a2 = u64 [sp + 0x40]\n 22382: a4 = u64 [sp + 0x38]\n 22385: a2 = a2 | a4\n 22388: a1 = a1 | a2\n 22391: a1 = a1 >> 0x20\n 22394: u64 [sp + 0x20] = s0\n 22397: a2 = a2 | s0\n 22400: a2 = a2 << 0x20\n 22403: a1 = a1 | a2\n 22406: u8 [a0 + 30] = 0\n 22409: u8 [a0 + 29] = 0\n 22412: u8 [a0 + 28] = 0\n 22415: u8 [a0 + 27] = 0\n 22418: u8 [a0 + 26] = 0\n 22421: u8 [a0 + 25] = 0\n 22424: u8 [a0 + 24] = 0\n 22427: u8 [a0 + 23] = 0\n 22430: u8 [a0 + 22] = 0\n 22433: u8 [a0 + 21] = 0\n 22436: u8 [a0 + 20] = 0\n 22439: u8 [a0 + 19] = 0\n 22442: u8 [a0 + 18] = 0\n 22445: u8 [a0 + 17] = 0\n 22448: u8 [a0 + 16] = 0\n 22451: u8 [a0 + 15] = 0\n 22454: u8 [a0 + 14] = 0\n 22457: u8 [a0 + 13] = 0\n 22460: u8 [a0 + 12] = 0\n 22463: u8 [a0 + 11] = 0\n 22466: u8 [a0 + 10] = 0\n 22469: u8 [a0 + 9] = 0\n 22472: u8 [a0 + 8] = 0\n 22475: u8 [a0 + 7] = 0\n 22478: u8 [a0 + 6] = 0\n 22481: u8 [a0 + 5] = 0\n 22484: u8 [a0 + 4] = 0\n 22487: u8 [a0 + 3] = 0\n 22490: u8 [a0 + 2] = 0\n 22493: u8 [a0 + 1] = 0\n 22496: u8 [a0 + 0] = 0\n 22498: jump @373 if a1 != 0\n      : @369 (gas: 4)\n 22502: i32 s0 = s1 + 0\n 22504: a1 = 0x20\n 22507: a0 = s0\n 22509: ra = 320, jump @0\n      : @370 [@dyn 160] (gas: 41)\n 22515: u8 [a0 + 31] = 0xf\n 22519: u8 [a0 + 30] = 0\n 22522: u8 [a0 + 29] = 0\n 22525: u8 [a0 + 28] = 0\n 22528: u8 [a0 + 27] = 0\n 22531: u8 [a0 + 26] = 0\n 22534: u8 [a0 + 25] = 0\n 22537: u8 [a0 + 24] = 0\n 22540: u8 [a0 + 23] = 0\n 22543: u8 [a0 + 22] = 0\n 22546: u8 [a0 + 21] = 0\n 22549: u8 [a0 + 20] = 0\n 22552: u8 [a0 + 19] = 0\n 22555: u8 [a0 + 18] = 0\n 22558: u8 [a0 + 17] = 0\n 22561: u8 [a0 + 16] = 0\n 22564: u8 [a0 + 15] = 0\n 22567: u8 [a0 + 14] = 0\n 22570: u8 [a0 + 13] = 0\n 22573: u8 [a0 + 12] = 0\n 22576: u8 [a0 + 11] = 0\n 22579: u8 [a0 + 10] = 0\n 22582: u8 [a0 + 9] = 0\n 22585: u8 [a0 + 8] = 0\n 22588: u8 [a0 + 7] = 0\n 22591: u8 [a0 + 6] = 0\n 22594: u8 [a0 + 5] = 0\n 22597: u8 [a0 + 4] = 0\n 22600: u8 [a0 + 3] = 0\n 22603: u8 [a0 + 2] = 0\n 22606: u8 [a0 + 1] = 0\n 22609: a1 = u64 [sp + 0x20]\n 22612: a2 = u64 [sp + 0x38]\n 22615: a1 = a1 | a2\n 22618: a2 = 0xffffffe0\n 22628: a2 = s1 <u a2\n 22631: a3 = u64 [sp + 0x40]\n 22634: a2 = 0 if a3 != 0\n 22636: a2 = 0 if a1 != 0\n 22638: u8 [a0 + 0] = 0\n 22640: jump @373 if a2 == 0\n      : @371 (gas: 3)\n 22644: i32 a0 = s0 + 0x20\n 22647: a1 = 0x20\n 22650: ra = 322, jump @0\n      : @372 [@dyn 161] (gas: 54)\n 22656: u8 [a0 + 31] = 0\n 22659: u8 [a0 + 30] = 0\n 22662: u8 [a0 + 29] = 0\n 22665: u8 [a0 + 28] = 0\n 22668: u8 [a0 + 27] = 0\n 22671: u8 [a0 + 26] = 0\n 22674: u8 [a0 + 25] = 0\n 22677: u8 [a0 + 24] = 0\n 22680: u8 [a0 + 23] = 0\n 22683: u8 [a0 + 22] = 0\n 22686: u8 [a0 + 21] = 0\n 22689: u8 [a0 + 20] = 0\n 22692: u8 [a0 + 19] = 0\n 22695: u8 [a0 + 18] = 0\n 22698: u8 [a0 + 17] = 0\n 22701: u8 [a0 + 16] = 0\n 22704: u8 [a0 + 15] = 0\n 22707: u8 [a0 + 14] = 0x64\n 22711: u8 [a0 + 13] = 0x65\n 22715: u8 [a0 + 12] = 0x6c\n 22719: u8 [a0 + 11] = 0x69\n 22723: u8 [a0 + 10] = 0x61\n 22727: u8 [a0 + 9] = 0x66\n 22731: u8 [a0 + 8] = 0x20\n 22735: u8 [a0 + 7] = 0x6c\n 22739: u8 [a0 + 6] = 0x6c\n 22743: u8 [a0 + 5] = 0x61\n 22747: u8 [a0 + 4] = 0x63\n 22751: u8 [a0 + 3] = 0x20\n 22755: u8 [a0 + 2] = 0x3a\n 22759: u8 [a0 + 1] = 0x57\n 22763: u8 [a0 + 0] = 0x53\n 22766: a1 = u64 [sp]\n 22768: a0 = a1 + 0x60\n 22771: a1 = a0 <u a1\n 22774: a3 = u64 [sp + 0x8]\n 22777: a2 = a3 + a1\n 22780: a3 = a2 <u a3\n 22783: a3 = a1 if a1 == 0\n 22786: a1 = u64 [sp + 0x10]\n 22789: a3 = a3 + a1\n 22792: a1 = a3 <u a1\n 22795: a4 = u64 [sp + 0x18]\n 22798: a1 = a1 + a4\n 22801: a4 = u64 [sp + 0x28]\n 22804: u64 [a4] = a0\n 22806: u64 [a4 + 0x8] = a2\n 22809: u64 [a4 + 0x10] = a3\n 22812: u64 [a4 + 0x18] = a1\n 22815: ra = u64 [sp + 0x58]\n 22818: s0 = u64 [sp + 0x50]\n 22821: s1 = u64 [sp + 0x48]\n 22824: sp = sp + 0x60\n 22827: ret\n      : @373 (gas: 1)\n 22829: trap\n      : @374 (gas: 20)\n 22830: sp = sp + 0xffffffffffffffb0\n 22833: u64 [sp + 0x48] = ra\n 22836: u64 [sp + 0x40] = s0\n 22839: u64 [sp + 0x38] = s1\n 22842: a4 = u64 [a1 + 0x10]\n 22845: a3 = u64 [a1 + 0x18]\n 22848: a5 = u64 [a1 + 0x8]\n 22851: s0 = u64 [a1]\n 22853: u64 [sp + 0x28] = a3\n 22856: u64 [sp + 0x20] = a5\n 22859: a1 = a5 | a3\n 22862: a3 = s0 | a4\n 22865: a3 = a3 | a1\n 22868: a3 = a3 >> 0x20\n 22871: u64 [sp + 0x30] = a4\n 22874: a1 = a1 | a4\n 22877: a1 = a1 << 0x20\n 22880: a1 = a1 | a3\n 22883: u64 [sp + 0x18] = a0\n 22886: jump @377 if a1 != 0\n      : @375 (gas: 10)\n 22890: a0 = u64 [a2 + 0x18]\n 22893: u64 [sp] = a0\n 22895: s1 = u64 [a2 + 0x10]\n 22898: a0 = u64 [a2 + 0x8]\n 22901: u64 [sp + 0x8] = a0\n 22904: a0 = u64 [a2]\n 22906: u64 [sp + 0x10] = a0\n 22909: i32 a0 = s0 + 0\n 22911: a1 = 0x20\n 22914: ra = 324, jump @0\n      : @376 [@dyn 162] (gas: 88)\n 22920: a1 = u64 [sp]\n 22922: a1 = reverse a1\n 22924: a2 = reverse s1\n 22926: a3 = u64 [sp + 0x8]\n 22929: a3 = reverse a3\n 22931: a4 = u64 [sp + 0x10]\n 22934: a4 = reverse a4\n 22936: a5 = a4 >> 0x38\n 22939: u8 [a0 + 0x1f] = a5\n 22942: a5 = a4 >> 0x30\n 22945: u8 [a0 + 0x1e] = a5\n 22948: a5 = a4 >> 0x28\n 22951: u8 [a0 + 0x1d] = a5\n 22954: a5 = a4 >> 0x20\n 22957: u8 [a0 + 0x1c] = a5\n 22960: a5 = a4 >> 0x18\n 22963: u8 [a0 + 0x1b] = a5\n 22966: a5 = a4 >> 0x10\n 22969: u8 [a0 + 0x1a] = a5\n 22972: a5 = a4 >> 0x8\n 22975: u8 [a0 + 0x19] = a5\n 22978: u8 [a0 + 0x18] = a4\n 22981: u8 [a0 + 0x10] = a3\n 22984: a4 = a3 >> 0x38\n 22987: u8 [a0 + 0x17] = a4\n 22990: a4 = a3 >> 0x30\n 22993: u8 [a0 + 0x16] = a4\n 22996: a4 = a3 >> 0x28\n 22999: u8 [a0 + 0x15] = a4\n 23002: a4 = a3 >> 0x20\n 23005: u8 [a0 + 0x14] = a4\n 23008: a4 = a3 >> 0x18\n 23011: u8 [a0 + 0x13] = a4\n 23014: a4 = a3 >> 0x10\n 23017: u8 [a0 + 0x12] = a4\n 23020: a3 = a3 >> 0x8\n 23023: u8 [a0 + 0x11] = a3\n 23026: u8 [a0 + 0x8] = a2\n 23029: a3 = a2 >> 0x38\n 23032: u8 [a0 + 0xf] = a3\n 23035: a3 = a2 >> 0x30\n 23038: u8 [a0 + 0xe] = a3\n 23041: a3 = a2 >> 0x28\n 23044: u8 [a0 + 0xd] = a3\n 23047: a3 = a2 >> 0x20\n 23050: u8 [a0 + 0xc] = a3\n 23053: a3 = a2 >> 0x18\n 23056: u8 [a0 + 0xb] = a3\n 23059: a3 = a2 >> 0x10\n 23062: u8 [a0 + 0xa] = a3\n 23065: a2 = a2 >> 0x8\n 23068: u8 [a0 + 0x9] = a2\n 23071: u8 [a0] = a1\n 23073: a2 = a1 >> 0x38\n 23076: u8 [a0 + 0x7] = a2\n 23079: a2 = a1 >> 0x30\n 23082: u8 [a0 + 0x6] = a2\n 23085: a2 = a1 >> 0x28\n 23088: u8 [a0 + 0x5] = a2\n 23091: a2 = a1 >> 0x20\n 23094: u8 [a0 + 0x4] = a2\n 23097: a2 = a1 >> 0x18\n 23100: u8 [a0 + 0x3] = a2\n 23103: a2 = a1 >> 0x10\n 23106: u8 [a0 + 0x2] = a2\n 23109: a1 = a1 >> 0x8\n 23112: u8 [a0 + 0x1] = a1\n 23115: a0 = s0 + 0x20\n 23118: a1 = a0 <u s0\n 23121: a3 = u64 [sp + 0x20]\n 23124: a2 = a3 + a1\n 23127: a3 = a2 <u a3\n 23130: a3 = a1 if a1 == 0\n 23133: a1 = u64 [sp + 0x30]\n 23136: a3 = a3 + a1\n 23139: a1 = a3 <u a1\n 23142: a4 = u64 [sp + 0x28]\n 23145: a1 = a1 + a4\n 23148: a4 = u64 [sp + 0x18]\n 23151: u64 [a4] = a0\n 23153: u64 [a4 + 0x8] = a2\n 23156: u64 [a4 + 0x10] = a3\n 23159: u64 [a4 + 0x18] = a1\n 23162: ra = u64 [sp + 0x48]\n 23165: s0 = u64 [sp + 0x40]\n 23168: s1 = u64 [sp + 0x38]\n 23171: sp = sp + 0x50\n 23174: ret\n      : @377 (gas: 1)\n 23176: trap\n      : @378 (gas: 20)\n 23177: sp = sp + 0xffffffffffffff60\n 23181: u64 [sp + 0x98] = ra\n 23185: u64 [sp + 0x90] = s0\n 23189: u64 [sp + 0x88] = s1\n 23193: a5 = u64 [a1 + 0x18]\n 23196: s1 = u64 [a1 + 0x10]\n 23199: s0 = u64 [a1 + 0x8]\n 23202: t0 = u64 [a1]\n 23204: u64 [sp + 0x70] = a5\n 23207: u64 [sp + 0x60] = s0\n 23210: a1 = s0 | a5\n 23213: a5 = t0 | s1\n 23216: a5 = a5 | a1\n 23219: a5 = a5 >> 0x20\n 23222: u64 [sp + 0x68] = s1\n 23225: a1 = a1 | s1\n 23228: a1 = a1 << 0x20\n 23231: a1 = a1 | a5\n 23234: u64 [sp + 0x8] = a0\n 23237: jump @392 if a1 != 0\n      : @379 (gas: 27)\n 23241: a0 = u64 [a4 + 0x18]\n 23244: u64 [sp + 0x48] = a0\n 23247: a0 = u64 [a4 + 0x10]\n 23250: u64 [sp + 0x40] = a0\n 23253: a0 = u64 [a4 + 0x8]\n 23256: u64 [sp + 0x38] = a0\n 23259: a0 = u64 [a4]\n 23261: u64 [sp + 0x80] = a0\n 23265: a0 = u64 [a3 + 0x18]\n 23268: u64 [sp + 0x18] = a0\n 23271: a0 = u64 [a3 + 0x10]\n 23274: u64 [sp + 0x20] = a0\n 23277: a0 = u64 [a3 + 0x8]\n 23280: u64 [sp + 0x10] = a0\n 23283: a0 = u64 [a3]\n 23285: u64 [sp + 0x28] = a0\n 23288: a0 = u64 [a2 + 0x18]\n 23291: u64 [sp + 0x50] = a0\n 23294: s1 = u64 [a2 + 0x10]\n 23297: a0 = u64 [a2 + 0x8]\n 23300: u64 [sp + 0x58] = a0\n 23303: s0 = u64 [a2]\n 23305: i32 a0 = t0 + 0\n 23307: a1 = 0x20\n 23310: u64 [sp + 0x30] = a0\n 23313: u64 [sp + 0x78] = t0\n 23316: ra = 326, jump @0\n      : @380 [@dyn 163] (gas: 76)\n 23322: t0 = u64 [sp + 0x78]\n 23325: a1 = u64 [sp + 0x50]\n 23328: a1 = reverse a1\n 23330: a2 = reverse s1\n 23332: a3 = u64 [sp + 0x58]\n 23335: a3 = reverse a3\n 23337: a4 = reverse s0\n 23339: a5 = a4 >> 0x38\n 23342: u8 [a0 + 0x1f] = a5\n 23345: a5 = a4 >> 0x30\n 23348: u8 [a0 + 0x1e] = a5\n 23351: a5 = a4 >> 0x28\n 23354: u8 [a0 + 0x1d] = a5\n 23357: a5 = a4 >> 0x20\n 23360: u8 [a0 + 0x1c] = a5\n 23363: a5 = a4 >> 0x18\n 23366: u8 [a0 + 0x1b] = a5\n 23369: a5 = a4 >> 0x10\n 23372: u8 [a0 + 0x1a] = a5\n 23375: a5 = a4 >> 0x8\n 23378: u8 [a0 + 0x19] = a5\n 23381: u8 [a0 + 0x18] = a4\n 23384: u8 [a0 + 0x10] = a3\n 23387: a4 = a3 >> 0x38\n 23390: u8 [a0 + 0x17] = a4\n 23393: a4 = a3 >> 0x30\n 23396: u8 [a0 + 0x16] = a4\n 23399: a4 = a3 >> 0x28\n 23402: u8 [a0 + 0x15] = a4\n 23405: a4 = a3 >> 0x20\n 23408: u8 [a0 + 0x14] = a4\n 23411: a4 = a3 >> 0x18\n 23414: u8 [a0 + 0x13] = a4\n 23417: a4 = a3 >> 0x10\n 23420: u8 [a0 + 0x12] = a4\n 23423: a3 = a3 >> 0x8\n 23426: u8 [a0 + 0x11] = a3\n 23429: u8 [a0 + 0x8] = a2\n 23432: a3 = a2 >> 0x38\n 23435: u8 [a0 + 0xf] = a3\n 23438: a3 = a2 >> 0x30\n 23441: u8 [a0 + 0xe] = a3\n 23444: a3 = a2 >> 0x28\n 23447: u8 [a0 + 0xd] = a3\n 23450: a3 = a2 >> 0x20\n 23453: u8 [a0 + 0xc] = a3\n 23456: a3 = a2 >> 0x18\n 23459: u8 [a0 + 0xb] = a3\n 23462: a3 = a2 >> 0x10\n 23465: u8 [a0 + 0xa] = a3\n 23468: a2 = a2 >> 0x8\n 23471: u8 [a0 + 0x9] = a2\n 23474: u8 [a0] = a1\n 23476: a2 = a1 >> 0x38\n 23479: u8 [a0 + 0x7] = a2\n 23482: a2 = a1 >> 0x30\n 23485: u8 [a0 + 0x6] = a2\n 23488: a2 = a1 >> 0x28\n 23491: u8 [a0 + 0x5] = a2\n 23494: a2 = a1 >> 0x20\n 23497: u8 [a0 + 0x4] = a2\n 23500: a2 = a1 >> 0x18\n 23503: u8 [a0 + 0x3] = a2\n 23506: a2 = a1 >> 0x10\n 23509: u8 [a0 + 0x2] = a2\n 23512: s1 = a1 >> 0x8\n 23515: a1 = u64 [sp + 0x70]\n 23518: a5 = u64 [sp + 0x68]\n 23521: a2 = a5 | a1\n 23524: a3 = 0xffffffe0\n 23534: a3 = t0 <u a3\n 23537: a4 = u64 [sp + 0x60]\n 23540: a3 = 0 if a4 != 0\n 23542: a3 = 0 if a2 != 0\n 23544: u8 [a0 + 0x1] = s1\n 23547: jump @392 if a3 == 0\n      : @381 (gas: 14)\n 23551: s1 = t0 + 0x40\n 23554: a0 = s1 <u t0\n 23557: a3 = a4 + a0\n 23560: u64 [sp + 0x58] = a3\n 23563: s0 = a3 <u a4\n 23566: s0 = a0 if a0 == 0\n 23569: s0 = s0 + a5\n 23572: a0 = s0 <u a5\n 23575: a0 = a0 + a1\n 23578: u64 [sp + 0x50] = a0\n 23581: a0 = u64 [sp + 0x30]\n 23584: i32 a0 = a0 + 0x20\n 23587: a1 = 0x20\n 23590: ra = 328, jump @0\n      : @382 [@dyn 164] (gas: 43)\n 23596: u8 [a0 + 31] = 0x40\n 23600: a1 = s1 | s0\n 23603: a2 = u64 [sp + 0x58]\n 23606: a4 = u64 [sp + 0x50]\n 23609: a2 = a2 | a4\n 23612: a1 = a1 | a2\n 23615: a1 = a1 >> 0x20\n 23618: u64 [sp + 0x30] = s0\n 23621: a2 = a2 | s0\n 23624: a2 = a2 << 0x20\n 23627: a1 = a1 | a2\n 23630: u8 [a0 + 30] = 0\n 23633: u8 [a0 + 29] = 0\n 23636: u8 [a0 + 28] = 0\n 23639: u8 [a0 + 27] = 0\n 23642: u8 [a0 + 26] = 0\n 23645: u8 [a0 + 25] = 0\n 23648: u8 [a0 + 24] = 0\n 23651: u8 [a0 + 23] = 0\n 23654: u8 [a0 + 22] = 0\n 23657: u8 [a0 + 21] = 0\n 23660: u8 [a0 + 20] = 0\n 23663: u8 [a0 + 19] = 0\n 23666: u8 [a0 + 18] = 0\n 23669: u8 [a0 + 17] = 0\n 23672: u8 [a0 + 16] = 0\n 23675: u8 [a0 + 15] = 0\n 23678: u8 [a0 + 14] = 0\n 23681: u8 [a0 + 13] = 0\n 23684: u8 [a0 + 12] = 0\n 23687: u8 [a0 + 11] = 0\n 23690: u8 [a0 + 10] = 0\n 23693: u8 [a0 + 9] = 0\n 23696: u8 [a0 + 8] = 0\n 23699: u8 [a0 + 7] = 0\n 23702: u8 [a0 + 6] = 0\n 23705: u8 [a0 + 5] = 0\n 23708: u8 [a0 + 4] = 0\n 23711: u8 [a0 + 3] = 0\n 23714: u8 [a0 + 2] = 0\n 23717: u8 [a0 + 1] = 0\n 23720: u8 [a0 + 0] = 0\n 23722: jump @392 if a1 != 0\n      : @383 (gas: 4)\n 23726: u64 [sp] = s1\n 23728: i32 a0 = s1 + 0\n 23730: a1 = 0x20\n 23733: ra = 330, jump @0\n      : @384 [@dyn 165] (gas: 80)\n 23739: t1 = u64 [sp + 0x80]\n 23743: a1 = reverse t1\n 23745: a2 = a1 >> 0x38\n 23748: u8 [a0 + 0x1f] = a2\n 23751: a2 = a1 >> 0x30\n 23754: u8 [a0 + 0x1e] = a2\n 23757: a2 = a1 >> 0x28\n 23760: u8 [a0 + 0x1d] = a2\n 23763: a2 = a1 >> 0x20\n 23766: u8 [a0 + 0x1c] = a2\n 23769: a2 = a1 >> 0x18\n 23772: u8 [a0 + 0x1b] = a2\n 23775: a2 = a1 >> 0x10\n 23778: u8 [a0 + 0x1a] = a2\n 23781: a2 = a1 >> 0x8\n 23784: u8 [a0 + 0x19] = a2\n 23787: t0 = u64 [sp + 0x38]\n 23790: a2 = reverse t0\n 23792: u8 [a0 + 0x18] = a1\n 23795: a1 = a2 >> 0x38\n 23798: u8 [a0 + 0x17] = a1\n 23801: a1 = a2 >> 0x30\n 23804: u8 [a0 + 0x16] = a1\n 23807: a1 = a2 >> 0x28\n 23810: u8 [a0 + 0x15] = a1\n 23813: a1 = a2 >> 0x20\n 23816: u8 [a0 + 0x14] = a1\n 23819: a1 = a2 >> 0x18\n 23822: u8 [a0 + 0x13] = a1\n 23825: a1 = a2 >> 0x10\n 23828: u8 [a0 + 0x12] = a1\n 23831: s1 = u64 [sp + 0x40]\n 23834: a3 = reverse s1\n 23836: u8 [a0 + 0x10] = a2\n 23839: a2 = a2 >> 0x8\n 23842: u8 [a0 + 0x11] = a2\n 23845: a1 = a3 >> 0x38\n 23848: u8 [a0 + 0xf] = a1\n 23851: a1 = a3 >> 0x30\n 23854: u8 [a0 + 0xe] = a1\n 23857: a1 = a3 >> 0x28\n 23860: u8 [a0 + 0xd] = a1\n 23863: a1 = a3 >> 0x20\n 23866: u8 [a0 + 0xc] = a1\n 23869: a1 = a3 >> 0x18\n 23872: u8 [a0 + 0xb] = a1\n 23875: a1 = a3 >> 0x10\n 23878: u8 [a0 + 0xa] = a1\n 23881: a5 = u64 [sp + 0x48]\n 23884: a1 = reverse a5\n 23886: u8 [a0 + 0x8] = a3\n 23889: a3 = a3 >> 0x8\n 23892: u8 [a0 + 0x9] = a3\n 23895: a2 = a1 >> 0x38\n 23898: u8 [a0 + 0x7] = a2\n 23901: a2 = a1 >> 0x30\n 23904: u8 [a0 + 0x6] = a2\n 23907: a2 = a1 >> 0x28\n 23910: u8 [a0 + 0x5] = a2\n 23913: a2 = a1 >> 0x20\n 23916: u8 [a0 + 0x4] = a2\n 23919: a2 = a1 >> 0x18\n 23922: u8 [a0 + 0x3] = a2\n 23925: a2 = a1 >> 0x10\n 23928: u8 [a0 + 0x2] = a2\n 23931: a2 = u64 [sp + 0x18]\n 23934: a4 = u64 [sp + 0x10]\n 23937: a4 = a4 | a2\n 23940: s0 = u64 [sp + 0x28]\n 23943: a2 = u64 [sp + 0x20]\n 23946: a3 = s0 | a2\n 23949: a3 = a3 | a4\n 23952: a2 = a2 | a4\n 23955: a3 = a3 >> 0x20\n 23958: a2 = a2 << 0x20\n 23961: a2 = a2 | a3\n 23964: u8 [a0] = a1\n 23966: a1 = a1 >> 0x8\n 23969: u8 [a0 + 0x1] = a1\n 23972: jump @392 if a2 != 0\n      : @385 (gas: 9)\n 23976: a0 = t1 | s1\n 23979: a1 = t0 | a5\n 23982: a0 = a0 | a1\n 23985: a0 = a0 >> 0x20\n 23988: a1 = a1 | s1\n 23991: a1 = a1 << 0x20\n 23994: a0 = a0 | a1\n 23997: a2 = u64 [sp + 0x78]\n 24000: jump @392 if a0 != 0\n      : @386 (gas: 10)\n 24004: a0 = u64 [sp + 0x30]\n 24007: a1 = u64 [sp + 0x50]\n 24010: a0 = a0 | a1\n 24013: a1 = 0xffffffe0\n 24023: a3 = u64 [sp]\n 24025: a1 = a3 <u a1\n 24028: a3 = u64 [sp + 0x58]\n 24031: a1 = 0 if a3 != 0\n 24033: a1 = 0 if a0 != 0\n 24035: jump @392 if a1 == 0\n      : @387 (gas: 20)\n 24039: s1 = a2 + 0x60\n 24042: a0 = s1 <u a2\n 24045: a1 = u64 [sp + 0x60]\n 24048: a2 = a1 + a0\n 24051: u64 [sp + 0x58] = a2\n 24054: a1 = a2 <u a1\n 24057: a1 = a0 if a0 == 0\n 24060: a0 = u64 [sp + 0x68]\n 24063: a1 = a1 + a0\n 24066: u64 [sp + 0x78] = a1\n 24069: a0 = a1 <u a0\n 24072: a1 = u64 [sp + 0x70]\n 24075: a0 = a0 + a1\n 24078: u64 [sp + 0x70] = a0\n 24081: i32 s0 = s0 + 0\n 24083: u64 [sp + 0x68] = s0\n 24086: i32 a0 = s1 + 0\n 24088: i32 s0 = t1 + 0\n 24090: a1 = s0\n 24092: ra = 332, jump @0\n      : @388 [@dyn 166] (gas: 6)\n 24098: i32 a0 = a0 + 0\n 24100: a1 = s0\n 24102: s0 = u64 [sp + 0x58]\n 24105: a2 = u64 [sp + 0x68]\n 24108: ecalli 2 // 'call_data_copy'\n 24110: fallthrough\n      : @389 (gas: 29)\n 24111: a0 = u64 [sp + 0x80]\n 24115: a0 = a0 + s1\n 24118: u64 [sp + 0x68] = s1\n 24121: a1 = a0 <u s1\n 24124: a2 = u64 [sp + 0x38]\n 24127: a2 = a2 + s0\n 24130: a2 = a2 + a1\n 24133: a3 = a2 ^ s0\n 24136: a4 = a2 <u s0\n 24139: s0 = u64 [sp + 0x70]\n 24142: a4 = a1 if a3 == 0\n 24145: a1 = u64 [sp + 0x40]\n 24148: a5 = u64 [sp + 0x78]\n 24151: a1 = a1 + a5\n 24154: a4 = a4 + a1\n 24157: a3 = a4 <u a1\n 24160: a1 = a1 <u a5\n 24163: a5 = u64 [sp + 0x48]\n 24166: a5 = a5 + s0\n 24169: a1 = a1 + a5\n 24172: a1 = a1 + a3\n 24175: a3 = a0 | a4\n 24178: a1 = a1 | a2\n 24181: a3 = a3 | a1\n 24184: a3 = a3 >> 0x20\n 24187: a1 = a1 | a4\n 24190: a1 = a1 << 0x20\n 24193: a1 = a1 | a3\n 24196: jump @392 if a1 != 0\n      : @390 (gas: 3)\n 24200: i32 a0 = a0 + 0\n 24202: a1 = 0x20\n 24205: ra = 334, jump @0\n      : @391 [@dyn 167] (gas: 56)\n 24211: u8 [a0 + 31] = 0\n 24214: u8 [a0 + 30] = 0\n 24217: u8 [a0 + 29] = 0\n 24220: u8 [a0 + 28] = 0\n 24223: u8 [a0 + 27] = 0\n 24226: u8 [a0 + 26] = 0\n 24229: u8 [a0 + 25] = 0\n 24232: u8 [a0 + 24] = 0\n 24235: u8 [a0 + 23] = 0\n 24238: u8 [a0 + 22] = 0\n 24241: u8 [a0 + 21] = 0\n 24244: u8 [a0 + 20] = 0\n 24247: u8 [a0 + 19] = 0\n 24250: u8 [a0 + 18] = 0\n 24253: u8 [a0 + 17] = 0\n 24256: u8 [a0 + 16] = 0\n 24259: u8 [a0 + 15] = 0\n 24262: u8 [a0 + 14] = 0\n 24265: u8 [a0 + 13] = 0\n 24268: u8 [a0 + 12] = 0\n 24271: u8 [a0 + 11] = 0\n 24274: u8 [a0 + 10] = 0\n 24277: u8 [a0 + 9] = 0\n 24280: u8 [a0 + 8] = 0\n 24283: u8 [a0 + 7] = 0\n 24286: u8 [a0 + 6] = 0\n 24289: u8 [a0 + 5] = 0\n 24292: u8 [a0 + 4] = 0\n 24295: u8 [a0 + 3] = 0\n 24298: u8 [a0 + 2] = 0\n 24301: u8 [a0 + 1] = 0\n 24304: u8 [a0 + 0] = 0\n 24306: a0 = u64 [sp + 0x80]\n 24310: a0 = a0 + 0x1f\n 24313: a1 = 0x1ffffffe0\n 24323: a0 = a0 & a1\n 24326: a1 = u64 [sp + 0x68]\n 24329: a1 = a1 + a0\n 24332: a0 = a1 <u a0\n 24335: a2 = u64 [sp + 0x58]\n 24338: a2 = a2 + a0\n 24341: a0 = 0 if a2 != 0\n 24343: a3 = u64 [sp + 0x78]\n 24346: a0 = a0 + a3\n 24349: a3 = a0 <u a3\n 24352: a3 = a3 + s0\n 24355: a4 = u64 [sp + 0x8]\n 24358: u64 [a4] = a1\n 24360: u64 [a4 + 0x8] = a2\n 24363: u64 [a4 + 0x10] = a0\n 24366: u64 [a4 + 0x18] = a3\n 24369: ra = u64 [sp + 0x98]\n 24373: s0 = u64 [sp + 0x90]\n 24377: s1 = u64 [sp + 0x88]\n 24381: sp = sp + 0xa0\n 24385: ret\n      : @392 (gas: 1)\n 24387: trap\n      : @393 [@dyn 168] (gas: 12)\n 24388: a1 = u64 [sp + 0x90]\n 24392: a2 = u64 [sp + 0x88]\n 24396: a1 = a1 | a2\n 24399: a2 = u64 [sp + 0xb0]\n 24403: a2 = a2 | s1\n 24406: a2 = a2 | a1\n 24409: a2 = a2 >> 0x20\n 24412: u64 [sp + 0x48] = s1\n 24415: a1 = a1 | s1\n 24418: a1 = a1 << 0x20\n 24421: a1 = a1 | a2\n 24424: jump @414 if a1 != 0\n      : @394 (gas: 12)\n 24428: a3 = u64 [sp + 0xa0]\n 24432: t1 = u64 [sp + 0xb8]\n 24436: a1 = t1 | a3\n 24439: a2 = u64 [sp + 0x98]\n 24443: a4 = u64 [sp + 0xa8]\n 24447: a2 = a2 | a4\n 24450: a1 = a1 | a2\n 24453: a1 = a1 >> 0x20\n 24456: a2 = a2 | a3\n 24459: a2 = a2 << 0x20\n 24462: a1 = a1 | a2\n 24465: jump @414 if a1 != 0\n      : @395 (gas: 103)\n 24469: a1 = u8 [a0 + 0x19]\n 24472: a2 = u8 [a0 + 0x18]\n 24475: a3 = u8 [a0 + 0x1a]\n 24478: a4 = u8 [a0 + 0x1b]\n 24481: a1 = a1 << 0x8\n 24484: a1 = a1 | a2\n 24487: a3 = a3 << 0x10\n 24490: a4 = a4 << 0x18\n 24493: a3 = a3 | a4\n 24496: a1 = a1 | a3\n 24499: a2 = u8 [a0 + 0x1d]\n 24502: a3 = u8 [a0 + 0x1c]\n 24505: a4 = u8 [a0 + 0x1e]\n 24508: a5 = u8 [a0 + 0x1f]\n 24511: a2 = a2 << 0x8\n 24514: a2 = a2 | a3\n 24517: a4 = a4 << 0x10\n 24520: a5 = a5 << 0x18\n 24523: a4 = a4 | a5\n 24526: a2 = a2 | a4\n 24529: a2 = a2 << 0x20\n 24532: t0 = a2 | a1\n 24535: a2 = u8 [a0 + 0x11]\n 24538: a3 = u8 [a0 + 0x10]\n 24541: a4 = u8 [a0 + 0x12]\n 24544: a5 = u8 [a0 + 0x13]\n 24547: a2 = a2 << 0x8\n 24550: a2 = a2 | a3\n 24553: a4 = a4 << 0x10\n 24556: a5 = a5 << 0x18\n 24559: a4 = a4 | a5\n 24562: a2 = a2 | a4\n 24565: a3 = u8 [a0 + 0x15]\n 24568: a4 = u8 [a0 + 0x14]\n 24571: a5 = u8 [a0 + 0x16]\n 24574: s1 = u8 [a0 + 0x17]\n 24577: a3 = a3 << 0x8\n 24580: a3 = a3 | a4\n 24583: a5 = a5 << 0x10\n 24586: s1 = s1 << 0x18\n 24589: a5 = a5 | s1\n 24592: a3 = a3 | a5\n 24595: a3 = a3 << 0x20\n 24598: a2 = a2 | a3\n 24601: a3 = u8 [a0 + 0x9]\n 24604: a4 = u8 [a0 + 0x8]\n 24607: a5 = u8 [a0 + 0xa]\n 24610: s1 = u8 [a0 + 0xb]\n 24613: a3 = a3 << 0x8\n 24616: a3 = a3 | a4\n 24619: a5 = a5 << 0x10\n 24622: s1 = s1 << 0x18\n 24625: a5 = a5 | s1\n 24628: a3 = a3 | a5\n 24631: a4 = u8 [a0 + 0xd]\n 24634: a5 = u8 [a0 + 0xc]\n 24637: s1 = u8 [a0 + 0xe]\n 24640: a1 = u8 [a0 + 0xf]\n 24643: a4 = a4 << 0x8\n 24646: a4 = a4 | a5\n 24649: s1 = s1 << 0x10\n 24652: a1 = a1 << 0x18\n 24655: a1 = a1 | s1\n 24658: a1 = a1 | a4\n 24661: a1 = a1 << 0x20\n 24664: a3 = a3 | a1\n 24667: a1 = u8 [a0 + 0x1]\n 24670: a4 = u8 [a0]\n 24672: a5 = u8 [a0 + 0x2]\n 24675: s1 = u8 [a0 + 0x3]\n 24678: a1 = a1 << 0x8\n 24681: a1 = a1 | a4\n 24684: a5 = a5 << 0x10\n 24687: s1 = s1 << 0x18\n 24690: a5 = a5 | s1\n 24693: a1 = a1 | a5\n 24696: a4 = u8 [a0 + 0x5]\n 24699: a5 = u8 [a0 + 0x4]\n 24702: s1 = u8 [a0 + 0x6]\n 24705: a0 = u8 [a0 + 0x7]\n 24708: a4 = a4 << 0x8\n 24711: a4 = a4 | a5\n 24714: s1 = s1 << 0x10\n 24717: a0 = a0 << 0x18\n 24720: a0 = a0 | s1\n 24723: a0 = a0 | a4\n 24726: a0 = a0 << 0x20\n 24729: a0 = a0 | a1\n 24732: a1 = reverse a0\n 24734: a3 = reverse a3\n 24736: a2 = reverse a2\n 24738: a4 = reverse t0\n 24740: a0 = a4 | a3\n 24743: u64 [sp + 0x40] = a1\n 24746: u64 [sp + 0x30] = a2\n 24749: a1 = a1 | a2\n 24752: a0 = a0 | a1\n 24755: a0 = a0 >> 0x20\n 24758: u64 [sp + 0x38] = a3\n 24761: a1 = a1 | a3\n 24764: a1 = a1 << 0x20\n 24767: a0 = a0 | a1\n 24770: jump @414 if a0 != 0\n      : @396 (gas: 8)\n 24774: a0 = i32 [sp + 0xb0]\n 24778: u64 [sp + 0x28] = a0\n 24781: i32 s1 = t1 + 0\n 24783: i32 a0 = a4 + 0\n 24785: u64 [sp + 0x10] = a0\n 24788: a1 = s1\n 24790: u64 [sp + 0x20] = a4\n 24793: ra = 338, jump @0\n      : @397 [@dyn 169] (gas: 6)\n 24799: i32 a0 = a0 + 0\n 24801: u64 [sp + 0x18] = s1\n 24804: a1 = s1\n 24806: a2 = u64 [sp + 0x28]\n 24809: ecalli 2 // 'call_data_copy'\n 24811: fallthrough\n      : @398 (gas: 30)\n 24812: a1 = u64 [sp + 0x20]\n 24815: a0 = u64 [sp + 0xb8]\n 24819: a0 = a0 + a1\n 24822: a1 = a0 <u a1\n 24825: a2 = u64 [sp + 0x98]\n 24829: a4 = u64 [sp + 0x30]\n 24832: a2 = a2 + a4\n 24835: a2 = a2 + a1\n 24838: a3 = a2 ^ a4\n 24841: a4 = a2 <u a4\n 24844: a4 = a1 if a3 == 0\n 24847: a1 = u64 [sp + 0xa0]\n 24851: a5 = u64 [sp + 0x38]\n 24854: a1 = a1 + a5\n 24857: a4 = a4 + a1\n 24860: a3 = a4 <u a1\n 24863: a1 = a1 <u a5\n 24866: a5 = u64 [sp + 0xa8]\n 24870: s1 = u64 [sp + 0x40]\n 24873: a5 = a5 + s1\n 24876: a1 = a1 + a5\n 24879: a1 = a1 + a3\n 24882: a3 = a0 | a4\n 24885: a1 = a1 | a2\n 24888: a3 = a3 | a1\n 24891: a3 = a3 >> 0x20\n 24894: a1 = a1 | a4\n 24897: a1 = a1 << 0x20\n 24900: a1 = a1 | a3\n 24903: jump @414 if a1 != 0\n      : @399 (gas: 3)\n 24907: i32 a0 = a0 + 0\n 24909: a1 = 0x20\n 24912: ra = 340, jump @0\n      : @400 [@dyn 170] (gas: 64)\n 24918: u8 [a0 + 31] = 0\n 24921: u8 [a0 + 30] = 0\n 24924: u8 [a0 + 29] = 0\n 24927: u8 [a0 + 28] = 0\n 24930: u8 [a0 + 27] = 0\n 24933: u8 [a0 + 26] = 0\n 24936: u8 [a0 + 25] = 0\n 24939: u8 [a0 + 24] = 0\n 24942: u8 [a0 + 23] = 0\n 24945: u8 [a0 + 22] = 0\n 24948: u8 [a0 + 21] = 0\n 24951: u8 [a0 + 20] = 0\n 24954: u8 [a0 + 19] = 0\n 24957: u8 [a0 + 18] = 0\n 24960: u8 [a0 + 17] = 0\n 24963: u8 [a0 + 16] = 0\n 24966: u8 [a0 + 15] = 0\n 24969: u8 [a0 + 14] = 0\n 24972: u8 [a0 + 13] = 0\n 24975: u8 [a0 + 12] = 0\n 24978: u8 [a0 + 11] = 0\n 24981: u8 [a0 + 10] = 0\n 24984: u8 [a0 + 9] = 0\n 24987: u8 [a0 + 8] = 0\n 24990: u8 [a0 + 7] = 0\n 24993: u8 [a0 + 6] = 0\n 24996: u8 [a0 + 5] = 0\n 24999: u8 [a0 + 4] = 0\n 25002: u8 [a0 + 3] = 0\n 25005: u8 [a0 + 2] = 0\n 25008: u8 [a0 + 1] = 0\n 25011: u8 [a0 + 0] = 0\n 25013: ecalli 10 // 'ref_time_left'\n 25015: u64 [sp + 0x40] = a0\n 25018: a0 = u64 [sp + 0x50]\n 25021: a2 = reverse a0\n 25023: a0 = a2 << 0x20\n 25026: a1 = u64 [sp + 0x60]\n 25029: a1 = reverse a1\n 25031: a1 = a1 >> 0x20\n 25034: a0 = a0 | a1\n 25037: a1 = u64 [sp + 0x58]\n 25040: a3 = reverse a1\n 25042: a1 = a3 << 0x20\n 25045: u64 [sp + 0x28] = a2\n 25048: a2 = a2 >> 0x20\n 25051: a1 = a1 | a2\n 25054: u64 [sp + 0x20] = a3\n 25057: a2 = a3 >> 0x20\n 25060: u64 [sp + 0x1c8] = a1\n 25064: u64 [sp + 0x1c0] = a0\n 25068: u32 [sp + 0x1d0] = a2\n 25072: a0 = u64 [sp + 0x80]\n 25076: u64 [sp + 0x1f8] = a0\n 25080: a0 = u64 [sp + 0x78]\n 25083: u64 [sp + 0x1f0] = a0\n 25087: a0 = u64 [sp + 0x70]\n 25090: u64 [sp + 0x1e8] = a0\n 25094: a0 = u64 [sp + 0x68]\n 25097: u64 [sp + 0x1e0] = a0\n 25101: a0 = u64 [sp + 0x10]\n 25104: s1 = u64 [sp + 0x18]\n 25107: a1 = s1\n 25109: ra = 342, jump @0\n      : @401 [@dyn 171] (gas: 4)\n 25115: u64 [sp + 0x58] = a0\n 25118: a0 = 0\n 25120: a1 = 0\n 25122: ra = 344, jump @0\n      : @402 [@dyn 172] (gas: 48)\n 25128: u32 [sp + 512] = 0\n 25132: a1 = s1 >u 0\n 25134: a3 = u64 [sp + 0x40]\n 25137: a2 = a3 >u 0x8fc\n 25141: a1 = a1 | a2\n 25144: a2 = -a1\n 25146: u64 [sp + 0x238] = a2\n 25150: u64 [sp + 0x230] = a2\n 25154: u64 [sp + 0x228] = a2\n 25158: u64 [sp + 0x220] = a2\n 25162: a2 = sp + 0x1c0\n 25166: a2 = a2 << 0x20\n 25169: a2 = a2 >> 0x20\n 25172: a1 = a1 << 0x23\n 25175: s1 = a1 | a2\n 25178: a1 = sp + 0x1e0\n 25182: a1 = a1 << 0x20\n 25185: a1 = a1 >> 0x20\n 25188: a2 = sp + 0x220\n 25192: a2 = a2 << 0x20\n 25195: a3 = a2 | a1\n 25198: a1 = u64 [sp + 0x58]\n 25201: a1 = a1 << 0x20\n 25204: a1 = a1 >> 0x20\n 25207: a4 = u64 [sp + 0xb8]\n 25211: a4 = a4 << 0x20\n 25214: a4 = a4 | a1\n 25217: a0 = a0 << 0x20\n 25220: a0 = a0 >> 0x20\n 25223: a1 = sp + 0x200\n 25227: a1 = a1 << 0x20\n 25230: a5 = a1 | a0\n 25233: a1 = 0xffffffffffffffff\n 25236: a2 = 0xffffffffffffffff\n 25239: a0 = s1\n 25241: ecalli 1 // 'call'\n 25243: u64 [sp + 0x40] = a0\n 25246: a0 = sp + 0x1a0\n 25250: ra = 0x15a\n 25254: sp = sp + 0xffffffffffffff60\n 25258: u64 [sp + 0x98] = ra\n 25262: u64 [sp + 0x90] = s0\n 25266: u64 [sp + 0x88] = s1\n 25270: s0 = sp + 0xa0\n 25274: sp = sp & 0xffffffffffffffe0\n 25277: s1 = a0\n 25279: ecalli 12 // 'return_data_size'\n 25281: jump @355\n      : @403 [@dyn 173] (gas: 3)\n 25284: a0 = 0x40\n 25287: a1 = 0x20\n 25290: ra = 348, jump @0\n      : @404 [@dyn 174] (gas: 98)\n 25296: a1 = u8 [a0 + 0x19]\n 25299: a2 = u8 [a0 + 0x18]\n 25302: a3 = u8 [a0 + 0x1a]\n 25305: a4 = u8 [a0 + 0x1b]\n 25308: a1 = a1 << 0x8\n 25311: a1 = a1 | a2\n 25314: a3 = a3 << 0x10\n 25317: a4 = a4 << 0x18\n 25320: a3 = a3 | a4\n 25323: a1 = a1 | a3\n 25326: a2 = u8 [a0 + 0x1d]\n 25329: a3 = u8 [a0 + 0x1c]\n 25332: a4 = u8 [a0 + 0x1e]\n 25335: a5 = u8 [a0 + 0x1f]\n 25338: a2 = a2 << 0x8\n 25341: a2 = a2 | a3\n 25344: a4 = a4 << 0x10\n 25347: a5 = a5 << 0x18\n 25350: a4 = a4 | a5\n 25353: a2 = a2 | a4\n 25356: a2 = a2 << 0x20\n 25359: t0 = a2 | a1\n 25362: a2 = u8 [a0 + 0x11]\n 25365: a3 = u8 [a0 + 0x10]\n 25368: a4 = u8 [a0 + 0x12]\n 25371: a5 = u8 [a0 + 0x13]\n 25374: a2 = a2 << 0x8\n 25377: a2 = a2 | a3\n 25380: a4 = a4 << 0x10\n 25383: a5 = a5 << 0x18\n 25386: a4 = a4 | a5\n 25389: a2 = a2 | a4\n 25392: a3 = u8 [a0 + 0x15]\n 25395: a4 = u8 [a0 + 0x14]\n 25398: a5 = u8 [a0 + 0x16]\n 25401: s1 = u8 [a0 + 0x17]\n 25404: a3 = a3 << 0x8\n 25407: a3 = a3 | a4\n 25410: a5 = a5 << 0x10\n 25413: s1 = s1 << 0x18\n 25416: a5 = a5 | s1\n 25419: a3 = a3 | a5\n 25422: a3 = a3 << 0x20\n 25425: a2 = a2 | a3\n 25428: a3 = u8 [a0 + 0x9]\n 25431: a4 = u8 [a0 + 0x8]\n 25434: a5 = u8 [a0 + 0xa]\n 25437: s1 = u8 [a0 + 0xb]\n 25440: a3 = a3 << 0x8\n 25443: a3 = a3 | a4\n 25446: a5 = a5 << 0x10\n 25449: s1 = s1 << 0x18\n 25452: a5 = a5 | s1\n 25455: a3 = a3 | a5\n 25458: a4 = u8 [a0 + 0xd]\n 25461: a5 = u8 [a0 + 0xc]\n 25464: s1 = u8 [a0 + 0xe]\n 25467: a1 = u8 [a0 + 0xf]\n 25470: a4 = a4 << 0x8\n 25473: a4 = a4 | a5\n 25476: s1 = s1 << 0x10\n 25479: a1 = a1 << 0x18\n 25482: a1 = a1 | s1\n 25485: a1 = a1 | a4\n 25488: a1 = a1 << 0x20\n 25491: a3 = a3 | a1\n 25494: a1 = u8 [a0 + 0x1]\n 25497: a4 = u8 [a0]\n 25499: a5 = u8 [a0 + 0x2]\n 25502: s1 = u8 [a0 + 0x3]\n 25505: a1 = a1 << 0x8\n 25508: a1 = a1 | a4\n 25511: a5 = a5 << 0x10\n 25514: s1 = s1 << 0x18\n 25517: a5 = a5 | s1\n 25520: a1 = a1 | a5\n 25523: a4 = u8 [a0 + 0x5]\n 25526: a5 = u8 [a0 + 0x4]\n 25529: s1 = u8 [a0 + 0x6]\n 25532: a0 = u8 [a0 + 0x7]\n 25535: a4 = a4 << 0x8\n 25538: a4 = a4 | a5\n 25541: s1 = s1 << 0x10\n 25544: a0 = a0 << 0x18\n 25547: a0 = a0 | s1\n 25550: a0 = a0 | a4\n 25553: a0 = a0 << 0x20\n 25556: a0 = a0 | a1\n 25559: t2 = reverse a0\n 25561: s1 = reverse a3\n 25563: t1 = reverse a2\n 25565: a5 = reverse t0\n 25567: a0 = u64 [sp + 0x40]\n 25570: u64 [sp + 0x38] = a5\n 25573: u64 [sp + 0x58] = t2\n 25576: u64 [sp + 0x30] = s1\n 25579: u64 [sp + 0x50] = t1\n 25582: jump @410 if a0 != 0\n      : @405 (gas: 34)\n 25586: a0 = u64 [sp + 0xb8]\n 25590: u64 [sp + 0xc0] = a0\n 25594: a0 = u64 [sp + 0xb0]\n 25598: u64 [sp + 0xe0] = a0\n 25602: a0 = u64 [sp + 0x68]\n 25605: u64 [sp + 0x100] = a0\n 25609: u64 [sp + 0x120] = a5\n 25613: a0 = u64 [sp + 0x98]\n 25617: u64 [sp + 0xc8] = a0\n 25621: a0 = u64 [sp + 0x88]\n 25625: u64 [sp + 0xe8] = a0\n 25629: a0 = u64 [sp + 0x70]\n 25632: u64 [sp + 0x108] = a0\n 25636: u64 [sp + 0x128] = t1\n 25640: a0 = u64 [sp + 0xa0]\n 25644: u64 [sp + 0xd0] = a0\n 25648: a0 = u64 [sp + 0x48]\n 25651: u64 [sp + 0xf0] = a0\n 25655: a0 = u64 [sp + 0x78]\n 25658: u64 [sp + 0x110] = a0\n 25662: u64 [sp + 0x130] = s1\n 25666: a0 = u64 [sp + 0xa8]\n 25670: u64 [sp + 0xd8] = a0\n 25674: a0 = u64 [sp + 0x90]\n 25678: u64 [sp + 0xf8] = a0\n 25682: a0 = u64 [sp + 0x80]\n 25686: u64 [sp + 0x118] = a0\n 25690: a0 = sp + 0x140\n 25694: a1 = sp + 0x120\n 25698: a2 = sp + 0x100\n 25702: a3 = sp + 0xe0\n 25706: a4 = sp + 0xc0\n 25710: u64 [sp + 0x138] = t2\n 25714: ra = 350, jump @378\n      : @406 [@dyn 175] (gas: 11)\n 25720: t0 = u64 [sp + 0x58]\n 25723: a2 = u64 [sp + 0x50]\n 25726: t1 = u64 [sp + 0x38]\n 25729: a0 = t1 | s1\n 25732: a1 = a2 | t0\n 25735: a0 = a0 | a1\n 25738: a0 = a0 >> 0x20\n 25741: a1 = a1 | s1\n 25744: a1 = a1 << 0x20\n 25747: a0 = a0 | a1\n 25750: jump @414 if a0 != 0\n      : @407 (gas: 29)\n 25754: a0 = u64 [sp + 0x148]\n 25758: a1 = u64 [sp + 0x158]\n 25762: u64 [sp + 0xb8] = a1\n 25766: t2 = u64 [sp + 0x140]\n 25770: a3 = u64 [sp + 0x150]\n 25774: a4 = a0 ^ a2\n 25777: a5 = a0 <u a2\n 25780: s1 = t2 <u t1\n 25783: a5 = s1 if a4 == 0\n 25786: ra = u64 [sp + 0x30]\n 25789: a4 = a3 - ra\n 25792: a1 = a4 - a5\n 25795: a4 = a4 <u a5\n 25798: a3 = a3 <u ra\n 25801: a5 = u64 [sp + 0xb8]\n 25805: a5 = a5 - t0\n 25808: a5 = a5 - a3\n 25811: a5 = a5 - a4\n 25814: a0 = a0 - a2\n 25817: a0 = a0 - s1\n 25820: s1 = t2 - t1\n 25823: a0 = a0 | a5\n 25826: a2 = s1 | a1\n 25829: a2 = a2 | a0\n 25832: a0 = a0 | a1\n 25835: a2 = a2 >> 0x20\n 25838: a0 = a0 << 0x20\n 25841: a0 = a0 | a2\n 25844: jump @414 if a0 != 0\n      : @408 (gas: 8)\n 25848: a0 = u64 [sp + 0x60]\n 25851: a0 = a0 << 0x20\n 25854: a0 = a0 >> 0x20\n 25857: u64 [sp + 0xb8] = a0\n 25861: i32 a0 = t1 + 0\n 25863: i32 s1 = s1 + 0\n 25865: a1 = s1\n 25867: ra = 352, jump @0\n      : @409 [@dyn 176] (gas: 27)\n 25873: a1 = u64 [0x20020]\n 25878: a2 = u64 [0x20028]\n 25883: a3 = u64 [0x20030]\n 25888: a4 = u64 [0x20038]\n 25893: u64 [sp + 0x258] = a1\n 25897: u64 [sp + 0x250] = a2\n 25901: u64 [sp + 0x248] = a3\n 25905: u64 [sp + 0x240] = a4\n 25909: a1 = u64 [sp + 0xb8]\n 25913: a1 = reverse a1\n 25915: a2 = u64 [sp + 0x20]\n 25918: u64 [sp + 0x278] = a2\n 25922: a2 = u64 [sp + 0x28]\n 25925: u64 [sp + 0x270] = a2\n 25929: u64 [sp + 608] = 0\n 25933: u64 [sp + 0x268] = a1\n 25937: i32 a2 = a0 + 0\n 25939: i32 a0 = sp + 0x240\n 25943: a1 = 0x2\n 25946: a3 = s1\n 25948: ecalli 7 // 'deposit_event'\n 25950: sp = s0 + 0xfffffffffffffd60\n 25954: ra = u64 [sp + 0x298]\n 25958: s0 = u64 [sp + 0x290]\n 25962: s1 = u64 [sp + 0x288]\n 25966: sp = sp + 0x2a0\n 25970: ret\n      : @410 (gas: 8)\n 25972: a0 = a5 | s1\n 25975: a1 = t1 | t2\n 25978: a0 = a0 | a1\n 25981: a0 = a0 >> 0x20\n 25984: a1 = a1 | s1\n 25987: a1 = a1 << 0x20\n 25990: a0 = a0 | a1\n 25993: jump @414 if a0 != 0\n      : @411 (gas: 6)\n 25997: a2 = a5\n 25999: s1 = a5\n 26001: i32 a0 = a2 + 0\n 26003: a1 = 0x20\n 26006: u64 [sp + 0xb8] = a0\n 26010: ra = 354, jump @0\n      : @412 [@dyn 177] (gas: 50)\n 26016: u8 [a0 + 31] = 0\n 26019: u8 [a0 + 30] = 0\n 26022: u8 [a0 + 29] = 0\n 26025: u8 [a0 + 28] = 0\n 26028: u8 [a0 + 27] = 0\n 26031: u8 [a0 + 26] = 0\n 26034: u8 [a0 + 25] = 0\n 26037: u8 [a0 + 24] = 0\n 26040: u8 [a0 + 23] = 0\n 26043: u8 [a0 + 22] = 0\n 26046: u8 [a0 + 21] = 0\n 26049: u8 [a0 + 20] = 0\n 26052: u8 [a0 + 19] = 0\n 26055: u8 [a0 + 18] = 0\n 26058: u8 [a0 + 17] = 0\n 26061: u8 [a0 + 16] = 0\n 26064: u8 [a0 + 15] = 0\n 26067: u8 [a0 + 14] = 0\n 26070: u8 [a0 + 13] = 0\n 26073: u8 [a0 + 12] = 0\n 26076: u8 [a0 + 11] = 0\n 26079: u8 [a0 + 10] = 0\n 26082: u8 [a0 + 9] = 0\n 26085: u8 [a0 + 8] = 0\n 26088: u8 [a0 + 7] = 0\n 26091: u8 [a0 + 6] = 0\n 26094: u8 [a0 + 5] = 0\n 26097: u8 [a0 + 4] = 0\n 26100: u8 [a0 + 3] = 0xa0\n 26105: u8 [a0 + 2] = 0x79\n 26109: u8 [a0 + 1] = 0xc3\n 26114: u8 [a0 + 0] = 0x8\n 26117: a0 = s1 + 0x4\n 26120: a1 = a0 <u s1\n 26123: a3 = u64 [sp + 0x50]\n 26126: a2 = a3 + a1\n 26129: a3 = a2 <u a3\n 26132: a3 = a1 if a1 == 0\n 26135: s1 = u64 [sp + 0x30]\n 26138: a3 = a3 + s1\n 26141: a1 = a3 <u s1\n 26144: a4 = u64 [sp + 0x58]\n 26147: a4 = a4 + a1\n 26150: u64 [sp + 0x168] = a2\n 26154: u64 [sp + 0x160] = a0\n 26158: u64 [sp + 0x170] = a3\n 26162: a0 = sp + 0x180\n 26166: a1 = sp + 0x160\n 26170: u64 [sp + 0x178] = a4\n 26174: ra = 356, jump @366\n      : @413 [@dyn 178] (gas: 30)\n 26180: a0 = u64 [sp + 0x188]\n 26184: t0 = u64 [sp + 0x198]\n 26188: t1 = u64 [sp + 0x180]\n 26192: a3 = u64 [sp + 0x190]\n 26196: a1 = u64 [sp + 0x50]\n 26199: a4 = a0 ^ a1\n 26202: a5 = a0 <u a1\n 26205: t2 = a1\n 26207: a2 = u64 [sp + 0x38]\n 26210: a1 = t1 <u a2\n 26213: a5 = a1 if a4 == 0\n 26216: a4 = a3 - s1\n 26219: a3 = a3 <u s1\n 26222: s1 = u64 [sp + 0x58]\n 26225: s1 = t0 - s1\n 26228: s1 = s1 - a3\n 26231: a3 = a4 <u a5\n 26234: s1 = s1 - a3\n 26237: a4 = a4 - a5\n 26240: a0 = a0 - t2\n 26243: a1 = a0 - a1\n 26246: a0 = t1 - a2\n 26249: a1 = a1 | s1\n 26252: a2 = a0 | a4\n 26255: a2 = a2 | a1\n 26258: a1 = a1 | a4\n 26261: a2 = a2 >> 0x20\n 26264: a1 = a1 << 0x20\n 26267: a1 = a1 | a2\n 26270: jump @415 if a1 == 0\n      : @414 (gas: 1)\n 26273: trap\n      : @415 (gas: 4)\n 26274: i32 s1 = a0 + 0\n 26276: a0 = u64 [sp + 0xb8]\n 26280: a1 = s1\n 26282: ra = 358, jump @0\n      : @416 [@dyn 179] (gas: 6)\n 26288: i32 a1 = a0 + 0\n 26290: a0 = 0x1\n 26293: a2 = s1\n 26295: ra = 0x168\n 26299: ecalli 13 // 'seal_return'\n 26301: fallthrough\n      : @417 [@dyn 180] (gas: 53)\n 26302: sp = sp + 0xffffffffffffff30\n 26306: u64 [sp + 0xc8] = ra\n 26310: u64 [sp + 0xc0] = s0\n 26314: u64 [sp + 0xb8] = s1\n 26318: s0 = sp + 0xd0\n 26322: sp = sp & 0xfffffffffffffff0\n 26325: a4 = u64 [a0]\n 26327: u64 [sp + 0x28] = a4\n 26330: a4 = u64 [a0 + 0x8]\n 26333: u64 [sp + 0x20] = a4\n 26336: a4 = u64 [a0 + 0x10]\n 26339: u64 [sp + 0x18] = a4\n 26342: a0 = u64 [a0 + 0x18]\n 26345: u64 [sp + 0x10] = a0\n 26348: a0 = u64 [a1]\n 26350: u64 [sp + 0x8] = a0\n 26353: ra = u64 [a1 + 0x8]\n 26356: s1 = u64 [a1 + 0x10]\n 26359: t2 = u64 [a1 + 0x18]\n 26362: t1 = u64 [a2]\n 26364: t0 = u64 [a2 + 0x8]\n 26367: a5 = u64 [a2 + 0x10]\n 26370: a4 = u64 [a2 + 0x18]\n 26373: a2 = u64 [a3]\n 26375: a1 = u64 [a3 + 0x8]\n 26378: a0 = u64 [a3 + 0x10]\n 26381: a3 = u64 [a3 + 0x18]\n 26384: u64 [sp + 0x48] = a3\n 26387: u64 [sp + 0x40] = a0\n 26390: u64 [sp + 0x38] = a1\n 26393: u64 [sp + 0x30] = a2\n 26396: u64 [sp + 0x68] = a4\n 26399: u64 [sp + 0x60] = a5\n 26402: u64 [sp + 0x58] = t0\n 26405: u64 [sp + 0x50] = t1\n 26408: u64 [sp + 0x88] = t2\n 26412: u64 [sp + 0x80] = s1\n 26416: u64 [sp + 0x78] = ra\n 26419: a0 = u64 [sp + 0x8]\n 26422: u64 [sp + 0x70] = a0\n 26425: a0 = u64 [sp + 0x10]\n 26428: u64 [sp + 0xa8] = a0\n 26432: a0 = u64 [sp + 0x18]\n 26435: u64 [sp + 0xa0] = a0\n 26439: a0 = u64 [sp + 0x20]\n 26442: u64 [sp + 0x98] = a0\n 26446: a0 = sp + 0x90\n 26450: a1 = sp + 0x70\n 26453: a2 = sp + 0x50\n 26456: a3 = sp + 0x30\n 26459: a4 = u64 [sp + 0x28]\n 26462: u64 [sp + 0x90] = a4\n 26466: ra = 362, jump @314\n      : @418 [@dyn 181] (gas: 6)\n 26472: sp = s0 + 0xffffffffffffff30\n 26476: ra = u64 [sp + 0xc8]\n 26480: s0 = u64 [sp + 0xc0]\n 26484: s1 = u64 [sp + 0xb8]\n 26488: sp = sp + 0xd0\n 26492: ret\n      : @419 (gas: 17)\n 26494: sp = sp + 0xffffffffffffffa0\n 26497: u64 [sp + 0x58] = ra\n 26500: u64 [sp + 0x50] = s0\n 26503: u64 [sp + 0x48] = s1\n 26506: a3 = u64 [a1 + 0x18]\n 26509: a4 = u64 [a1 + 0x10]\n 26512: a5 = u64 [a1 + 0x8]\n 26515: s1 = u64 [a1]\n 26517: a1 = a5 | a3\n 26520: a2 = s1 | a4\n 26523: a2 = a2 | a1\n 26526: a2 = a2 >> 0x20\n 26529: a1 = a1 | a4\n 26532: a1 = a1 << 0x20\n 26535: a1 = a1 | a2\n 26538: u64 [sp + 0x28] = a0\n 26541: jump @426 if a1 != 0\n      : @420 (gas: 19)\n 26545: a0 = s1 + 0x20\n 26548: u64 [sp + 0x30] = a0\n 26551: a0 = a0 <u s1\n 26554: a1 = a5 + a0\n 26557: u64 [sp + 0x40] = a1\n 26560: u64 [sp + 0x8] = a5\n 26563: s0 = a1 <u a5\n 26566: s0 = a0 if a0 == 0\n 26569: s0 = s0 + a4\n 26572: u64 [sp + 0x10] = a4\n 26575: a0 = s0 <u a4\n 26578: u64 [sp + 0x18] = a3\n 26581: a0 = a0 + a3\n 26584: u64 [sp + 0x38] = a0\n 26587: u64 [sp] = s1\n 26589: i32 a0 = s1 + 0\n 26591: a1 = 0x20\n 26594: s1 = 0x20\n 26597: ra = 364, jump @0\n      : @421 [@dyn 182] (gas: 45)\n 26603: u8 [a0 + 0x1f] = s1\n 26606: a1 = u64 [sp + 0x30]\n 26609: s1 = a1\n 26611: a1 = a1 | s0\n 26614: a2 = u64 [sp + 0x40]\n 26617: a4 = u64 [sp + 0x38]\n 26620: a2 = a2 | a4\n 26623: a1 = a1 | a2\n 26626: a1 = a1 >> 0x20\n 26629: u64 [sp + 0x20] = s0\n 26632: a2 = a2 | s0\n 26635: a2 = a2 << 0x20\n 26638: a1 = a1 | a2\n 26641: u8 [a0 + 30] = 0\n 26644: u8 [a0 + 29] = 0\n 26647: u8 [a0 + 28] = 0\n 26650: u8 [a0 + 27] = 0\n 26653: u8 [a0 + 26] = 0\n 26656: u8 [a0 + 25] = 0\n 26659: u8 [a0 + 24] = 0\n 26662: u8 [a0 + 23] = 0\n 26665: u8 [a0 + 22] = 0\n 26668: u8 [a0 + 21] = 0\n 26671: u8 [a0 + 20] = 0\n 26674: u8 [a0 + 19] = 0\n 26677: u8 [a0 + 18] = 0\n 26680: u8 [a0 + 17] = 0\n 26683: u8 [a0 + 16] = 0\n 26686: u8 [a0 + 15] = 0\n 26689: u8 [a0 + 14] = 0\n 26692: u8 [a0 + 13] = 0\n 26695: u8 [a0 + 12] = 0\n 26698: u8 [a0 + 11] = 0\n 26701: u8 [a0 + 10] = 0\n 26704: u8 [a0 + 9] = 0\n 26707: u8 [a0 + 8] = 0\n 26710: u8 [a0 + 7] = 0\n 26713: u8 [a0 + 6] = 0\n 26716: u8 [a0 + 5] = 0\n 26719: u8 [a0 + 4] = 0\n 26722: u8 [a0 + 3] = 0\n 26725: u8 [a0 + 2] = 0\n 26728: u8 [a0 + 1] = 0\n 26731: u8 [a0 + 0] = 0\n 26733: jump @426 if a1 != 0\n      : @422 (gas: 4)\n 26737: i32 s0 = s1 + 0\n 26739: a1 = 0x20\n 26742: a0 = s0\n 26744: ra = 366, jump @0\n      : @423 [@dyn 183] (gas: 41)\n 26750: u8 [a0 + 31] = 0x1e\n 26754: u8 [a0 + 30] = 0\n 26757: u8 [a0 + 29] = 0\n 26760: u8 [a0 + 28] = 0\n 26763: u8 [a0 + 27] = 0\n 26766: u8 [a0 + 26] = 0\n 26769: u8 [a0 + 25] = 0\n 26772: u8 [a0 + 24] = 0\n 26775: u8 [a0 + 23] = 0\n 26778: u8 [a0 + 22] = 0\n 26781: u8 [a0 + 21] = 0\n 26784: u8 [a0 + 20] = 0\n 26787: u8 [a0 + 19] = 0\n 26790: u8 [a0 + 18] = 0\n 26793: u8 [a0 + 17] = 0\n 26796: u8 [a0 + 16] = 0\n 26799: u8 [a0 + 15] = 0\n 26802: u8 [a0 + 14] = 0\n 26805: u8 [a0 + 13] = 0\n 26808: u8 [a0 + 12] = 0\n 26811: u8 [a0 + 11] = 0\n 26814: u8 [a0 + 10] = 0\n 26817: u8 [a0 + 9] = 0\n 26820: u8 [a0 + 8] = 0\n 26823: u8 [a0 + 7] = 0\n 26826: u8 [a0 + 6] = 0\n 26829: u8 [a0 + 5] = 0\n 26832: u8 [a0 + 4] = 0\n 26835: u8 [a0 + 3] = 0\n 26838: u8 [a0 + 2] = 0\n 26841: u8 [a0 + 1] = 0\n 26844: a1 = u64 [sp + 0x20]\n 26847: a2 = u64 [sp + 0x38]\n 26850: a1 = a1 | a2\n 26853: a2 = 0xffffffe0\n 26863: a2 = s1 <u a2\n 26866: a3 = u64 [sp + 0x40]\n 26869: a2 = 0 if a3 != 0\n 26871: a2 = 0 if a1 != 0\n 26873: u8 [a0 + 0] = 0\n 26875: jump @426 if a2 == 0\n      : @424 (gas: 3)\n 26879: i32 a0 = s0 + 0x20\n 26882: a1 = 0x20\n 26885: ra = 368, jump @0\n      : @425 [@dyn 184] (gas: 54)\n 26891: u8 [a0 + 27] = 0x73\n 26895: u8 [a0 + 20] = 0x6e\n 26899: u8 [a0 + 26] = 0x69\n 26903: u8 [a0 + 23] = 0x69\n 26907: u8 [a0 + 21] = 0x69\n 26911: u8 [a0 + 19] = 0x69\n 26915: u8 [a0 + 17] = 0x79\n 26919: u8 [a0 + 29] = 0x64\n 26923: u8 [a0 + 16] = 0x64\n 26927: u8 [a0 + 13] = 0x72\n 26931: u8 [a0 + 22] = 0x74\n 26935: u8 [a0 + 9] = 0x74\n 26939: u8 [a0 + 28] = 0x65\n 26943: u8 [a0 + 14] = 0x65\n 26947: u8 [a0 + 8] = 0x65\n 26951: u8 [a0 + 25] = 0x6c\n 26955: u8 [a0 + 12] = 0x6c\n 26959: u8 [a0 + 7] = 0x6c\n 26963: u8 [a0 + 6] = 0x6c\n 26967: u8 [a0 + 24] = 0x61\n 26971: u8 [a0 + 15] = 0x61\n 26975: u8 [a0 + 11] = 0x61\n 26979: u8 [a0 + 5] = 0x61\n 26983: u8 [a0 + 4] = 0x77\n 26987: u8 [a0 + 31] = 0\n 26990: u8 [a0 + 30] = 0\n 26993: u8 [a0 + 18] = 0x20\n 26997: u8 [a0 + 10] = 0x20\n 27001: u8 [a0 + 3] = 0x20\n 27005: u8 [a0 + 2] = 0x3a\n 27009: u8 [a0 + 1] = 0x57\n 27013: u8 [a0 + 0] = 0x53\n 27016: a1 = u64 [sp]\n 27018: a0 = a1 + 0x60\n 27021: a1 = a0 <u a1\n 27024: a3 = u64 [sp + 0x8]\n 27027: a2 = a3 + a1\n 27030: a3 = a2 <u a3\n 27033: a3 = a1 if a1 == 0\n 27036: a1 = u64 [sp + 0x10]\n 27039: a3 = a3 + a1\n 27042: a1 = a3 <u a1\n 27045: a4 = u64 [sp + 0x18]\n 27048: a1 = a1 + a4\n 27051: a4 = u64 [sp + 0x28]\n 27054: u64 [a4] = a0\n 27056: u64 [a4 + 0x8] = a2\n 27059: u64 [a4 + 0x10] = a3\n 27062: u64 [a4 + 0x18] = a1\n 27065: ra = u64 [sp + 0x58]\n 27068: s0 = u64 [sp + 0x50]\n 27071: s1 = u64 [sp + 0x48]\n 27074: sp = sp + 0x60\n 27077: ret\n      : @426 (gas: 1)\n 27079: trap\n      : @427 (gas: 6)\n 27080: a0 = u64 [sp + 0x2a0]\n 27084: a1 = u32 [sp + 0x2b0]\n 27088: a2 = u64 [sp + 0x2a8]\n 27092: a0 = a0 | a1\n 27095: a0 = a0 | a2\n 27098: jump @453 if a0 != 0\n      : @428 (gas: 16)\n 27102: u64 [sp + 664] = 0\n 27106: u64 [sp + 656] = 0\n 27110: u64 [sp + 648] = 0\n 27114: u64 [sp + 640] = 0x2\n 27119: u64 [sp + 696] = 0\n 27123: u64 [sp + 688] = 0\n 27127: u64 [sp + 680] = 0\n 27131: u64 [sp + 672] = 0\n 27135: u32 [sp + 608] = 0x20\n 27140: i32 a1 = sp + 0x280\n 27144: i32 a3 = sp + 0x2a0\n 27148: i32 a4 = sp + 0x260\n 27152: a2 = 0xffffffffffffffff\n 27155: a0 = 0\n 27157: ecalli 8 // 'get_storage'\n 27159: fallthrough\n      : @429 (gas: 8)\n 27160: a0 = u64 [sp + 0x2b0]\n 27164: a1 = u64 [sp + 0x2b8]\n 27168: a2 = u64 [sp + 0x2a8]\n 27172: a3 = u64 [sp + 0x2a0]\n 27176: a1 = a1 | a2\n 27179: a0 = a0 | a3\n 27182: a0 = a0 | a1\n 27185: jump @453 if a0 != 0\n      : @430 (gas: 13)\n 27189: a0 = 0xffffffff\n 27199: a1 = u64 [sp + 0x108]\n 27203: a4 = a1 & 0xffffffffffffffff\n 27206: a1 = u64 [sp + 0x118]\n 27210: a3 = a1 & 0xffffffffffffffff\n 27213: a1 = u64 [sp + 0x110]\n 27217: a1 = a1 & a0\n 27220: u64 [sp + 0xe8] = a3\n 27224: u64 [sp + 0xd8] = a1\n 27228: a1 = a1 | a3\n 27231: u64 [sp + 0xe0] = a4\n 27235: a1 = a1 | a4\n 27238: jump @458 if a1 == 0\n      : @431 (gas: 46)\n 27242: a1 = u64 [sp + 0xf0]\n 27246: a1 = a1 & 0xffffffffffffffff\n 27249: u64 [sp + 0xf0] = a1\n 27253: a1 = u64 [sp + 0xf8]\n 27257: a1 = a1 & 0xffffffffffffffff\n 27260: u64 [sp + 0xf8] = a1\n 27264: s1 = u64 [sp + 0x100]\n 27268: s1 = s1 & a0\n 27271: u64 [sp + 664] = 0\n 27275: u64 [sp + 656] = 0\n 27279: u64 [sp + 648] = 0\n 27283: u64 [sp + 640] = 0\n 27287: u64 [sp + 696] = 0\n 27291: u64 [sp + 688] = 0\n 27295: u64 [sp + 680] = 0\n 27299: u64 [sp + 672] = 0\n 27303: u32 [sp + 608] = 0x20\n 27308: i32 a1 = sp + 0x280\n 27312: i32 a3 = sp + 0x2a0\n 27316: i32 a4 = sp + 0x260\n 27320: a2 = 0xffffffffffffffff\n 27323: a0 = 0\n 27325: ecalli 8 // 'get_storage'\n 27327: a0 = u32 [sp + 0x2b4]\n 27331: a0 = a0 << 0x20\n 27334: a1 = u64 [sp + 0x2b8]\n 27338: a0 = a0 | s1\n 27341: u64 [sp + 664] = 0\n 27345: u64 [sp + 656] = 0\n 27349: u64 [sp + 648] = 0\n 27353: u64 [sp + 640] = 0\n 27357: u64 [sp + 0x2b8] = a1\n 27361: u64 [sp + 0x2b0] = a0\n 27365: a0 = u64 [sp + 0xf8]\n 27369: u64 [sp + 0x2a8] = a0\n 27373: a0 = u64 [sp + 0xf0]\n 27377: u64 [sp + 0x2a0] = a0\n 27381: i32 a1 = sp + 0x280\n 27385: i32 a3 = sp + 0x2a0\n 27389: a2 = 0xffffffffffffffff\n 27392: a4 = 0x20\n 27395: a0 = 0\n 27397: ecalli 15 // 'set_storage'\n 27399: a1 = 0x20\n 27402: a0 = 0\n 27404: ra = 370, jump @0\n      : @432 [@dyn 185] (gas: 80)\n 27410: a1 = u64 [sp + 0xd8]\n 27414: a3 = reverse a1\n 27416: a1 = u64 [sp + 0xe0]\n 27420: a4 = reverse a1\n 27422: a1 = u64 [sp + 0xe8]\n 27426: a2 = reverse a1\n 27428: a1 = a2 >> 0x38\n 27431: u64 [sp + 0xa8] = a1\n 27435: u8 [a0 + 0x1f] = a1\n 27438: a1 = a2 >> 0x30\n 27441: u64 [sp + 0xa0] = a1\n 27445: u8 [a0 + 0x1e] = a1\n 27448: a1 = a2 >> 0x28\n 27451: u64 [sp + 0x98] = a1\n 27455: u8 [a0 + 0x1d] = a1\n 27458: a1 = a2 >> 0x20\n 27461: u64 [sp + 0x90] = a1\n 27465: u8 [a0 + 0x1c] = a1\n 27468: a1 = a2 >> 0x18\n 27471: u64 [sp + 0x88] = a1\n 27475: u8 [a0 + 0x1b] = a1\n 27478: a1 = a2 >> 0x10\n 27481: u64 [sp + 0x80] = a1\n 27485: u8 [a0 + 0x1a] = a1\n 27488: a1 = a2 >> 0x8\n 27491: u64 [sp + 0x78] = a1\n 27494: u8 [a0 + 0x19] = a1\n 27497: u64 [sp + 0x70] = a2\n 27500: u8 [a0 + 0x18] = a2\n 27503: a1 = a4 >> 0x38\n 27506: u64 [sp + 0x60] = a1\n 27509: u8 [a0 + 0x17] = a1\n 27512: a1 = a4 >> 0x30\n 27515: u64 [sp + 0x58] = a1\n 27518: u8 [a0 + 0x16] = a1\n 27521: a1 = a4 >> 0x28\n 27524: u64 [sp + 0x50] = a1\n 27527: u8 [a0 + 0x15] = a1\n 27530: a1 = a4 >> 0x20\n 27533: u64 [sp + 0x48] = a1\n 27536: u8 [a0 + 0x14] = a1\n 27539: a1 = a4 >> 0x18\n 27542: u64 [sp + 0x40] = a1\n 27545: u8 [a0 + 0x13] = a1\n 27548: a1 = a4 >> 0x10\n 27551: u64 [sp + 0x30] = a1\n 27554: u8 [a0 + 0x12] = a1\n 27557: a1 = a4 >> 0x8\n 27560: u64 [sp + 0x28] = a1\n 27563: u8 [a0 + 0x11] = a1\n 27566: u64 [sp + 0x38] = a4\n 27569: u8 [a0 + 0x10] = a4\n 27572: a1 = a3 >> 0x38\n 27575: u64 [sp + 0x20] = a1\n 27578: u8 [a0 + 0xf] = a1\n 27581: a1 = a3 >> 0x30\n 27584: u64 [sp + 0x18] = a1\n 27587: u8 [a0 + 0xe] = a1\n 27590: a1 = a3 >> 0x28\n 27593: u64 [sp + 0x10] = a1\n 27596: u8 [a0 + 0xd] = a1\n 27599: a1 = a3 >> 0x20\n 27602: u64 [sp + 0x8] = a1\n 27605: u8 [a0 + 0xc] = a1\n 27608: u8 [a0 + 11] = 0\n 27611: u8 [a0 + 10] = 0\n 27614: u8 [a0 + 9] = 0\n 27617: u64 [sp + 0x68] = a3\n 27620: u8 [a0 + 0x8] = a3\n 27623: u8 [a0 + 7] = 0\n 27626: u8 [a0 + 6] = 0\n 27629: u8 [a0 + 5] = 0\n 27632: u8 [a0 + 4] = 0\n 27635: u8 [a0 + 3] = 0\n 27638: u8 [a0 + 2] = 0\n 27641: u8 [a0 + 1] = 0\n 27644: u8 [a0 + 0] = 0\n 27646: a0 = 0x20\n 27649: a1 = 0x20\n 27652: ra = 372, jump @0\n      : @433 [@dyn 186] (gas: 35)\n 27658: u8 [a0 + 31] = 0x1\n 27662: u8 [a0 + 30] = 0\n 27665: u8 [a0 + 29] = 0\n 27668: u8 [a0 + 28] = 0\n 27671: u8 [a0 + 27] = 0\n 27674: u8 [a0 + 26] = 0\n 27677: u8 [a0 + 25] = 0\n 27680: u8 [a0 + 24] = 0\n 27683: u8 [a0 + 23] = 0\n 27686: u8 [a0 + 22] = 0\n 27689: u8 [a0 + 21] = 0\n 27692: u8 [a0 + 20] = 0\n 27695: u8 [a0 + 19] = 0\n 27698: u8 [a0 + 18] = 0\n 27701: u8 [a0 + 17] = 0\n 27704: u8 [a0 + 16] = 0\n 27707: u8 [a0 + 15] = 0\n 27710: u8 [a0 + 14] = 0\n 27713: u8 [a0 + 13] = 0\n 27716: u8 [a0 + 12] = 0\n 27719: u8 [a0 + 11] = 0\n 27722: u8 [a0 + 10] = 0\n 27725: u8 [a0 + 9] = 0\n 27728: u8 [a0 + 8] = 0\n 27731: u8 [a0 + 7] = 0\n 27734: u8 [a0 + 6] = 0\n 27737: u8 [a0 + 5] = 0\n 27740: u8 [a0 + 4] = 0\n 27743: u8 [a0 + 3] = 0\n 27746: u8 [a0 + 2] = 0\n 27749: u8 [a0 + 1] = 0\n 27752: u8 [a0 + 0] = 0\n 27754: a1 = 0x40\n 27757: a0 = 0\n 27759: ra = 374, jump @0\n      : @434 [@dyn 187] (gas: 113)\n 27765: i32 a0 = a0 + 0\n 27767: i32 a2 = sp + 0x2a0\n 27771: a1 = 0x40\n 27774: ecalli 9 // 'hash_keccak_256'\n 27776: a0 = u64 [sp + 0x2b8]\n 27780: a1 = u64 [sp + 0x2b0]\n 27784: a2 = u64 [sp + 0x2a8]\n 27788: a3 = u64 [sp + 0x2a0]\n 27792: a0 = reverse a0\n 27794: u64 [sp + 0x100] = a0\n 27798: a1 = reverse a1\n 27800: u64 [sp + 0xf8] = a1\n 27804: a2 = reverse a2\n 27806: u64 [sp + 0xf0] = a2\n 27810: s1 = reverse a3\n 27812: u64 [sp + 0x298] = s1\n 27816: u64 [sp + 0x290] = a2\n 27820: u64 [sp + 0x288] = a1\n 27824: u64 [sp + 0x280] = a0\n 27828: u64 [sp + 696] = 0\n 27832: u64 [sp + 688] = 0\n 27836: u64 [sp + 680] = 0\n 27840: u64 [sp + 672] = 0\n 27844: u32 [sp + 608] = 0x20\n 27849: i32 a1 = sp + 0x280\n 27853: i32 a3 = sp + 0x2a0\n 27857: i32 a4 = sp + 0x260\n 27861: a2 = 0xffffffffffffffff\n 27864: a0 = 0\n 27866: ecalli 8 // 'get_storage'\n 27868: a0 = u64 [sp + 0x2a0]\n 27872: a1 = u64 [sp + 0x2a8]\n 27876: a2 = u64 [sp + 0x2b0]\n 27880: a3 = u64 [sp + 0x2b8]\n 27884: a0 = a0 & 0xffffffffffffff00\n 27888: a0 = a0 | 0x1\n 27891: u64 [sp + 0x298] = s1\n 27895: a4 = u64 [sp + 0xf0]\n 27899: u64 [sp + 0x290] = a4\n 27903: a4 = u64 [sp + 0xf8]\n 27907: u64 [sp + 0x288] = a4\n 27911: a4 = u64 [sp + 0x100]\n 27915: u64 [sp + 0x280] = a4\n 27919: u64 [sp + 0x2b8] = a3\n 27923: u64 [sp + 0x2b0] = a2\n 27927: u64 [sp + 0x2a8] = a1\n 27931: u64 [sp + 0x2a0] = a0\n 27935: i32 a1 = sp + 0x280\n 27939: i32 a3 = sp + 0x2a0\n 27943: a2 = 0xffffffffffffffff\n 27946: a4 = 0x20\n 27949: a0 = 0\n 27951: ecalli 15 // 'set_storage'\n 27953: u64 [sp + 664] = 0\n 27957: u64 [sp + 656] = 0\n 27961: u64 [sp + 648] = 0\n 27965: s1 = 0x2\n 27968: u64 [sp + 0x280] = s1\n 27972: u64 [sp + 696] = 0\n 27976: u64 [sp + 688] = 0\n 27980: u64 [sp + 680] = 0\n 27984: u64 [sp + 672] = 0\n 27988: u32 [sp + 608] = 0x20\n 27993: i32 a1 = sp + 0x280\n 27997: i32 a3 = sp + 0x2a0\n 28001: i32 a4 = sp + 0x260\n 28005: a2 = 0xffffffffffffffff\n 28008: a0 = 0\n 28010: ecalli 8 // 'get_storage'\n 28012: u64 [sp + 664] = 0\n 28016: u64 [sp + 656] = 0\n 28020: u64 [sp + 648] = 0\n 28024: u64 [sp + 0x280] = s1\n 28028: u64 [sp + 696] = 0\n 28032: u64 [sp + 688] = 0\n 28036: u64 [sp + 680] = 0\n 28040: u64 [sp + 672] = 0x1\n 28045: i32 a1 = sp + 0x280\n 28049: i32 a3 = sp + 0x2a0\n 28053: a2 = 0xffffffffffffffff\n 28056: a4 = 0x20\n 28059: a0 = 0\n 28061: ecalli 15 // 'set_storage'\n 28063: i32 a0 = sp + 0x1a0\n 28067: ecalli 0 // 'address'\n 28068: a0 = i32 [sp + 0x1b0]\n 28072: u64 [sp + 0xe8] = a0\n 28076: a0 = u64 [sp + 0x1a0]\n 28080: u64 [sp + 0xe0] = a0\n 28084: a0 = u64 [sp + 0x1a8]\n 28088: u64 [sp + 0xd8] = a0\n 28092: a0 = u64 [sp + 0x108]\n 28096: a0 = reverse a0\n 28098: a1 = a0 << 0x20\n 28101: a2 = u64 [sp + 0x110]\n 28105: a2 = reverse a2\n 28107: a2 = a2 >> 0x20\n 28110: a3 = a2 | a1\n 28113: a1 = u64 [sp + 0x118]\n 28117: a1 = reverse a1\n 28119: a2 = a1 << 0x20\n 28122: a0 = a0 >> 0x20\n 28125: a0 = a0 | a2\n 28128: a1 = a1 >> 0x20\n 28131: u64 [sp + 0xf0] = a0\n 28135: u64 [sp + 0x1c8] = a0\n 28139: u64 [sp + 0x100] = a3\n 28143: u64 [sp + 0x1c0] = a3\n 28147: u64 [sp + 0xf8] = a1\n 28151: u32 [sp + 0x1d0] = a1\n 28155: i32 a0 = sp + 0x1c0\n 28159: ecalli 6 // 'code_size'\n 28161: fallthrough\n      : @435 (gas: 1)\n 28162: jump @466 if a0 == 0\n      : @436 (gas: 3)\n 28166: a0 = 0x40\n 28169: a1 = 0x20\n 28172: ra = 376, jump @0\n      : @437 [@dyn 188] (gas: 106)\n 28178: a1 = u8 [a0 + 0x11]\n 28181: a2 = u8 [a0 + 0x10]\n 28184: a3 = u8 [a0 + 0x12]\n 28187: a4 = u8 [a0 + 0x13]\n 28190: a1 = a1 << 0x8\n 28193: a1 = a1 | a2\n 28196: a3 = a3 << 0x10\n 28199: a4 = a4 << 0x18\n 28202: a3 = a3 | a4\n 28205: a1 = a1 | a3\n 28208: a2 = u8 [a0 + 0x15]\n 28211: a3 = u8 [a0 + 0x14]\n 28214: a4 = u8 [a0 + 0x16]\n 28217: a5 = u8 [a0 + 0x17]\n 28220: a2 = a2 << 0x8\n 28223: a2 = a2 | a3\n 28226: a4 = a4 << 0x10\n 28229: a5 = a5 << 0x18\n 28232: a4 = a4 | a5\n 28235: a2 = a2 | a4\n 28238: a2 = a2 << 0x20\n 28241: t1 = a2 | a1\n 28244: a1 = u8 [a0 + 0x1]\n 28247: a2 = u8 [a0]\n 28249: a3 = u8 [a0 + 0x2]\n 28252: a4 = u8 [a0 + 0x3]\n 28255: a1 = a1 << 0x8\n 28258: a1 = a1 | a2\n 28261: a3 = a3 << 0x10\n 28264: a4 = a4 << 0x18\n 28267: a3 = a3 | a4\n 28270: a1 = a1 | a3\n 28273: a2 = u8 [a0 + 0x5]\n 28276: a3 = u8 [a0 + 0x4]\n 28279: a4 = u8 [a0 + 0x6]\n 28282: a5 = u8 [a0 + 0x7]\n 28285: a2 = a2 << 0x8\n 28288: a2 = a2 | a3\n 28291: a4 = a4 << 0x10\n 28294: a5 = a5 << 0x18\n 28297: a4 = a4 | a5\n 28300: a2 = a2 | a4\n 28303: a2 = a2 << 0x20\n 28306: t0 = a2 | a1\n 28309: a1 = u8 [a0 + 0x19]\n 28312: a2 = u8 [a0 + 0x18]\n 28315: a3 = u8 [a0 + 0x1a]\n 28318: a4 = u8 [a0 + 0x1b]\n 28321: a1 = a1 << 0x8\n 28324: a1 = a1 | a2\n 28327: a3 = a3 << 0x10\n 28330: a4 = a4 << 0x18\n 28333: a3 = a3 | a4\n 28336: a1 = a1 | a3\n 28339: a2 = u8 [a0 + 0x1d]\n 28342: a3 = u8 [a0 + 0x1c]\n 28345: a4 = u8 [a0 + 0x1e]\n 28348: a5 = u8 [a0 + 0x1f]\n 28351: a2 = a2 << 0x8\n 28354: a2 = a2 | a3\n 28357: a4 = a4 << 0x10\n 28360: a5 = a5 << 0x18\n 28363: a4 = a4 | a5\n 28366: a2 = a2 | a4\n 28369: a2 = a2 << 0x20\n 28372: a5 = a2 | a1\n 28375: a1 = u8 [a0 + 0x9]\n 28378: a2 = u8 [a0 + 0x8]\n 28381: a3 = u8 [a0 + 0xa]\n 28384: a4 = u8 [a0 + 0xb]\n 28387: a1 = a1 << 0x8\n 28390: a1 = a1 | a2\n 28393: a3 = a3 << 0x10\n 28396: a4 = a4 << 0x18\n 28399: a3 = a3 | a4\n 28402: a1 = a1 | a3\n 28405: a2 = u8 [a0 + 0xd]\n 28408: a3 = u8 [a0 + 0xc]\n 28411: a4 = u8 [a0 + 0xe]\n 28414: a0 = u8 [a0 + 0xf]\n 28417: a2 = a2 << 0x8\n 28420: a2 = a2 | a3\n 28423: a4 = a4 << 0x10\n 28426: a0 = a0 << 0x18\n 28429: a0 = a0 | a4\n 28432: a0 = a0 | a2\n 28435: a0 = a0 << 0x20\n 28438: a0 = a0 | a1\n 28441: u64 [sp + 0xb0] = a0\n 28445: s1 = reverse a0\n 28447: u64 [sp + 0xb8] = a5\n 28451: a2 = reverse a5\n 28453: u64 [sp + 0xc8] = t0\n 28457: a1 = reverse t0\n 28459: u64 [sp + 0xc0] = t1\n 28463: a0 = reverse t1\n 28465: u64 [sp + 0x110] = a0\n 28469: u64 [sp + 0x108] = a1\n 28473: a0 = a0 | a1\n 28476: a1 = a2 | s1\n 28479: a1 = a1 | a0\n 28482: a1 = a1 >> 0x20\n 28485: a0 = a0 | s1\n 28488: a0 = a0 << 0x20\n 28491: a0 = a0 | a1\n 28494: jump @464 if a0 != 0\n      : @438 (gas: 5)\n 28498: i32 a0 = a2 + 0\n 28500: a1 = 0x20\n 28503: u64 [sp + 0x118] = a0\n 28507: u64 [sp + 0xd0] = a2\n 28511: ra = 378, jump @0\n      : @439 [@dyn 189] (gas: 41)\n 28517: u8 [a0 + 31] = 0\n 28520: u8 [a0 + 30] = 0\n 28523: u8 [a0 + 29] = 0\n 28526: u8 [a0 + 28] = 0\n 28529: u8 [a0 + 27] = 0\n 28532: u8 [a0 + 26] = 0\n 28535: u8 [a0 + 25] = 0\n 28538: u8 [a0 + 24] = 0\n 28541: u8 [a0 + 23] = 0\n 28544: u8 [a0 + 22] = 0\n 28547: u8 [a0 + 21] = 0\n 28550: u8 [a0 + 20] = 0\n 28553: u8 [a0 + 19] = 0\n 28556: u8 [a0 + 18] = 0\n 28559: u8 [a0 + 17] = 0\n 28562: u8 [a0 + 16] = 0\n 28565: u8 [a0 + 15] = 0\n 28568: u8 [a0 + 14] = 0\n 28571: u8 [a0 + 13] = 0\n 28574: u8 [a0 + 12] = 0\n 28577: u8 [a0 + 11] = 0\n 28580: u8 [a0 + 10] = 0\n 28583: u8 [a0 + 9] = 0\n 28586: u8 [a0 + 8] = 0\n 28589: u8 [a0 + 7] = 0\n 28592: u8 [a0 + 6] = 0\n 28595: u8 [a0 + 5] = 0\n 28598: u8 [a0 + 4] = 0\n 28601: u8 [a0 + 3] = 0x3c\n 28605: u8 [a0 + 2] = 0x45\n 28609: u8 [a0 + 1] = 0xab\n 28614: a1 = u64 [sp + 0x108]\n 28618: a1 = a1 | s1\n 28621: a2 = 0xfffffffc\n 28631: a3 = u64 [sp + 0xd0]\n 28635: a2 = a3 <u a2\n 28638: a4 = u64 [sp + 0x110]\n 28642: a2 = 0 if a4 != 0\n 28644: a2 = 0 if a1 != 0\n 28646: u8 [a0 + 0] = 0x19\n 28649: jump @464 if a2 == 0\n      : @440 (gas: 19)\n 28653: a0 = u64 [sp + 0xd8]\n 28657: a0 = reverse a0\n 28659: a1 = a0 >> 0x20\n 28662: a2 = u64 [sp + 0xe0]\n 28666: a2 = reverse a2\n 28668: a3 = a2 << 0x20\n 28671: a1 = a1 | a3\n 28674: u64 [sp + 0x110] = a1\n 28678: a0 = a0 << 0x20\n 28681: a1 = u64 [sp + 0xe8]\n 28685: a1 = reverse a1\n 28687: a1 = a1 >> 0x20\n 28690: a0 = a0 | a1\n 28693: u64 [sp + 0x108] = a0\n 28697: s1 = a2 >> 0x20\n 28700: a0 = u64 [sp + 0x118]\n 28704: i32 a0 = a0 + 0x4\n 28707: a1 = 0x20\n 28710: ra = 380, jump @0\n      : @441 [@dyn 190] (gas: 70)\n 28716: a1 = reverse s1\n 28718: a2 = u64 [sp + 0x110]\n 28722: a2 = reverse a2\n 28724: a3 = u64 [sp + 0x108]\n 28728: a3 = reverse a3\n 28730: a4 = a3 >> 0x38\n 28733: u8 [a0 + 0x1f] = a4\n 28736: a4 = a3 >> 0x30\n 28739: u8 [a0 + 0x1e] = a4\n 28742: a4 = a3 >> 0x28\n 28745: u8 [a0 + 0x1d] = a4\n 28748: a4 = a3 >> 0x20\n 28751: u8 [a0 + 0x1c] = a4\n 28754: a4 = a3 >> 0x18\n 28757: u8 [a0 + 0x1b] = a4\n 28760: a4 = a3 >> 0x10\n 28763: u8 [a0 + 0x1a] = a4\n 28766: a4 = a3 >> 0x8\n 28769: u8 [a0 + 0x19] = a4\n 28772: u8 [a0 + 0x18] = a3\n 28775: u8 [a0 + 0x10] = a2\n 28778: u8 [a0 + 11] = 0\n 28781: u8 [a0 + 10] = 0\n 28784: u8 [a0 + 9] = 0\n 28787: u8 [a0 + 7] = 0\n 28790: u8 [a0 + 6] = 0\n 28793: u8 [a0 + 5] = 0\n 28796: u8 [a0 + 4] = 0\n 28799: u8 [a0 + 3] = 0\n 28802: u8 [a0 + 2] = 0\n 28805: u8 [a0 + 1] = 0\n 28808: u8 [a0 + 0] = 0\n 28810: a3 = a2 >> 0x38\n 28813: u8 [a0 + 0x17] = a3\n 28816: a3 = a2 >> 0x30\n 28819: u8 [a0 + 0x16] = a3\n 28822: a3 = a2 >> 0x28\n 28825: u8 [a0 + 0x15] = a3\n 28828: a3 = a2 >> 0x20\n 28831: u8 [a0 + 0x14] = a3\n 28834: a3 = a2 >> 0x18\n 28837: u8 [a0 + 0x13] = a3\n 28840: a3 = a2 >> 0x10\n 28843: u8 [a0 + 0x12] = a3\n 28846: a2 = a2 >> 0x8\n 28849: u8 [a0 + 0x11] = a2\n 28852: u8 [a0 + 0x8] = a1\n 28855: a2 = a1 >> 0x38\n 28858: u8 [a0 + 0xf] = a2\n 28861: a2 = a1 >> 0x30\n 28864: u8 [a0 + 0xe] = a2\n 28867: a2 = a1 >> 0x28\n 28870: u8 [a0 + 0xd] = a2\n 28873: a1 = a1 >> 0x20\n 28876: u8 [a0 + 0xc] = a1\n 28879: ecalli 10 // 'ref_time_left'\n 28881: a0 = u64 [sp + 0xf0]\n 28885: u64 [sp + 0x1e8] = a0\n 28889: a0 = u64 [sp + 0x100]\n 28893: u64 [sp + 0x1e0] = a0\n 28897: a0 = u64 [sp + 0xf8]\n 28901: u32 [sp + 0x1f0] = a0\n 28905: u64 [sp + 536] = 0\n 28909: u64 [sp + 528] = 0\n 28913: u64 [sp + 520] = 0\n 28917: u64 [sp + 512] = 0\n 28921: a1 = 0x24\n 28924: s1 = u64 [sp + 0x118]\n 28928: a0 = s1\n 28930: ra = 382, jump @0\n      : @442 [@dyn 191] (gas: 4)\n 28936: u64 [sp + 0x110] = a0\n 28940: a0 = s1\n 28942: a1 = 0\n 28944: ra = 384, jump @0\n      : @443 [@dyn 192] (gas: 31)\n 28950: u32 [sp + 544] = 0\n 28954: u64 [sp + 600] = 0xffffffffffffffff\n 28959: u64 [sp + 592] = 0xffffffffffffffff\n 28964: u64 [sp + 584] = 0xffffffffffffffff\n 28969: u64 [sp + 576] = 0xffffffffffffffff\n 28974: a1 = sp + 0x1e0\n 28978: a1 = a1 << 0x20\n 28981: a1 = a1 >> 0x20\n 28984: s1 = 0x800000000\n 28994: s1 = s1 | a1\n 28997: a1 = sp + 0x200\n 29001: a1 = a1 << 0x20\n 29004: a1 = a1 >> 0x20\n 29007: a2 = sp + 0x240\n 29011: a2 = a2 << 0x20\n 29014: a3 = a2 | a1\n 29017: a1 = u64 [sp + 0x110]\n 29021: a1 = a1 << 0x20\n 29024: a1 = a1 >> 0x20\n 29027: a2 = 0x2400000000\n 29037: a4 = a1 | a2\n 29040: a0 = a0 << 0x20\n 29043: a0 = a0 >> 0x20\n 29046: a1 = sp + 0x220\n 29050: a1 = a1 << 0x20\n 29053: a5 = a1 | a0\n 29056: a1 = 0xffffffffffffffff\n 29059: a2 = 0xffffffffffffffff\n 29062: a0 = s1\n 29064: ecalli 1 // 'call'\n 29066: fallthrough\n      : @444 (gas: 1)\n 29067: jump @465 if a0 != 0\n      : @445 (gas: 4)\n 29071: ecalli 12 // 'return_data_size'\n 29073: a0 = 0x40\n 29076: a1 = 0x20\n 29079: ra = 386, jump @0\n      : @446 [@dyn 193] (gas: 67)\n 29085: a3 = u64 [sp + 0xb8]\n 29089: u8 [a0 + 0x18] = a3\n 29092: a2 = u64 [sp + 0xc0]\n 29096: a1 = a2 >> 0x38\n 29099: u8 [a0 + 0x17] = a1\n 29102: a1 = a2 >> 0x30\n 29105: u8 [a0 + 0x16] = a1\n 29108: a1 = a2 >> 0x28\n 29111: u8 [a0 + 0x15] = a1\n 29114: a1 = a2 >> 0x20\n 29117: u8 [a0 + 0x14] = a1\n 29120: a1 = a2 >> 0x18\n 29123: u8 [a0 + 0x13] = a1\n 29126: a1 = a2 >> 0x10\n 29129: u8 [a0 + 0x12] = a1\n 29132: a1 = a2 >> 0x8\n 29135: u8 [a0 + 0x11] = a1\n 29138: u8 [a0 + 0x10] = a2\n 29141: a2 = u64 [sp + 0xb0]\n 29145: a1 = a2 >> 0x38\n 29148: u8 [a0 + 0xf] = a1\n 29151: a1 = a2 >> 0x30\n 29154: u8 [a0 + 0xe] = a1\n 29157: a1 = a2 >> 0x28\n 29160: u8 [a0 + 0xd] = a1\n 29163: a1 = a2 >> 0x20\n 29166: u8 [a0 + 0xc] = a1\n 29169: a1 = a2 >> 0x18\n 29172: u8 [a0 + 0xb] = a1\n 29175: a1 = a2 >> 0x10\n 29178: u8 [a0 + 0xa] = a1\n 29181: a1 = a2 >> 0x8\n 29184: u8 [a0 + 0x9] = a1\n 29187: u8 [a0 + 0x8] = a2\n 29190: a2 = u64 [sp + 0xc8]\n 29194: a1 = a2 >> 0x38\n 29197: u8 [a0 + 0x7] = a1\n 29200: a1 = a2 >> 0x30\n 29203: u8 [a0 + 0x6] = a1\n 29206: a1 = a2 >> 0x28\n 29209: u8 [a0 + 0x5] = a1\n 29212: a1 = a2 >> 0x20\n 29215: u8 [a0 + 0x4] = a1\n 29218: a1 = a2 >> 0x18\n 29221: u8 [a0 + 0x3] = a1\n 29224: a1 = a2 >> 0x10\n 29227: u8 [a0 + 0x2] = a1\n 29230: a1 = a2 >> 0x8\n 29233: u8 [a0 + 0x1] = a1\n 29236: u8 [a0] = a2\n 29238: a1 = a3 >> 0x38\n 29241: u8 [a0 + 0x1f] = a1\n 29244: a1 = a3 >> 0x30\n 29247: u8 [a0 + 0x1e] = a1\n 29250: a1 = a3 >> 0x28\n 29253: u8 [a0 + 0x1d] = a1\n 29256: a1 = a3 >> 0x20\n 29259: u8 [a0 + 0x1c] = a1\n 29262: a1 = a3 >> 0x18\n 29265: u8 [a0 + 0x1b] = a1\n 29268: a1 = a3 >> 0x10\n 29271: u8 [a0 + 0x1a] = a1\n 29274: a1 = a3 >> 0x8\n 29277: u8 [a0 + 0x19] = a1\n 29280: a0 = 0x40\n 29283: a1 = 0x20\n 29286: ra = 388, jump @0\n      : @447 [@dyn 194] (gas: 102)\n 29292: a1 = u8 [a0 + 0x11]\n 29295: a2 = u8 [a0 + 0x10]\n 29298: a3 = u8 [a0 + 0x12]\n 29301: a4 = u8 [a0 + 0x13]\n 29304: a1 = a1 << 0x8\n 29307: a1 = a1 | a2\n 29310: a3 = a3 << 0x10\n 29313: a4 = a4 << 0x18\n 29316: a3 = a3 | a4\n 29319: a1 = a1 | a3\n 29322: a2 = u8 [a0 + 0x15]\n 29325: a3 = u8 [a0 + 0x14]\n 29328: a4 = u8 [a0 + 0x16]\n 29331: a5 = u8 [a0 + 0x17]\n 29334: a2 = a2 << 0x8\n 29337: a2 = a2 | a3\n 29340: a4 = a4 << 0x10\n 29343: a5 = a5 << 0x18\n 29346: a4 = a4 | a5\n 29349: a2 = a2 | a4\n 29352: a2 = a2 << 0x20\n 29355: t0 = a2 | a1\n 29358: a2 = u8 [a0 + 0x1]\n 29361: a3 = u8 [a0]\n 29363: a4 = u8 [a0 + 0x2]\n 29366: a5 = u8 [a0 + 0x3]\n 29369: a2 = a2 << 0x8\n 29372: a2 = a2 | a3\n 29375: a4 = a4 << 0x10\n 29378: a5 = a5 << 0x18\n 29381: a4 = a4 | a5\n 29384: a2 = a2 | a4\n 29387: a3 = u8 [a0 + 0x5]\n 29390: a4 = u8 [a0 + 0x4]\n 29393: a5 = u8 [a0 + 0x6]\n 29396: s1 = u8 [a0 + 0x7]\n 29399: a3 = a3 << 0x8\n 29402: a3 = a3 | a4\n 29405: a5 = a5 << 0x10\n 29408: s1 = s1 << 0x18\n 29411: a5 = a5 | s1\n 29414: a3 = a3 | a5\n 29417: a3 = a3 << 0x20\n 29420: a2 = a2 | a3\n 29423: a3 = u8 [a0 + 0x19]\n 29426: a4 = u8 [a0 + 0x18]\n 29429: a5 = u8 [a0 + 0x1a]\n 29432: s1 = u8 [a0 + 0x1b]\n 29435: a3 = a3 << 0x8\n 29438: a3 = a3 | a4\n 29441: a5 = a5 << 0x10\n 29444: s1 = s1 << 0x18\n 29447: a5 = a5 | s1\n 29450: a3 = a3 | a5\n 29453: a4 = u8 [a0 + 0x1d]\n 29456: a5 = u8 [a0 + 0x1c]\n 29459: s1 = u8 [a0 + 0x1e]\n 29462: a1 = u8 [a0 + 0x1f]\n 29465: a4 = a4 << 0x8\n 29468: a4 = a4 | a5\n 29471: s1 = s1 << 0x10\n 29474: a1 = a1 << 0x18\n 29477: a1 = a1 | s1\n 29480: a1 = a1 | a4\n 29483: a1 = a1 << 0x20\n 29486: a3 = a3 | a1\n 29489: a1 = u8 [a0 + 0x9]\n 29492: a4 = u8 [a0 + 0x8]\n 29495: a5 = u8 [a0 + 0xa]\n 29498: s1 = u8 [a0 + 0xb]\n 29501: a1 = a1 << 0x8\n 29504: a1 = a1 | a4\n 29507: a5 = a5 << 0x10\n 29510: s1 = s1 << 0x18\n 29513: a5 = a5 | s1\n 29516: a1 = a1 | a5\n 29519: a4 = u8 [a0 + 0xd]\n 29522: a5 = u8 [a0 + 0xc]\n 29525: s1 = u8 [a0 + 0xe]\n 29528: a0 = u8 [a0 + 0xf]\n 29531: a4 = a4 << 0x8\n 29534: a4 = a4 | a5\n 29537: s1 = s1 << 0x10\n 29540: a0 = a0 << 0x18\n 29543: a0 = a0 | s1\n 29546: a0 = a0 | a4\n 29549: a0 = a0 << 0x20\n 29552: a0 = a0 | a1\n 29555: s1 = reverse a0\n 29557: a3 = reverse a3\n 29559: a1 = reverse a2\n 29561: a0 = reverse t0\n 29563: u64 [sp + 0x118] = a0\n 29567: u64 [sp + 0x110] = a1\n 29571: a0 = a0 | a1\n 29574: a1 = a3 | s1\n 29577: a1 = a1 | a0\n 29580: a1 = a1 >> 0x20\n 29583: a0 = a0 | s1\n 29586: a0 = a0 << 0x20\n 29589: a0 = a0 | a1\n 29592: jump @464 if a0 != 0\n      : @448 (gas: 5)\n 29596: i32 a0 = a3 + 0\n 29598: a1 = 0x20\n 29601: u64 [sp + 0x100] = a0\n 29605: u64 [sp + 0x108] = a3\n 29609: ra = 390, jump @0\n      : @449 [@dyn 195] (gas: 65)\n 29615: a1 = u64 [sp + 0x38]\n 29618: u8 [a0 + 0x10] = a1\n 29621: a1 = u64 [sp + 0x20]\n 29624: u8 [a0 + 0xf] = a1\n 29627: a1 = u64 [sp + 0x18]\n 29630: u8 [a0 + 0xe] = a1\n 29633: a1 = u64 [sp + 0x10]\n 29636: u8 [a0 + 0xd] = a1\n 29639: a1 = u64 [sp + 0x8]\n 29642: u8 [a0 + 0xc] = a1\n 29645: a2 = u64 [sp + 0x68]\n 29648: a1 = a2 >> 0x18\n 29651: u8 [a0 + 0xb] = a1\n 29654: a1 = a2 >> 0x10\n 29657: u8 [a0 + 0xa] = a1\n 29660: a1 = a2 >> 0x8\n 29663: u8 [a0 + 0x9] = a1\n 29666: u8 [a0 + 0x8] = a2\n 29669: a1 = u64 [sp + 0x70]\n 29672: u8 [a0 + 0x18] = a1\n 29675: a1 = u64 [sp + 0x60]\n 29678: u8 [a0 + 0x17] = a1\n 29681: a1 = u64 [sp + 0x58]\n 29684: u8 [a0 + 0x16] = a1\n 29687: a1 = u64 [sp + 0x50]\n 29690: u8 [a0 + 0x15] = a1\n 29693: a1 = u64 [sp + 0x48]\n 29696: u8 [a0 + 0x14] = a1\n 29699: a1 = u64 [sp + 0x40]\n 29702: u8 [a0 + 0x13] = a1\n 29705: a1 = u64 [sp + 0x30]\n 29708: u8 [a0 + 0x12] = a1\n 29711: a1 = u64 [sp + 0x28]\n 29714: u8 [a0 + 0x11] = a1\n 29717: a1 = u64 [sp + 0xa8]\n 29721: u8 [a0 + 0x1f] = a1\n 29724: a1 = u64 [sp + 0xa0]\n 29728: u8 [a0 + 0x1e] = a1\n 29731: a1 = u64 [sp + 0x98]\n 29735: u8 [a0 + 0x1d] = a1\n 29738: a1 = u64 [sp + 0x90]\n 29742: u8 [a0 + 0x1c] = a1\n 29745: a1 = u64 [sp + 0x88]\n 29749: u8 [a0 + 0x1b] = a1\n 29752: a1 = u64 [sp + 0x80]\n 29756: u8 [a0 + 0x1a] = a1\n 29759: a1 = u64 [sp + 0x78]\n 29762: u8 [a0 + 0x19] = a1\n 29765: a1 = u64 [sp + 0x110]\n 29769: a1 = a1 | s1\n 29772: a2 = 0xffffffe0\n 29782: a3 = u64 [sp + 0x108]\n 29786: a2 = a3 <u a2\n 29789: a3 = u64 [sp + 0x118]\n 29793: a2 = 0 if a3 != 0\n 29795: a2 = 0 if a1 != 0\n 29797: u8 [a0 + 7] = 0\n 29800: u8 [a0 + 6] = 0\n 29803: u8 [a0 + 5] = 0\n 29806: u8 [a0 + 4] = 0\n 29809: u8 [a0 + 3] = 0\n 29812: u8 [a0 + 2] = 0\n 29815: u8 [a0 + 1] = 0\n 29818: u8 [a0 + 0] = 0\n 29820: jump @464 if a2 == 0\n      : @450 (gas: 4)\n 29824: s1 = u64 [sp + 0x100]\n 29828: i32 a0 = s1 + 0x20\n 29831: a1 = 0x20\n 29834: ra = 392, jump @0\n      : @451 [@dyn 196] (gas: 35)\n 29840: u8 [a0 + 31] = 0x1\n 29844: u8 [a0 + 30] = 0\n 29847: u8 [a0 + 29] = 0\n 29850: u8 [a0 + 28] = 0\n 29853: u8 [a0 + 27] = 0\n 29856: u8 [a0 + 26] = 0\n 29859: u8 [a0 + 25] = 0\n 29862: u8 [a0 + 24] = 0\n 29865: u8 [a0 + 23] = 0\n 29868: u8 [a0 + 22] = 0\n 29871: u8 [a0 + 21] = 0\n 29874: u8 [a0 + 20] = 0\n 29877: u8 [a0 + 19] = 0\n 29880: u8 [a0 + 18] = 0\n 29883: u8 [a0 + 17] = 0\n 29886: u8 [a0 + 16] = 0\n 29889: u8 [a0 + 15] = 0\n 29892: u8 [a0 + 14] = 0\n 29895: u8 [a0 + 13] = 0\n 29898: u8 [a0 + 12] = 0\n 29901: u8 [a0 + 11] = 0\n 29904: u8 [a0 + 10] = 0\n 29907: u8 [a0 + 9] = 0\n 29910: u8 [a0 + 8] = 0\n 29913: u8 [a0 + 7] = 0\n 29916: u8 [a0 + 6] = 0\n 29919: u8 [a0 + 5] = 0\n 29922: u8 [a0 + 4] = 0\n 29925: u8 [a0 + 3] = 0\n 29928: u8 [a0 + 2] = 0\n 29931: u8 [a0 + 1] = 0\n 29934: u8 [a0 + 0] = 0\n 29936: a1 = 0x40\n 29939: a0 = s1\n 29941: ra = 394, jump @0\n      : @452 [@dyn 197] (gas: 19)\n 29947: a1 = u64 [0x20040]\n 29952: a2 = u64 [0x20048]\n 29957: a3 = u64 [0x20050]\n 29962: a4 = u64 [0x20058]\n 29967: u64 [sp + 0x2b8] = a1\n 29971: u64 [sp + 0x2b0] = a2\n 29975: u64 [sp + 0x2a8] = a3\n 29979: u64 [sp + 0x2a0] = a4\n 29983: i32 a2 = a0 + 0\n 29985: i32 a0 = sp + 0x2a0\n 29989: a1 = 0x1\n 29992: a3 = 0x40\n 29995: ecalli 7 // 'deposit_event'\n 29997: sp = s0 + 0xfffffffffffffd20\n 30001: ra = u64 [sp + 0x2d8]\n 30005: s0 = u64 [sp + 0x2d0]\n 30009: s1 = u64 [sp + 0x2c8]\n 30013: sp = sp + 0x2e0\n 30017: ret\n      : @453 (gas: 3)\n 30019: a0 = 0x40\n 30022: a1 = 0x20\n 30025: ra = 396, jump @0\n      : @454 [@dyn 198] (gas: 103)\n 30031: a1 = u8 [a0 + 0x11]\n 30034: a2 = u8 [a0 + 0x10]\n 30037: a3 = u8 [a0 + 0x12]\n 30040: a4 = u8 [a0 + 0x13]\n 30043: a1 = a1 << 0x8\n 30046: a1 = a1 | a2\n 30049: a3 = a3 << 0x10\n 30052: a4 = a4 << 0x18\n 30055: a3 = a3 | a4\n 30058: a1 = a1 | a3\n 30061: a2 = u8 [a0 + 0x15]\n 30064: a3 = u8 [a0 + 0x14]\n 30067: a4 = u8 [a0 + 0x16]\n 30070: a5 = u8 [a0 + 0x17]\n 30073: a2 = a2 << 0x8\n 30076: a2 = a2 | a3\n 30079: a4 = a4 << 0x10\n 30082: a5 = a5 << 0x18\n 30085: a4 = a4 | a5\n 30088: a2 = a2 | a4\n 30091: a2 = a2 << 0x20\n 30094: t0 = a2 | a1\n 30097: a2 = u8 [a0 + 0x1]\n 30100: a3 = u8 [a0]\n 30102: a4 = u8 [a0 + 0x2]\n 30105: a5 = u8 [a0 + 0x3]\n 30108: a2 = a2 << 0x8\n 30111: a2 = a2 | a3\n 30114: a4 = a4 << 0x10\n 30117: a5 = a5 << 0x18\n 30120: a4 = a4 | a5\n 30123: a2 = a2 | a4\n 30126: a3 = u8 [a0 + 0x5]\n 30129: a4 = u8 [a0 + 0x4]\n 30132: a5 = u8 [a0 + 0x6]\n 30135: s1 = u8 [a0 + 0x7]\n 30138: a3 = a3 << 0x8\n 30141: a3 = a3 | a4\n 30144: a5 = a5 << 0x10\n 30147: s1 = s1 << 0x18\n 30150: a5 = a5 | s1\n 30153: a3 = a3 | a5\n 30156: a3 = a3 << 0x20\n 30159: a2 = a2 | a3\n 30162: a3 = u8 [a0 + 0x19]\n 30165: a4 = u8 [a0 + 0x18]\n 30168: a5 = u8 [a0 + 0x1a]\n 30171: s1 = u8 [a0 + 0x1b]\n 30174: a3 = a3 << 0x8\n 30177: a3 = a3 | a4\n 30180: a5 = a5 << 0x10\n 30183: s1 = s1 << 0x18\n 30186: a5 = a5 | s1\n 30189: a3 = a3 | a5\n 30192: a4 = u8 [a0 + 0x1d]\n 30195: a5 = u8 [a0 + 0x1c]\n 30198: s1 = u8 [a0 + 0x1e]\n 30201: a1 = u8 [a0 + 0x1f]\n 30204: a4 = a4 << 0x8\n 30207: a4 = a4 | a5\n 30210: s1 = s1 << 0x10\n 30213: a1 = a1 << 0x18\n 30216: a1 = a1 | s1\n 30219: a1 = a1 | a4\n 30222: a1 = a1 << 0x20\n 30225: a3 = a3 | a1\n 30228: a1 = u8 [a0 + 0x9]\n 30231: a4 = u8 [a0 + 0x8]\n 30234: a5 = u8 [a0 + 0xa]\n 30237: s1 = u8 [a0 + 0xb]\n 30240: a1 = a1 << 0x8\n 30243: a1 = a1 | a4\n 30246: a5 = a5 << 0x10\n 30249: s1 = s1 << 0x18\n 30252: a5 = a5 | s1\n 30255: a1 = a1 | a5\n 30258: a4 = u8 [a0 + 0xd]\n 30261: a5 = u8 [a0 + 0xc]\n 30264: s1 = u8 [a0 + 0xe]\n 30267: a0 = u8 [a0 + 0xf]\n 30270: a4 = a4 << 0x8\n 30273: a4 = a4 | a5\n 30276: s1 = s1 << 0x10\n 30279: a0 = a0 << 0x18\n 30282: a0 = a0 | s1\n 30285: a0 = a0 | a4\n 30288: a0 = a0 << 0x20\n 30291: a0 = a0 | a1\n 30294: s1 = reverse a0\n 30296: a1 = reverse a3\n 30298: a2 = reverse a2\n 30300: a0 = reverse t0\n 30302: u64 [sp + 0x118] = a0\n 30306: u64 [sp + 0x110] = a2\n 30310: a0 = a0 | a2\n 30313: a2 = a1\n 30315: a1 = a1 | s1\n 30318: a1 = a1 | a0\n 30321: a1 = a1 >> 0x20\n 30324: a0 = a0 | s1\n 30327: a0 = a0 << 0x20\n 30330: a0 = a0 | a1\n 30333: jump @464 if a0 != 0\n      : @455 (gas: 5)\n 30337: u64 [sp + 0x108] = a2\n 30341: i32 a0 = a2 + 0\n 30343: a1 = 0x20\n 30346: u64 [sp + 0x100] = a0\n 30350: ra = 398, jump @0\n      : @456 [@dyn 199] (gas: 50)\n 30356: u8 [a0 + 31] = 0\n 30359: u8 [a0 + 30] = 0\n 30362: u8 [a0 + 29] = 0\n 30365: u8 [a0 + 28] = 0\n 30368: u8 [a0 + 27] = 0\n 30371: u8 [a0 + 26] = 0\n 30374: u8 [a0 + 25] = 0\n 30377: u8 [a0 + 24] = 0\n 30380: u8 [a0 + 23] = 0\n 30383: u8 [a0 + 22] = 0\n 30386: u8 [a0 + 21] = 0\n 30389: u8 [a0 + 20] = 0\n 30392: u8 [a0 + 19] = 0\n 30395: u8 [a0 + 18] = 0\n 30398: u8 [a0 + 17] = 0\n 30401: u8 [a0 + 16] = 0\n 30404: u8 [a0 + 15] = 0\n 30407: u8 [a0 + 14] = 0\n 30410: u8 [a0 + 13] = 0\n 30413: u8 [a0 + 12] = 0\n 30416: u8 [a0 + 11] = 0\n 30419: u8 [a0 + 10] = 0\n 30422: u8 [a0 + 9] = 0\n 30425: u8 [a0 + 8] = 0\n 30428: u8 [a0 + 7] = 0\n 30431: u8 [a0 + 6] = 0\n 30434: u8 [a0 + 5] = 0\n 30437: u8 [a0 + 4] = 0\n 30440: u8 [a0 + 3] = 0xa0\n 30445: u8 [a0 + 2] = 0x79\n 30449: u8 [a0 + 1] = 0xc3\n 30454: u8 [a0 + 0] = 0x8\n 30457: a1 = u64 [sp + 0x108]\n 30461: a0 = a1 + 0x4\n 30464: a1 = a0 <u a1\n 30467: a3 = u64 [sp + 0x118]\n 30471: a2 = a3 + a1\n 30474: a3 = a2 <u a3\n 30477: a3 = a1 if a1 == 0\n 30480: a3 = a3 + s1\n 30483: a1 = a3 <u s1\n 30486: a4 = u64 [sp + 0x110]\n 30490: a4 = a4 + a1\n 30493: u64 [sp + 0x168] = a2\n 30497: u64 [sp + 0x160] = a0\n 30501: u64 [sp + 0x170] = a3\n 30505: a0 = sp + 0x180\n 30509: a1 = sp + 0x160\n 30513: u64 [sp + 0x178] = a4\n 30517: ra = 400, jump @419\n      : @457 [@dyn 200] (gas: 5)\n 30523: a0 = u64 [sp + 0x188]\n 30527: t0 = u64 [sp + 0x198]\n 30531: t1 = u64 [sp + 0x180]\n 30535: a3 = u64 [sp + 0x190]\n 30539: jump @463\n      : @458 (gas: 3)\n 30542: a0 = 0x40\n 30545: a1 = 0x20\n 30548: ra = 402, jump @0\n      : @459 [@dyn 201] (gas: 103)\n 30554: a1 = u8 [a0 + 0x11]\n 30557: a2 = u8 [a0 + 0x10]\n 30560: a3 = u8 [a0 + 0x12]\n 30563: a4 = u8 [a0 + 0x13]\n 30566: a1 = a1 << 0x8\n 30569: a1 = a1 | a2\n 30572: a3 = a3 << 0x10\n 30575: a4 = a4 << 0x18\n 30578: a3 = a3 | a4\n 30581: a1 = a1 | a3\n 30584: a2 = u8 [a0 + 0x15]\n 30587: a3 = u8 [a0 + 0x14]\n 30590: a4 = u8 [a0 + 0x16]\n 30593: a5 = u8 [a0 + 0x17]\n 30596: a2 = a2 << 0x8\n 30599: a2 = a2 | a3\n 30602: a4 = a4 << 0x10\n 30605: a5 = a5 << 0x18\n 30608: a4 = a4 | a5\n 30611: a2 = a2 | a4\n 30614: a2 = a2 << 0x20\n 30617: t0 = a2 | a1\n 30620: a2 = u8 [a0 + 0x1]\n 30623: a3 = u8 [a0]\n 30625: a4 = u8 [a0 + 0x2]\n 30628: a5 = u8 [a0 + 0x3]\n 30631: a2 = a2 << 0x8\n 30634: a2 = a2 | a3\n 30637: a4 = a4 << 0x10\n 30640: a5 = a5 << 0x18\n 30643: a4 = a4 | a5\n 30646: a2 = a2 | a4\n 30649: a3 = u8 [a0 + 0x5]\n 30652: a4 = u8 [a0 + 0x4]\n 30655: a5 = u8 [a0 + 0x6]\n 30658: s1 = u8 [a0 + 0x7]\n 30661: a3 = a3 << 0x8\n 30664: a3 = a3 | a4\n 30667: a5 = a5 << 0x10\n 30670: s1 = s1 << 0x18\n 30673: a5 = a5 | s1\n 30676: a3 = a3 | a5\n 30679: a3 = a3 << 0x20\n 30682: a2 = a2 | a3\n 30685: a3 = u8 [a0 + 0x19]\n 30688: a4 = u8 [a0 + 0x18]\n 30691: a5 = u8 [a0 + 0x1a]\n 30694: s1 = u8 [a0 + 0x1b]\n 30697: a3 = a3 << 0x8\n 30700: a3 = a3 | a4\n 30703: a5 = a5 << 0x10\n 30706: s1 = s1 << 0x18\n 30709: a5 = a5 | s1\n 30712: a3 = a3 | a5\n 30715: a4 = u8 [a0 + 0x1d]\n 30718: a5 = u8 [a0 + 0x1c]\n 30721: s1 = u8 [a0 + 0x1e]\n 30724: a1 = u8 [a0 + 0x1f]\n 30727: a4 = a4 << 0x8\n 30730: a4 = a4 | a5\n 30733: s1 = s1 << 0x10\n 30736: a1 = a1 << 0x18\n 30739: a1 = a1 | s1\n 30742: a1 = a1 | a4\n 30745: a1 = a1 << 0x20\n 30748: a3 = a3 | a1\n 30751: a1 = u8 [a0 + 0x9]\n 30754: a4 = u8 [a0 + 0x8]\n 30757: a5 = u8 [a0 + 0xa]\n 30760: s1 = u8 [a0 + 0xb]\n 30763: a1 = a1 << 0x8\n 30766: a1 = a1 | a4\n 30769: a5 = a5 << 0x10\n 30772: s1 = s1 << 0x18\n 30775: a5 = a5 | s1\n 30778: a1 = a1 | a5\n 30781: a4 = u8 [a0 + 0xd]\n 30784: a5 = u8 [a0 + 0xc]\n 30787: s1 = u8 [a0 + 0xe]\n 30790: a0 = u8 [a0 + 0xf]\n 30793: a4 = a4 << 0x8\n 30796: a4 = a4 | a5\n 30799: s1 = s1 << 0x10\n 30802: a0 = a0 << 0x18\n 30805: a0 = a0 | s1\n 30808: a0 = a0 | a4\n 30811: a0 = a0 << 0x20\n 30814: a0 = a0 | a1\n 30817: s1 = reverse a0\n 30819: a1 = reverse a3\n 30821: a2 = reverse a2\n 30823: a0 = reverse t0\n 30825: u64 [sp + 0x118] = a0\n 30829: u64 [sp + 0x110] = a2\n 30833: a0 = a0 | a2\n 30836: a2 = a1\n 30838: a1 = a1 | s1\n 30841: a1 = a1 | a0\n 30844: a1 = a1 >> 0x20\n 30847: a0 = a0 | s1\n 30850: a0 = a0 << 0x20\n 30853: a0 = a0 | a1\n 30856: jump @464 if a0 != 0\n      : @460 (gas: 5)\n 30860: u64 [sp + 0x108] = a2\n 30864: i32 a0 = a2 + 0\n 30866: a1 = 0x20\n 30869: u64 [sp + 0x100] = a0\n 30873: ra = 404, jump @0\n      : @461 [@dyn 202] (gas: 50)\n 30879: u8 [a0 + 31] = 0\n 30882: u8 [a0 + 30] = 0\n 30885: u8 [a0 + 29] = 0\n 30888: u8 [a0 + 28] = 0\n 30891: u8 [a0 + 27] = 0\n 30894: u8 [a0 + 26] = 0\n 30897: u8 [a0 + 25] = 0\n 30900: u8 [a0 + 24] = 0\n 30903: u8 [a0 + 23] = 0\n 30906: u8 [a0 + 22] = 0\n 30909: u8 [a0 + 21] = 0\n 30912: u8 [a0 + 20] = 0\n 30915: u8 [a0 + 19] = 0\n 30918: u8 [a0 + 18] = 0\n 30921: u8 [a0 + 17] = 0\n 30924: u8 [a0 + 16] = 0\n 30927: u8 [a0 + 15] = 0\n 30930: u8 [a0 + 14] = 0\n 30933: u8 [a0 + 13] = 0\n 30936: u8 [a0 + 12] = 0\n 30939: u8 [a0 + 11] = 0\n 30942: u8 [a0 + 10] = 0\n 30945: u8 [a0 + 9] = 0\n 30948: u8 [a0 + 8] = 0\n 30951: u8 [a0 + 7] = 0\n 30954: u8 [a0 + 6] = 0\n 30957: u8 [a0 + 5] = 0\n 30960: u8 [a0 + 4] = 0\n 30963: u8 [a0 + 3] = 0xa0\n 30968: u8 [a0 + 2] = 0x79\n 30972: u8 [a0 + 1] = 0xc3\n 30977: u8 [a0 + 0] = 0x8\n 30980: a1 = u64 [sp + 0x108]\n 30984: a0 = a1 + 0x4\n 30987: a1 = a0 <u a1\n 30990: a3 = u64 [sp + 0x118]\n 30994: a2 = a3 + a1\n 30997: a3 = a2 <u a3\n 31000: a3 = a1 if a1 == 0\n 31003: a3 = a3 + s1\n 31006: a1 = a3 <u s1\n 31009: a4 = u64 [sp + 0x110]\n 31013: a4 = a4 + a1\n 31016: u64 [sp + 0x128] = a2\n 31020: u64 [sp + 0x120] = a0\n 31024: u64 [sp + 0x130] = a3\n 31028: a0 = sp + 0x140\n 31032: a1 = sp + 0x120\n 31036: u64 [sp + 0x138] = a4\n 31040: ra = 406, jump @204\n      : @462 [@dyn 203] (gas: 5)\n 31046: a0 = u64 [sp + 0x148]\n 31050: t0 = u64 [sp + 0x158]\n 31054: t1 = u64 [sp + 0x140]\n 31058: a3 = u64 [sp + 0x150]\n 31062: fallthrough\n      : @463 (gas: 26)\n 31063: a1 = u64 [sp + 0x118]\n 31067: a4 = a0 ^ a1\n 31070: a5 = a0 <u a1\n 31073: t2 = a1\n 31075: a2 = u64 [sp + 0x108]\n 31079: a1 = t1 <u a2\n 31082: a5 = a1 if a4 == 0\n 31085: a4 = a3 - s1\n 31088: a3 = a3 <u s1\n 31091: s1 = u64 [sp + 0x110]\n 31095: s1 = t0 - s1\n 31098: s1 = s1 - a3\n 31101: a3 = a4 <u a5\n 31104: s1 = s1 - a3\n 31107: a4 = a4 - a5\n 31110: a0 = a0 - t2\n 31113: a1 = a0 - a1\n 31116: a0 = t1 - a2\n 31119: a1 = a1 | s1\n 31122: a2 = a0 | a4\n 31125: a2 = a2 | a1\n 31128: a1 = a1 | a4\n 31131: a2 = a2 >> 0x20\n 31134: a1 = a1 << 0x20\n 31137: a1 = a1 | a2\n 31140: jump @468 if a1 == 0\n      : @464 (gas: 1)\n 31143: trap\n      : @465 (gas: 1)\n 31144: ra = 408, jump @224\n      : @466 [@dyn 204] (gas: 2)\n 31150: a1 = 0\n 31152: ra = 410, jump @0\n      : @467 [@dyn 205] (gas: 5)\n 31158: i32 a1 = a0 + 0\n 31160: a0 = 0x1\n 31163: a2 = 0\n 31165: ecalli 13 // 'seal_return'\n 31167: fallthrough\n      : @468 (gas: 4)\n 31168: i32 s1 = a0 + 0\n 31170: a0 = u64 [sp + 0x100]\n 31174: a1 = s1\n 31176: ra = 412, jump @0\n      : @469 [@dyn 206] (gas: 6)\n 31182: i32 a1 = a0 + 0\n 31184: a0 = 0x1\n 31187: a2 = s1\n 31189: ra = 0x19e\n 31193: ecalli 13 // 'seal_return'\n 31195: fallthrough\n      : @470 [@dyn 207] (gas: 20)\n 31196: sp = sp + 0xffffffffffffff90\n 31199: u64 [sp + 0x68] = ra\n 31202: u64 [sp + 0x60] = s0\n 31205: u64 [sp + 0x58] = s1\n 31208: a5 = u64 [a1 + 0x10]\n 31211: a4 = u64 [a1 + 0x18]\n 31214: s1 = u64 [a1 + 0x8]\n 31217: s0 = u64 [a1]\n 31219: u64 [sp + 0x48] = a4\n 31222: u64 [sp + 0x40] = s1\n 31225: a1 = s1 | a4\n 31228: a4 = s0 | a5\n 31231: a4 = a4 | a1\n 31234: a4 = a4 >> 0x20\n 31237: u64 [sp + 0x50] = a5\n 31240: a1 = a1 | a5\n 31243: a1 = a1 << 0x20\n 31246: a1 = a1 | a4\n 31249: u64 [sp + 0x38] = a0\n 31252: jump @475 if a1 != 0\n      : @471 (gas: 17)\n 31256: a0 = u64 [a3 + 0x10]\n 31259: u64 [sp + 0x8] = a0\n 31262: a0 = u64 [a3 + 0x8]\n 31265: u64 [sp + 0x10] = a0\n 31268: a0 = u64 [a3]\n 31270: u64 [sp + 0x18] = a0\n 31273: s1 = u64 [a2 + 0x18]\n 31276: a0 = u64 [a2 + 0x10]\n 31279: u64 [sp + 0x20] = a0\n 31282: a0 = u64 [a2 + 0x8]\n 31285: u64 [sp + 0x28] = a0\n 31288: a0 = u64 [a2]\n 31290: u64 [sp + 0x30] = a0\n 31293: i32 a0 = s0 + 0\n 31295: a1 = 0x20\n 31298: u64 [sp] = a0\n 31300: ra = 416, jump @0\n      : @472 [@dyn 208] (gas: 76)\n 31306: a1 = reverse s1\n 31308: a2 = u64 [sp + 0x20]\n 31311: a2 = reverse a2\n 31313: a3 = u64 [sp + 0x28]\n 31316: a3 = reverse a3\n 31318: a4 = u64 [sp + 0x30]\n 31321: a4 = reverse a4\n 31323: a5 = a4 >> 0x38\n 31326: u8 [a0 + 0x1f] = a5\n 31329: a5 = a4 >> 0x30\n 31332: u8 [a0 + 0x1e] = a5\n 31335: a5 = a4 >> 0x28\n 31338: u8 [a0 + 0x1d] = a5\n 31341: a5 = a4 >> 0x20\n 31344: u8 [a0 + 0x1c] = a5\n 31347: a5 = a4 >> 0x18\n 31350: u8 [a0 + 0x1b] = a5\n 31353: a5 = a4 >> 0x10\n 31356: u8 [a0 + 0x1a] = a5\n 31359: a5 = a4 >> 0x8\n 31362: u8 [a0 + 0x19] = a5\n 31365: u8 [a0 + 0x18] = a4\n 31368: u8 [a0 + 0x10] = a3\n 31371: a4 = a3 >> 0x38\n 31374: u8 [a0 + 0x17] = a4\n 31377: a4 = a3 >> 0x30\n 31380: u8 [a0 + 0x16] = a4\n 31383: a4 = a3 >> 0x28\n 31386: u8 [a0 + 0x15] = a4\n 31389: a4 = a3 >> 0x20\n 31392: u8 [a0 + 0x14] = a4\n 31395: a4 = a3 >> 0x18\n 31398: u8 [a0 + 0x13] = a4\n 31401: a4 = a3 >> 0x10\n 31404: u8 [a0 + 0x12] = a4\n 31407: a3 = a3 >> 0x8\n 31410: u8 [a0 + 0x11] = a3\n 31413: u8 [a0 + 0x8] = a2\n 31416: a3 = a2 >> 0x38\n 31419: u8 [a0 + 0xf] = a3\n 31422: a3 = a2 >> 0x30\n 31425: u8 [a0 + 0xe] = a3\n 31428: a3 = a2 >> 0x28\n 31431: u8 [a0 + 0xd] = a3\n 31434: a3 = a2 >> 0x20\n 31437: u8 [a0 + 0xc] = a3\n 31440: a3 = a2 >> 0x18\n 31443: u8 [a0 + 0xb] = a3\n 31446: a3 = a2 >> 0x10\n 31449: u8 [a0 + 0xa] = a3\n 31452: a2 = a2 >> 0x8\n 31455: u8 [a0 + 0x9] = a2\n 31458: u8 [a0] = a1\n 31460: a2 = a1 >> 0x38\n 31463: u8 [a0 + 0x7] = a2\n 31466: a2 = a1 >> 0x30\n 31469: u8 [a0 + 0x6] = a2\n 31472: a2 = a1 >> 0x28\n 31475: u8 [a0 + 0x5] = a2\n 31478: a2 = a1 >> 0x20\n 31481: u8 [a0 + 0x4] = a2\n 31484: a2 = a1 >> 0x18\n 31487: u8 [a0 + 0x3] = a2\n 31490: a2 = a1 >> 0x10\n 31493: u8 [a0 + 0x2] = a2\n 31496: a1 = a1 >> 0x8\n 31499: a4 = u64 [sp + 0x50]\n 31502: a5 = u64 [sp + 0x48]\n 31505: a2 = a4 | a5\n 31508: a3 = 0xffffffe0\n 31518: a3 = s0 <u a3\n 31521: s1 = u64 [sp + 0x40]\n 31524: a3 = 0 if s1 != 0\n 31526: a3 = 0 if a2 != 0\n 31528: u8 [a0 + 0x1] = a1\n 31531: jump @475 if a3 == 0\n      : @473 (gas: 18)\n 31535: a0 = s0 + 0x40\n 31538: u64 [sp + 0x30] = a0\n 31541: a0 = a0 <u s0\n 31544: a1 = s1 + a0\n 31547: u64 [sp + 0x28] = a1\n 31550: s0 = a1 <u s1\n 31553: s0 = a0 if a0 == 0\n 31556: s0 = s0 + a4\n 31559: s1 = s0 <u a4\n 31562: a5 = a5 + s1\n 31565: u64 [sp + 0x50] = a5\n 31568: a0 = u64 [sp + 0x8]\n 31571: a0 = a0 << 0x20\n 31574: s1 = a0 >> 0x20\n 31577: a0 = u64 [sp]\n 31579: i32 a0 = a0 + 0x20\n 31582: a1 = 0x20\n 31585: ra = 418, jump @0\n      : @474 [@dyn 209] (gas: 68)\n 31591: a1 = reverse s1\n 31593: a2 = u64 [sp + 0x10]\n 31596: a2 = reverse a2\n 31598: a3 = u64 [sp + 0x18]\n 31601: a3 = reverse a3\n 31603: a4 = a3 >> 0x38\n 31606: u8 [a0 + 0x1f] = a4\n 31609: a4 = a3 >> 0x30\n 31612: u8 [a0 + 0x1e] = a4\n 31615: a4 = a3 >> 0x28\n 31618: u8 [a0 + 0x1d] = a4\n 31621: a4 = a3 >> 0x20\n 31624: u8 [a0 + 0x1c] = a4\n 31627: a4 = a3 >> 0x18\n 31630: u8 [a0 + 0x1b] = a4\n 31633: a4 = a3 >> 0x10\n 31636: u8 [a0 + 0x1a] = a4\n 31639: a4 = a3 >> 0x8\n 31642: u8 [a0 + 0x19] = a4\n 31645: u8 [a0 + 0x18] = a3\n 31648: u8 [a0 + 0x10] = a2\n 31651: u8 [a0 + 11] = 0\n 31654: u8 [a0 + 10] = 0\n 31657: u8 [a0 + 9] = 0\n 31660: u8 [a0 + 7] = 0\n 31663: u8 [a0 + 6] = 0\n 31666: u8 [a0 + 5] = 0\n 31669: u8 [a0 + 4] = 0\n 31672: u8 [a0 + 3] = 0\n 31675: u8 [a0 + 2] = 0\n 31678: u8 [a0 + 1] = 0\n 31681: u8 [a0 + 0] = 0\n 31683: a3 = a2 >> 0x38\n 31686: u8 [a0 + 0x17] = a3\n 31689: a3 = a2 >> 0x30\n 31692: u8 [a0 + 0x16] = a3\n 31695: a3 = a2 >> 0x28\n 31698: u8 [a0 + 0x15] = a3\n 31701: a3 = a2 >> 0x20\n 31704: u8 [a0 + 0x14] = a3\n 31707: a3 = a2 >> 0x18\n 31710: u8 [a0 + 0x13] = a3\n 31713: a3 = a2 >> 0x10\n 31716: u8 [a0 + 0x12] = a3\n 31719: a2 = a2 >> 0x8\n 31722: u8 [a0 + 0x11] = a2\n 31725: u8 [a0 + 0x8] = a1\n 31728: a2 = a1 >> 0x38\n 31731: u8 [a0 + 0xf] = a2\n 31734: a2 = a1 >> 0x30\n 31737: u8 [a0 + 0xe] = a2\n 31740: a2 = a1 >> 0x28\n 31743: u8 [a0 + 0xd] = a2\n 31746: a1 = a1 >> 0x20\n 31749: u8 [a0 + 0xc] = a1\n 31752: a0 = u64 [sp + 0x38]\n 31755: a1 = u64 [sp + 0x30]\n 31758: u64 [a0] = a1\n 31760: a1 = u64 [sp + 0x50]\n 31763: u64 [a0 + 0x18] = a1\n 31766: a1 = u64 [sp + 0x28]\n 31769: u64 [a0 + 0x8] = a1\n 31772: u64 [a0 + 0x10] = s0\n 31775: ra = u64 [sp + 0x68]\n 31778: s0 = u64 [sp + 0x60]\n 31781: s1 = u64 [sp + 0x58]\n 31784: sp = sp + 0x70\n 31787: ret\n      : @475 (gas: 1)\n 31789: trap\n      : @476 [@dyn 210] (gas: 102)\n 31790: a1 = u8 [a0 + 0x11]\n 31793: a2 = u8 [a0 + 0x10]\n 31796: a3 = u8 [a0 + 0x12]\n 31799: a4 = u8 [a0 + 0x13]\n 31802: a1 = a1 << 0x8\n 31805: a1 = a1 | a2\n 31808: a3 = a3 << 0x10\n 31811: a4 = a4 << 0x18\n 31814: a3 = a3 | a4\n 31817: a1 = a1 | a3\n 31820: a2 = u8 [a0 + 0x15]\n 31823: a3 = u8 [a0 + 0x14]\n 31826: a4 = u8 [a0 + 0x16]\n 31829: a5 = u8 [a0 + 0x17]\n 31832: a2 = a2 << 0x8\n 31835: a2 = a2 | a3\n 31838: a4 = a4 << 0x10\n 31841: a5 = a5 << 0x18\n 31844: a4 = a4 | a5\n 31847: a2 = a2 | a4\n 31850: a2 = a2 << 0x20\n 31853: t0 = a2 | a1\n 31856: a2 = u8 [a0 + 0x1]\n 31859: a3 = u8 [a0]\n 31861: a4 = u8 [a0 + 0x2]\n 31864: a5 = u8 [a0 + 0x3]\n 31867: a2 = a2 << 0x8\n 31870: a2 = a2 | a3\n 31873: a4 = a4 << 0x10\n 31876: a5 = a5 << 0x18\n 31879: a4 = a4 | a5\n 31882: a2 = a2 | a4\n 31885: a3 = u8 [a0 + 0x5]\n 31888: a4 = u8 [a0 + 0x4]\n 31891: a5 = u8 [a0 + 0x6]\n 31894: s1 = u8 [a0 + 0x7]\n 31897: a3 = a3 << 0x8\n 31900: a3 = a3 | a4\n 31903: a5 = a5 << 0x10\n 31906: s1 = s1 << 0x18\n 31909: a5 = a5 | s1\n 31912: a3 = a3 | a5\n 31915: a3 = a3 << 0x20\n 31918: a2 = a2 | a3\n 31921: a3 = u8 [a0 + 0x19]\n 31924: a4 = u8 [a0 + 0x18]\n 31927: a5 = u8 [a0 + 0x1a]\n 31930: s1 = u8 [a0 + 0x1b]\n 31933: a3 = a3 << 0x8\n 31936: a3 = a3 | a4\n 31939: a5 = a5 << 0x10\n 31942: s1 = s1 << 0x18\n 31945: a5 = a5 | s1\n 31948: a3 = a3 | a5\n 31951: a4 = u8 [a0 + 0x1d]\n 31954: a5 = u8 [a0 + 0x1c]\n 31957: s1 = u8 [a0 + 0x1e]\n 31960: a1 = u8 [a0 + 0x1f]\n 31963: a4 = a4 << 0x8\n 31966: a4 = a4 | a5\n 31969: s1 = s1 << 0x10\n 31972: a1 = a1 << 0x18\n 31975: a1 = a1 | s1\n 31978: a1 = a1 | a4\n 31981: a1 = a1 << 0x20\n 31984: a3 = a3 | a1\n 31987: a1 = u8 [a0 + 0x9]\n 31990: a4 = u8 [a0 + 0x8]\n 31993: a5 = u8 [a0 + 0xa]\n 31996: s1 = u8 [a0 + 0xb]\n 31999: a1 = a1 << 0x8\n 32002: a1 = a1 | a4\n 32005: a5 = a5 << 0x10\n 32008: s1 = s1 << 0x18\n 32011: a5 = a5 | s1\n 32014: a1 = a1 | a5\n 32017: a4 = u8 [a0 + 0xd]\n 32020: a5 = u8 [a0 + 0xc]\n 32023: s1 = u8 [a0 + 0xe]\n 32026: a0 = u8 [a0 + 0xf]\n 32029: a4 = a4 << 0x8\n 32032: a4 = a4 | a5\n 32035: s1 = s1 << 0x10\n 32038: a0 = a0 << 0x18\n 32041: a0 = a0 | s1\n 32044: a0 = a0 | a4\n 32047: a0 = a0 << 0x20\n 32050: a0 = a0 | a1\n 32053: s1 = reverse a0\n 32055: a3 = reverse a3\n 32057: a1 = reverse a2\n 32059: a0 = reverse t0\n 32061: u64 [sp + 0x30] = a0\n 32064: u64 [sp + 0x28] = a1\n 32067: a0 = a0 | a1\n 32070: a1 = a3 | s1\n 32073: a1 = a1 | a0\n 32076: a1 = a1 >> 0x20\n 32079: a0 = a0 | s1\n 32082: a0 = a0 << 0x20\n 32085: a0 = a0 | a1\n 32088: jump @482 if a0 != 0\n      : @477 (gas: 5)\n 32092: i32 a0 = a3 + 0\n 32094: a1 = 0x20\n 32097: u64 [sp + 0x58] = a0\n 32100: u64 [sp + 0x8] = a3\n 32103: ra = 422, jump @0\n      : @478 [@dyn 211] (gas: 77)\n 32109: a1 = u64 [sp + 0x38]\n 32112: a1 = reverse a1\n 32114: a2 = u64 [sp + 0x40]\n 32117: a2 = reverse a2\n 32119: a3 = u64 [sp + 0x48]\n 32122: a3 = reverse a3\n 32124: a4 = u64 [sp + 0x50]\n 32127: a4 = reverse a4\n 32129: a5 = a4 >> 0x38\n 32132: u8 [a0 + 0x1f] = a5\n 32135: a5 = a4 >> 0x30\n 32138: u8 [a0 + 0x1e] = a5\n 32141: a5 = a4 >> 0x28\n 32144: u8 [a0 + 0x1d] = a5\n 32147: a5 = a4 >> 0x20\n 32150: u8 [a0 + 0x1c] = a5\n 32153: a5 = a4 >> 0x18\n 32156: u8 [a0 + 0x1b] = a5\n 32159: a5 = a4 >> 0x10\n 32162: u8 [a0 + 0x1a] = a5\n 32165: a5 = a4 >> 0x8\n 32168: u8 [a0 + 0x19] = a5\n 32171: u8 [a0 + 0x18] = a4\n 32174: u8 [a0 + 0x10] = a3\n 32177: a4 = a3 >> 0x38\n 32180: u8 [a0 + 0x17] = a4\n 32183: a4 = a3 >> 0x30\n 32186: u8 [a0 + 0x16] = a4\n 32189: a4 = a3 >> 0x28\n 32192: u8 [a0 + 0x15] = a4\n 32195: a4 = a3 >> 0x20\n 32198: u8 [a0 + 0x14] = a4\n 32201: a4 = a3 >> 0x18\n 32204: u8 [a0 + 0x13] = a4\n 32207: a4 = a3 >> 0x10\n 32210: u8 [a0 + 0x12] = a4\n 32213: a3 = a3 >> 0x8\n 32216: u8 [a0 + 0x11] = a3\n 32219: u8 [a0 + 0x8] = a2\n 32222: a3 = a2 >> 0x38\n 32225: u8 [a0 + 0xf] = a3\n 32228: a3 = a2 >> 0x30\n 32231: u8 [a0 + 0xe] = a3\n 32234: a3 = a2 >> 0x28\n 32237: u8 [a0 + 0xd] = a3\n 32240: a3 = a2 >> 0x20\n 32243: u8 [a0 + 0xc] = a3\n 32246: a3 = a2 >> 0x18\n 32249: u8 [a0 + 0xb] = a3\n 32252: a3 = a2 >> 0x10\n 32255: u8 [a0 + 0xa] = a3\n 32258: a2 = a2 >> 0x8\n 32261: u8 [a0 + 0x9] = a2\n 32264: u8 [a0] = a1\n 32266: a2 = a1 >> 0x38\n 32269: u8 [a0 + 0x7] = a2\n 32272: a2 = a1 >> 0x30\n 32275: u8 [a0 + 0x6] = a2\n 32278: a2 = a1 >> 0x28\n 32281: u8 [a0 + 0x5] = a2\n 32284: a2 = a1 >> 0x20\n 32287: u8 [a0 + 0x4] = a2\n 32290: a2 = a1 >> 0x18\n 32293: u8 [a0 + 0x3] = a2\n 32296: a2 = a1 >> 0x10\n 32299: u8 [a0 + 0x2] = a2\n 32302: a1 = a1 >> 0x8\n 32305: a2 = u64 [sp + 0x28]\n 32308: a2 = a2 | s1\n 32311: a3 = 0xffffffe0\n 32321: a4 = u64 [sp + 0x8]\n 32324: a3 = a4 <u a3\n 32327: a4 = u64 [sp + 0x30]\n 32330: a3 = 0 if a4 != 0\n 32332: a3 = 0 if a2 != 0\n 32334: u8 [a0 + 0x1] = a1\n 32337: jump @482 if a3 == 0\n      : @479 (gas: 18)\n 32341: s1 = u64 [sp + 0x20]\n 32344: a0 = reverse s1\n 32346: a0 = a0 << 0x20\n 32349: a1 = u64 [sp + 0x10]\n 32352: a1 = reverse a1\n 32354: a2 = a1 >> 0x20\n 32357: a0 = a0 | a2\n 32360: u64 [sp + 0x50] = a0\n 32363: a1 = a1 << 0x20\n 32366: a0 = u64 [sp + 0x18]\n 32369: a0 = reverse a0\n 32371: a0 = a0 >> 0x20\n 32374: a0 = a0 | a1\n 32377: u64 [sp + 0x48] = a0\n 32380: a0 = u64 [sp + 0x58]\n 32383: i32 a0 = a0 + 0x20\n 32386: a1 = 0x20\n 32389: ra = 424, jump @0\n      : @480 [@dyn 212] (gas: 56)\n 32395: a1 = u64 [sp + 0x48]\n 32398: a1 = reverse a1\n 32400: a2 = u64 [sp + 0x50]\n 32403: a2 = reverse a2\n 32405: a3 = s1 >> 0x18\n 32408: u8 [a0 + 0xf] = a3\n 32411: a3 = s1 >> 0x10\n 32414: u8 [a0 + 0xe] = a3\n 32417: a3 = s1 >> 0x8\n 32420: u8 [a0 + 0xd] = a3\n 32423: u8 [a0 + 0xc] = s1\n 32426: u8 [a0 + 11] = 0\n 32429: u8 [a0 + 10] = 0\n 32432: u8 [a0 + 9] = 0\n 32435: u8 [a0 + 8] = 0\n 32438: u8 [a0 + 7] = 0\n 32441: u8 [a0 + 6] = 0\n 32444: u8 [a0 + 5] = 0\n 32447: u8 [a0 + 4] = 0\n 32450: u8 [a0 + 3] = 0\n 32453: u8 [a0 + 2] = 0\n 32456: u8 [a0 + 1] = 0\n 32459: u8 [a0 + 0] = 0\n 32461: u8 [a0 + 0x10] = a2\n 32464: u8 [a0 + 0x18] = a1\n 32467: a3 = a2 >> 0x38\n 32470: u8 [a0 + 0x17] = a3\n 32473: a3 = a2 >> 0x30\n 32476: u8 [a0 + 0x16] = a3\n 32479: a3 = a2 >> 0x28\n 32482: u8 [a0 + 0x15] = a3\n 32485: a3 = a2 >> 0x20\n 32488: u8 [a0 + 0x14] = a3\n 32491: a3 = a2 >> 0x18\n 32494: u8 [a0 + 0x13] = a3\n 32497: a3 = a2 >> 0x10\n 32500: u8 [a0 + 0x12] = a3\n 32503: a2 = a2 >> 0x8\n 32506: u8 [a0 + 0x11] = a2\n 32509: a2 = a1 >> 0x38\n 32512: u8 [a0 + 0x1f] = a2\n 32515: a2 = a1 >> 0x30\n 32518: u8 [a0 + 0x1e] = a2\n 32521: a2 = a1 >> 0x28\n 32524: u8 [a0 + 0x1d] = a2\n 32527: a2 = a1 >> 0x20\n 32530: u8 [a0 + 0x1c] = a2\n 32533: a2 = a1 >> 0x18\n 32536: u8 [a0 + 0x1b] = a2\n 32539: a2 = a1 >> 0x10\n 32542: u8 [a0 + 0x1a] = a2\n 32545: a1 = a1 >> 0x8\n 32548: u8 [a0 + 0x19] = a1\n 32551: a1 = 0x40\n 32554: a0 = u64 [sp + 0x58]\n 32557: ra = 426, jump @0\n      : @481 [@dyn 213] (gas: 19)\n 32563: a1 = u64 [0x20060]\n 32568: a2 = u64 [0x20068]\n 32573: a3 = u64 [0x20070]\n 32578: a4 = u64 [0x20078]\n 32583: u64 [sp + 0xb8] = a1\n 32587: u64 [sp + 0xb0] = a2\n 32591: u64 [sp + 0xa8] = a3\n 32595: u64 [sp + 0xa0] = a4\n 32599: i32 a2 = a0 + 0\n 32601: i32 a0 = sp + 0xa0\n 32605: a1 = 0x1\n 32608: a3 = 0x40\n 32611: ecalli 7 // 'deposit_event'\n 32613: sp = s0 + 0xffffffffffffff20\n 32617: ra = u64 [sp + 0xd8]\n 32621: s0 = u64 [sp + 0xd0]\n 32625: s1 = u64 [sp + 0xc8]\n 32629: sp = sp + 0xe0\n 32633: ret\n      : @482 (gas: 1)\n 32635: trap\n      : @483 [export #0: 'call'] (gas: 2)\n 32636: a0 = 0\n 32638: ra = 428, jump @10\n      : @484 [@dyn 214] [export #1: 'deploy'] (gas: 2)\n 32644: a0 = 0x1\n 32647: ra = 430, jump @10\n      : @485 [@dyn 215] (gas: 27)\n 32653: sp = sp + 0xffffffffffffff80\n 32656: u64 [sp + 0x78] = ra\n 32659: u64 [sp + 0x70] = s0\n 32662: u64 [sp + 0x68] = s1\n 32665: s0 = sp + 0x80\n 32669: sp = sp & 0xfffffffffffffff0\n 32672: t0 = u64 [a1]\n 32674: t1 = u64 [a1 + 0x8]\n 32677: t2 = u64 [a1 + 0x10]\n 32680: a1 = u64 [a1 + 0x18]\n 32683: a3 = u64 [a2]\n 32685: a4 = u64 [a2 + 0x8]\n 32688: a5 = u64 [a2 + 0x10]\n 32691: a2 = u64 [a2 + 0x18]\n 32694: s1 = a0\n 32696: u64 [sp + 0x18] = a2\n 32699: u64 [sp + 0x10] = a5\n 32702: u64 [sp + 0x8] = a4\n 32705: u64 [sp] = a3\n 32707: u64 [sp + 0x38] = a1\n 32710: u64 [sp + 0x30] = t2\n 32713: u64 [sp + 0x28] = t1\n 32716: a0 = sp + 0x40\n 32719: a1 = sp + 0x20\n 32722: a2 = sp\n 32724: u64 [sp + 0x20] = t0\n 32727: ra = 432, jump @374\n      : @486 [@dyn 216] (gas: 14)\n 32733: a0 = u64 [sp + 0x50]\n 32736: a1 = u64 [sp + 0x58]\n 32739: a2 = u64 [sp + 0x40]\n 32742: a3 = u64 [sp + 0x48]\n 32745: u64 [s1 + 0x10] = a0\n 32748: u64 [s1 + 0x18] = a1\n 32751: u64 [s1] = a2\n 32753: u64 [s1 + 0x8] = a3\n 32756: sp = s0 + 0xffffffffffffff80\n 32759: ra = u64 [sp + 0x78]\n 32762: s0 = u64 [sp + 0x70]\n 32765: s1 = u64 [sp + 0x68]\n 32768: sp = sp + 0x80\n 32772: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"authoriseModule(address,bool)": "1f17732d",
							"authorised(address)": "d6eb1bbf",
							"init(address,address)": "f09a4016",
							"invoke(address,uint256,bytes)": "8f6f0332",
							"moduleCount()": "334f7ac5",
							"owner()": "8da5cb5b"
						}
					},
					"irOptimized": "/// @use-src 0:\"SimpleModulaWallet.sol\"\nobject \"SimpleModularWallet_250\" {\n    code {\n        {\n            /// @src 0:506:2652  \"contract SimpleModularWallet is IWallet {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"SimpleModularWallet_250_deployed\"), datasize(\"SimpleModularWallet_250_deployed\"))\n            return(_1, datasize(\"SimpleModularWallet_250_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"SimpleModulaWallet.sol\"\n    object \"SimpleModularWallet_250_deployed\" {\n        code {\n            {\n                /// @src 0:506:2652  \"contract SimpleModularWallet is IWallet {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x1f17732d {\n                        external_fun_authoriseModule()\n                    }\n                    case 0x334f7ac5 { external_fun_moduleCount() }\n                    case 0x8da5cb5b { external_fun_owner() }\n                    case 0x8f6f0332 { external_fun_invoke() }\n                    case 0xd6eb1bbf { external_fun_authorised() }\n                    case 0xf09a4016 { external_fun_init() }\n                    default { }\n                }\n                if iszero(calldatasize())\n                {\n                    fun()\n                    stop()\n                }\n                revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_bool(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_addresst_bool(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_bool(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_authoriseModule()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_bool(4, calldatasize())\n                fun_authoriseModule(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 28 @src 0:629:655  \"uint256 public moduleCount\"\n            function getter_fun_moduleCount() -> ret\n            {\n                let slot := 2\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:506:2652  \"contract SimpleModularWallet is IWallet {...\"\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_moduleCount()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_moduleCount()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 22 @src 0:553:573  \"address public owner\"\n            function getter_fun_owner() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:506:2652  \"contract SimpleModularWallet is IWallet {...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_owner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_owner()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n            { revert(0, 0) }\n            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n            { revert(0, 0) }\n            function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff)\n                {\n                    revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n                }\n                arrayPos := add(offset, 0x20)\n                if gt(add(arrayPos, mul(length, 0x01)), end)\n                {\n                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                }\n            }\n            function abi_decode_addresst_uint256t_bytes_calldata(headStart, dataEnd) -> value0, value1, value2, value3\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := calldataload(add(headStart, 64))\n                if gt(offset_2, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value2, value3 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n            }\n            function external_fun_invoke()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2, param_3 := abi_decode_addresst_uint256t_bytes_calldata(4, calldatasize())\n                fun_invoke(param, param_1, param_2, param_3)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_bool_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_bool(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_bool(sload(slot), offset)\n            }\n            /// @ast-id 26 @src 0:580:622  \"mapping(address => bool) public authorised\"\n            function getter_fun_authorised(key) -> ret\n            {\n                let slot := 1\n                let offset := 0\n                slot := mapping_index_access_mapping_address_bool_of_address(slot, key)\n                ret := read_from_storage_split_dynamic_bool(slot, offset)\n            }\n            /// @src 0:506:2652  \"contract SimpleModularWallet is IWallet {...\"\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            function external_fun_authorised()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := getter_fun_authorised(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_addresst_address(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_address(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_init()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_address(4, calldatasize())\n                fun_init(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            { revert(0, 0) }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_0f7b745d745a3aa6d30c631e7afc53c1a6e0868b1e560770dc506e8e3ceb0875(memPtr)\n            {\n                mstore(add(memPtr, 0), \"SW: caller is not owner\")\n            }\n            function abi_encode_stringliteral_0f7b745d745a3aa6d30c631e7afc53c1a6e0868b1e560770dc506e8e3ceb0875(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 23)\n                store_literal_in_memory_0f7b745d745a3aa6d30c631e7afc53c1a6e0868b1e560770dc506e8e3ceb0875(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_0f7b(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_0f7b745d745a3aa6d30c631e7afc53c1a6e0868b1e560770dc506e8e3ceb0875(tail)\n            }\n            function require_helper_stringliteral_0f7b(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_0f7b(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 60 @src 0:842:949  \"modifier onlyOwner() {...\"\n            function modifier_onlyOwner(var_module, var_value)\n            {\n                /// @src 0:882:892  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:896:901  \"owner\"\n                let _1 := read_from_storage_split_offset_address(0x00)\n                let expr_1 := _1\n                /// @src 0:882:901  \"msg.sender == owner\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 0:874:929  \"require(msg.sender == owner, \\\"SW: caller is not owner\\\")\"\n                require_helper_stringliteral_0f7b(expr_2)\n                /// @src 0:940:941  \"_\"\n                fun_authoriseModule_inner(var_module, var_value)\n            }\n            /// @src 0:506:2652  \"contract SimpleModularWallet is IWallet {...\"\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function store_literal_in_memory_1ecd1cf430b0bb00562e84e8015d82e020fd134b05303fc2b7adb921d984b4ea(memPtr)\n            {\n                mstore(add(memPtr, 0), \"SW: module cannot be zero addres\")\n                mstore(add(memPtr, 32), \"s\")\n            }\n            function abi_encode_stringliteral_1ecd(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 33)\n                store_literal_in_memory_1ecd1cf430b0bb00562e84e8015d82e020fd134b05303fc2b7adb921d984b4ea(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_tuple_stringliteral_1ecd(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_1ecd(tail)\n            }\n            function require_helper_stringliteral_1ecd(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_1ecd(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            function abi_encode_address_bool(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_bool_to_bool(value1, add(headStart, 32))\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function store_literal_in_memory_461e1cdc5c4ae9463c74f4e0d3f3060227c8956b54bcad257955a319b0905ec0(memPtr)\n            {\n                mstore(add(memPtr, 0), \"SW: cannot remove last module\")\n            }\n            function abi_encode_stringliteral_461e1cdc5c4ae9463c74f4e0d3f3060227c8956b54bcad257955a319b0905ec0(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 29)\n                store_literal_in_memory_461e1cdc5c4ae9463c74f4e0d3f3060227c8956b54bcad257955a319b0905ec0(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_461e(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_461e1cdc5c4ae9463c74f4e0d3f3060227c8956b54bcad257955a319b0905ec0(tail)\n            }\n            function require_helper_stringliteral_461e(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_461e(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic1(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, 255)\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_bool_to_bool(slot, offset, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_dynamic1(sload(slot), offset, prepare_store_bool(convertedValue)))\n            }\n            function zero_value_for_split_bool() -> ret\n            { ret := 0 }\n            function storage_set_to_zero_bool(slot, offset)\n            {\n                let zero := zero_value_for_split_bool()\n                update_storage_value_bool_to_bool(slot, offset, zero)\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function convert_uint160_to_contract_IModule(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_contract_IModule(value) -> converted\n            {\n                converted := convert_uint160_to_contract_IModule(value)\n            }\n            function convert_contract_IModule_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function convert_contract_SimpleModularWallet_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            { revert(0, 0) }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function shift_left_224(value) -> newValue\n            { newValue := shl(224, value) }\n            function abi_decode_fromMemory(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @src 0:1612:2237  \"function authoriseModule(address _module, bool _value) external onlyOwner {...\"\n            function fun_authoriseModule_inner(var__module, var_value)\n            {\n                /// @src 0:1705:1712  \"_module\"\n                let _1 := var__module\n                let expr := _1\n                /// @src 0:1724:1725  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:1716:1726  \"address(0)\"\n                let expr_2 := convert_rational_by_to_address(expr_1)\n                /// @src 0:1705:1726  \"_module != address(0)\"\n                let expr_3 := iszero(eq(cleanup_address(expr), cleanup_address(expr_2)))\n                /// @src 0:1697:1764  \"require(_module != address(0), \\\"SW: module cannot be zero address\\\")\"\n                require_helper_stringliteral_1ecd(expr_3)\n                /// @src 0:1779:1789  \"authorised\"\n                let _slot := 0x01\n                let expr_152_slot := _slot\n                /// @src 0:1790:1797  \"_module\"\n                let _2 := var__module\n                let expr_4 := _2\n                /// @src 0:1779:1798  \"authorised[_module]\"\n                let _3 := mapping_index_access_mapping_address_bool_of_address(expr_152_slot, expr_4)\n                let _4 := read_from_storage_split_offset_bool(_3)\n                let expr_5 := _4\n                /// @src 0:1802:1808  \"_value\"\n                let _5 := var_value\n                let expr_6 := _5\n                /// @src 0:1779:1808  \"authorised[_module] != _value\"\n                let expr_7 := iszero(eq(cleanup_bool(expr_5), cleanup_bool(expr_6)))\n                /// @src 0:1775:2230  \"if (authorised[_module] != _value) {...\"\n                if expr_7\n                {\n                    /// @src 0:1847:1854  \"_module\"\n                    let _6 := var__module\n                    let expr_8 := _6\n                    /// @src 0:1856:1862  \"_value\"\n                    let _7 := var_value\n                    let expr_9 := _7\n                    /// @src 0:1830:1863  \"AuthorisedModule(_module, _value)\"\n                    let _8 := 0x8da3ff870ae294081392139550e167f1f31f277f22015ee22fbffdbd7758f4e1\n                    let _9 := allocate_unbounded()\n                    let _10 := abi_encode_address_bool(_9, expr_8, expr_9)\n                    log1(_9, sub(_10, _9), _8)\n                    /// @src 0:1882:1888  \"_value\"\n                    let _11 := var_value\n                    let expr_10 := _11\n                    /// @src 0:1878:2219  \"if (_value) {...\"\n                    switch expr_10\n                    case 0 {\n                        /// @src 0:2081:2082  \"1\"\n                        let expr_11 := 0x01\n                        /// @src 0:2066:2082  \"moduleCount -= 1\"\n                        let _12 := convert_rational_by_to_uint256(expr_11)\n                        let _13 := read_from_storage_split_offset_uint256(0x02)\n                        let expr_12 := checked_sub_uint256(_13, _12)\n                        update_storage_value_offset_uint256_to_uint256(0x02, expr_12)\n                        /// @src 0:2109:2120  \"moduleCount\"\n                        let _14 := read_from_storage_split_offset_uint256(0x02)\n                        let expr_13 := _14\n                        /// @src 0:2123:2124  \"0\"\n                        let expr_14 := 0x00\n                        /// @src 0:2109:2124  \"moduleCount > 0\"\n                        let expr_15 := gt(cleanup_uint256(expr_13), convert_t_rational_by_to_t_uint256(expr_14))\n                        /// @src 0:2101:2158  \"require(moduleCount > 0, \\\"SW: cannot remove last module\\\")\"\n                        require_helper_stringliteral_461e(expr_15)\n                        /// @src 0:2184:2194  \"authorised\"\n                        let _17_slot := 0x01\n                        let expr_slot := _17_slot\n                        /// @src 0:2195:2202  \"_module\"\n                        let _15 := var__module\n                        let expr_16 := _15\n                        /// @src 0:2184:2203  \"authorised[_module]\"\n                        let _16 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_16)\n                        /// @src 0:2177:2203  \"delete authorised[_module]\"\n                        storage_set_to_zero_bool(_16, 0)\n                    }\n                    default /// @src 0:1878:2219  \"if (_value) {...\"\n                    {\n                        /// @src 0:1924:1925  \"1\"\n                        let expr_17 := 0x01\n                        /// @src 0:1909:1925  \"moduleCount += 1\"\n                        let _17 := convert_rational_by_to_uint256(expr_17)\n                        let _18 := read_from_storage_split_offset_uint256(0x02)\n                        let expr_18 := checked_add_uint256(_18, _17)\n                        update_storage_value_offset_uint256_to_uint256(0x02, expr_18)\n                        /// @src 0:1966:1970  \"true\"\n                        let expr_19 := 0x01\n                        /// @src 0:1944:1954  \"authorised\"\n                        let _22_slot := 0x01\n                        let expr_167_slot := _22_slot\n                        /// @src 0:1955:1962  \"_module\"\n                        let _19 := var__module\n                        let expr_20 := _19\n                        /// @src 0:1944:1963  \"authorised[_module]\"\n                        let _20 := mapping_index_access_mapping_address_bool_of_address(expr_167_slot, expr_20)\n                        /// @src 0:1944:1970  \"authorised[_module] = true\"\n                        update_storage_value_offset_bool_to_bool(_20, expr_19)\n                        /// @src 0:1997:2004  \"_module\"\n                        let _21 := var__module\n                        let expr_21 := _21\n                        /// @src 0:1989:2005  \"IModule(_module)\"\n                        let expr_175_address := convert_address_to_contract_IModule(expr_21)\n                        /// @src 0:1989:2010  \"IModule(_module).init\"\n                        let expr_176_address := convert_contract_IModule_to_address(expr_175_address)\n                        let expr_176_functionSelector := 0x19ab453c\n                        /// @src 0:2019:2023  \"this\"\n                        let expr_179_address := address()\n                        /// @src 0:2011:2024  \"address(this)\"\n                        let expr_22 := convert_contract_SimpleModularWallet_to_address(expr_179_address)\n                        /// @src 0:1989:2025  \"IModule(_module).init(address(this))\"\n                        if iszero(extcodesize(expr_176_address))\n                        {\n                            revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                        }\n                        let _22 := allocate_unbounded()\n                        mstore(_22, shift_left_224(expr_176_functionSelector))\n                        let _23 := abi_encode_tuple_address(add(_22, 4), expr_22)\n                        let _24 := call(gas(), expr_176_address, 0, _22, sub(_23, _22), _22, 0)\n                        if iszero(_24) { revert_forward() }\n                        if _24\n                        {\n                            let _25 := 0\n                            if gt(_25, returndatasize()) { _25 := returndatasize() }\n                            finalize_allocation(_22, _25)\n                            abi_decode_fromMemory(_22, add(_22, _25))\n                        }\n                    }\n                }\n            }\n            /// @ast-id 205 @src 0:1612:2237  \"function authoriseModule(address _module, bool _value) external onlyOwner {...\"\n            function fun_authoriseModule(var_module, var_value)\n            {\n                modifier_onlyOwner(var_module, var_value)\n            }\n            /// @src 0:506:2652  \"contract SimpleModularWallet is IWallet {...\"\n            function store_literal_in_memory_4d0677c0cca761302b24d77360b4d9ff9523e81cdb59bdc7c3940b7a4bdaa362(memPtr)\n            {\n                mstore(add(memPtr, 0), \"SW: caller is not authorised mod\")\n                mstore(add(memPtr, 32), \"ule\")\n            }\n            function abi_encode_stringliteral_4d06(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 35)\n                store_literal_in_memory_4d0677c0cca761302b24d77360b4d9ff9523e81cdb59bdc7c3940b7a4bdaa362(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_tuple_stringliteral_4d06(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_4d06(tail)\n            }\n            function require_helper_stringliteral_4d06(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_4d06(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 72 @src 0:957:1080  \"modifier moduleOnly() {...\"\n            function modifier_moduleOnly(var_to, var__value, var_data_offset, var_data_211_length)\n            {\n                /// @src 0:998:1008  \"authorised\"\n                let _30_slot := 0x01\n                let expr_63_slot := _30_slot\n                /// @src 0:1009:1019  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:998:1020  \"authorised[msg.sender]\"\n                let _1 := mapping_index_access_mapping_address_bool_of_address(expr_63_slot, expr)\n                let _2 := read_from_storage_split_offset_bool(_1)\n                let expr_1 := _2\n                /// @src 0:990:1060  \"require(authorised[msg.sender], \\\"SW: caller is not authorised module\\\")\"\n                require_helper_stringliteral_4d06(expr_1)\n                /// @src 0:1071:1072  \"_\"\n                fun_invoke_inner(var_to, var__value, var_data_offset, var_data_211_length)\n            }\n            /// @src 0:506:2652  \"contract SimpleModularWallet is IWallet {...\"\n            function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function copy_calldata_to_memory_with_cleanup(src, dst, length)\n            {\n                calldatacopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_bytes_calldata(start, length, pos) -> end\n            {\n                pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length)\n                copy_calldata_to_memory_with_cleanup(start, pos, length)\n                end := add(pos, length)\n            }\n            function abi_encode_packed_bytes_calldata(pos, value0, value1) -> end\n            {\n                pos := abi_encode_bytes_calldata(value0, value1, pos)\n                end := pos\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_bytes(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_bytes(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_split_bytes() -> ret\n            { ret := 96 }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 {\n                    data := zero_value_for_split_bytes()\n                }\n                default {\n                    data := allocate_memory_array_bytes(returndatasize())\n                    returndatacopy(add(data, 0x20), 0, returndatasize())\n                }\n            }\n            function store_literal_in_memory_fc19d8883bb2e801289bdd58bca488d0c8dc93e6ecf585dcd9d940cedbf722a4(memPtr)\n            {\n                mstore(add(memPtr, 0), \"SW: call failed\")\n            }\n            function abi_encode_stringliteral_fc19d8883bb2e801289bdd58bca488d0c8dc93e6ecf585dcd9d940cedbf722a4(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 15)\n                store_literal_in_memory_fc19d8883bb2e801289bdd58bca488d0c8dc93e6ecf585dcd9d940cedbf722a4(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_fc19(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_fc19d8883bb2e801289bdd58bca488d0c8dc93e6ecf585dcd9d940cedbf722a4(tail)\n            }\n            function require_helper_stringliteral_fc19(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_fc19(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function array_storeLengthForEncoding_bytes(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function abi_encode_bytes_calldata_ptr(start, length, pos) -> end\n            {\n                pos := array_storeLengthForEncoding_bytes(pos, length)\n                copy_calldata_to_memory_with_cleanup(start, pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_uint256_bytes_calldata(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 64)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                mstore(add(headStart, 32), sub(tail, headStart))\n                tail := abi_encode_bytes_calldata_ptr(value1, value2, tail)\n            }\n            /// @src 0:2286:2539  \"function invoke(address _to, uint256 _value, bytes calldata _data) external override moduleOnly {...\"\n            function fun_invoke_inner(var__to, var_value, var__data_offset, var__data_length)\n            {\n                /// @src 0:2412:2415  \"_to\"\n                let _1 := var__to\n                let expr := _1\n                /// @src 0:2412:2420  \"_to.call\"\n                let expr_220_address := expr\n                /// @src 0:2428:2434  \"_value\"\n                let _2 := var_value\n                let expr_1 := _2\n                /// @src 0:2412:2435  \"_to.call{value: _value}\"\n                let expr_222_address := expr_220_address\n                let expr_value := expr_1\n                /// @src 0:2436:2441  \"_data\"\n                let _offset := var__data_offset\n                let _35_length := var__data_length\n                let expr_offset := _offset\n                let expr_223_length := _35_length\n                /// @src 0:2412:2442  \"_to.call{value: _value}(_data)\"\n                let _3 := allocate_unbounded()\n                let _4 := sub(abi_encode_packed_bytes_calldata(_3, expr_offset, expr_223_length), _3)\n                let expr_component := call(gas(), expr_222_address, expr_value, _3, _4, 0, 0)\n                pop(extract_returndata())\n                /// @src 0:2393:2442  \"(bool success, ) = _to.call{value: _value}(_data)\"\n                let var_success := expr_component\n                /// @src 0:2461:2468  \"success\"\n                let _5 := var_success\n                let expr_2 := _5\n                /// @src 0:2453:2488  \"require(success, \\\"SW: call failed\\\")\"\n                require_helper_stringliteral_fc19(expr_2)\n                /// @src 0:2512:2515  \"_to\"\n                let _6 := var__to\n                let expr_3 := _6\n                /// @src 0:2517:2523  \"_value\"\n                let _7 := var_value\n                let expr_4 := _7\n                /// @src 0:2525:2530  \"_data\"\n                let _41_offset := var__data_offset\n                let _length := var__data_length\n                let expr_234_offset := _41_offset\n                let expr_length := _length\n                /// @src 0:2504:2531  \"Invoked(_to, _value, _data)\"\n                let _8 := 0x8e084f4a28a6752a4c84a569571c55c88b5e8a28400d520311a3b501fc5e4c35\n                let _9 := convert_address_to_address(expr_3)\n                let _10 := allocate_unbounded()\n                let _11 := abi_encode_uint256_bytes_calldata(_10, expr_4, expr_234_offset, expr_length)\n                log2(_10, sub(_11, _10), _8, _9)\n            }\n            /// @ast-id 238 @src 0:2286:2539  \"function invoke(address _to, uint256 _value, bytes calldata _data) external override moduleOnly {...\"\n            function fun_invoke(var_to, var_value, var_data_offset, var_data_length)\n            {\n                modifier_moduleOnly(var_to, var_value, var_data_offset, var_data_length)\n            }\n            /// @src 0:506:2652  \"contract SimpleModularWallet is IWallet {...\"\n            function store_literal_in_memory_a2f5b7a07793c664b0ec65a49fc76506c73e90dc66ce6187039e0dda861b2028(memPtr)\n            {\n                mstore(add(memPtr, 0), \"SW: wallet already initialised\")\n            }\n            function abi_encode_stringliteral_a2f5(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 30)\n                store_literal_in_memory_a2f5b7a07793c664b0ec65a49fc76506c73e90dc66ce6187039e0dda861b2028(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_a2f5(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_a2f5(tail)\n            }\n            function require_helper_stringliteral_a2f5(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_a2f5(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function update_byte_slice_20_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            /// @ast-id 133 @src 0:1145:1562  \"function init(address _owner, address _module) external {...\"\n            function fun_init(var_owner, var_module)\n            {\n                /// @src 0:1220:1225  \"owner\"\n                let _1 := read_from_storage_split_offset_address(0x00)\n                let expr := _1\n                /// @src 0:1237:1238  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:1229:1239  \"address(0)\"\n                let expr_2 := convert_rational_by_to_address(expr_1)\n                /// @src 0:1220:1239  \"owner == address(0)\"\n                let expr_3 := eq(cleanup_address(expr), cleanup_address(expr_2))\n                /// @src 0:1220:1259  \"owner == address(0) && moduleCount == 0\"\n                let expr_4 := expr_3\n                if expr_4\n                {\n                    /// @src 0:1243:1254  \"moduleCount\"\n                    let _2 := read_from_storage_split_offset_uint256(0x02)\n                    let expr_5 := _2\n                    /// @src 0:1258:1259  \"0\"\n                    let expr_6 := 0x00\n                    /// @src 0:1243:1259  \"moduleCount == 0\"\n                    let expr_7 := eq(cleanup_uint256(expr_5), convert_t_rational_by_to_t_uint256(expr_6))\n                    /// @src 0:1220:1259  \"owner == address(0) && moduleCount == 0\"\n                    expr_4 := expr_7\n                }\n                /// @src 0:1212:1294  \"require(owner == address(0) && moduleCount == 0, \\\"SW: wallet already initialised\\\")\"\n                require_helper_stringliteral_a2f5(expr_4)\n                /// @src 0:1313:1320  \"_module\"\n                let _3 := var_module\n                let expr_8 := _3\n                /// @src 0:1332:1333  \"0\"\n                let expr_9 := 0x00\n                /// @src 0:1324:1334  \"address(0)\"\n                let expr_10 := convert_rational_by_to_address(expr_9)\n                /// @src 0:1313:1334  \"_module != address(0)\"\n                let expr_11 := iszero(eq(cleanup_address(expr_8), cleanup_address(expr_10)))\n                /// @src 0:1305:1372  \"require(_module != address(0), \\\"SW: module cannot be zero address\\\")\"\n                require_helper_stringliteral_1ecd(expr_11)\n                /// @src 0:1391:1397  \"_owner\"\n                let _4 := var_owner\n                let expr_12 := _4\n                /// @src 0:1383:1397  \"owner = _owner\"\n                update_storage_value_offset_address_to_address(0x00, expr_12)\n                /// @src 0:1430:1434  \"true\"\n                let expr_13 := 0x01\n                /// @src 0:1408:1418  \"authorised\"\n                let _50_slot := 0x01\n                let expr_107_slot := _50_slot\n                /// @src 0:1419:1426  \"_module\"\n                let _5 := var_module\n                let expr_14 := _5\n                /// @src 0:1408:1427  \"authorised[_module]\"\n                let _6 := mapping_index_access_mapping_address_bool_of_address(expr_107_slot, expr_14)\n                /// @src 0:1408:1434  \"authorised[_module] = true\"\n                update_storage_value_offset_bool_to_bool(_6, expr_13)\n                /// @src 0:1459:1460  \"1\"\n                let expr_15 := 0x01\n                /// @src 0:1445:1460  \"moduleCount = 1\"\n                let _7 := convert_rational_by_to_uint256(expr_15)\n                update_storage_value_offset_uint256_to_uint256(0x02, _7)\n                /// @src 0:1479:1486  \"_module\"\n                let _8 := var_module\n                let expr_16 := _8\n                /// @src 0:1471:1487  \"IModule(_module)\"\n                let expr_119_address := convert_address_to_contract_IModule(expr_16)\n                /// @src 0:1471:1492  \"IModule(_module).init\"\n                let expr_address := convert_contract_IModule_to_address(expr_119_address)\n                let expr_functionSelector := 0x19ab453c\n                /// @src 0:1501:1505  \"this\"\n                let expr_123_address := address()\n                /// @src 0:1493:1506  \"address(this)\"\n                let expr_17 := convert_contract_SimpleModularWallet_to_address(expr_123_address)\n                /// @src 0:1471:1507  \"IModule(_module).init(address(this))\"\n                if iszero(extcodesize(expr_address))\n                {\n                    revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                }\n                let _9 := allocate_unbounded()\n                mstore(_9, shift_left_224(expr_functionSelector))\n                let _10 := abi_encode_tuple_address(add(_9, 4), expr_17)\n                let _11 := call(gas(), expr_address, 0, _9, sub(_10, _9), _9, 0)\n                if iszero(_11) { revert_forward() }\n                if _11\n                {\n                    let _12 := 0\n                    if gt(_12, returndatasize()) { _12 := returndatasize() }\n                    finalize_allocation(_9, _12)\n                    abi_decode_fromMemory(_9, add(_9, _12))\n                }\n                /// @src 0:1540:1547  \"_module\"\n                let _13 := var_module\n                let expr_18 := _13\n                /// @src 0:1549:1553  \"true\"\n                let expr_19 := 0x01\n                /// @src 0:1523:1554  \"AuthorisedModule(_module, true)\"\n                let _14 := 0x8da3ff870ae294081392139550e167f1f31f277f22015ee22fbffdbd7758f4e1\n                let _15 := allocate_unbounded()\n                let _16 := abi_encode_address_bool(_15, expr_18, expr_19)\n                log1(_15, sub(_16, _15), _14)\n            }\n            /// @src 0:506:2652  \"contract SimpleModularWallet is IWallet {...\"\n            function abi_encode_uint256_address(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                abi_encode_address(value1, add(headStart, 32))\n            }\n            /// @ast-id 249 @src 0:2567:2649  \"receive() external payable {...\"\n            function fun()\n            {\n                /// @src 0:2619:2628  \"msg.value\"\n                let expr := callvalue()\n                /// @src 0:2630:2640  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:2610:2641  \"Received(msg.value, msg.sender)\"\n                let _1 := 0x8863e458255c600ae3e61be347822f3ee57088c8538b68b5dd2357e682e59e19\n                let _2 := allocate_unbounded()\n                let _3 := abi_encode_uint256_address(_2, expr, expr_1)\n                log1(_2, sub(_3, _2), _1)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220434c69a8516cec5b961ce4ebe2c3815e18ce36d83c567d2bcdf296520ac902df64736f6c634300081c0033\"\n    }\n}\n",
					"hash": "cba2876acaafab866312380c90600653aba1ef82b4387038d986ba6a22f274c2",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"SimpleModulaWallet.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "SimpleModulaWallet.sol",
					"exportedSymbols": {
						"IModule": [
							7
						],
						"IWallet": [
							17
						],
						"SimpleModularWallet": [
							250
						]
					},
					"id": 251,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".3"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IModule",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 7,
							"linearizedBaseContracts": [
								7
							],
							"name": "IModule",
							"nameLocation": "98:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "19ab453c",
									"id": 6,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "init",
									"nameLocation": "122:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"mutability": "mutable",
												"name": "wallet",
												"nameLocation": "135:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 6,
												"src": "127:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "127:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "126:16:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "151:0:0"
									},
									"scope": 7,
									"src": "113:39:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 251,
							"src": "88:67:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IWallet",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 17,
							"linearizedBaseContracts": [
								17
							],
							"name": "IWallet",
							"nameLocation": "198:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "8f6f0332",
									"id": 16,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "invoke",
									"nameLocation": "222:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "237:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "229:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "229:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "250:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "242:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 10,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "242:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "273:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "258:20:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 12,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "258:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "228:51:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "288:0:0"
									},
									"scope": 17,
									"src": "213:76:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 251,
							"src": "188:104:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 19,
										"name": "IWallet",
										"nameLocations": [
											"538:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 17,
										"src": "538:7:0"
									},
									"id": 20,
									"nodeType": "InheritanceSpecifier",
									"src": "538:7:0"
								}
							],
							"canonicalName": "SimpleModularWallet",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 18,
								"nodeType": "StructuredDocumentation",
								"src": "296:208:0",
								"text": " @title SimpleModularWallet\n @notice A simple modular wallet for hackathon use, inspired by Argent's BaseWallet.\n @dev Allows an owner to manage modules and execute transactions via modules."
							},
							"fullyImplemented": true,
							"id": 250,
							"linearizedBaseContracts": [
								250,
								17
							],
							"name": "SimpleModularWallet",
							"nameLocation": "515:19:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 22,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "568:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 250,
									"src": "553:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 21,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "553:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d6eb1bbf",
									"id": 26,
									"mutability": "mutable",
									"name": "authorised",
									"nameLocation": "612:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 250,
									"src": "580:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 25,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 23,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "588:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "580:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 24,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "599:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "334f7ac5",
									"id": 28,
									"mutability": "mutable",
									"name": "moduleCount",
									"nameLocation": "644:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 250,
									"src": "629:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 27,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "629:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "8da3ff870ae294081392139550e167f1f31f277f22015ee22fbffdbd7758f4e1",
									"id": 34,
									"name": "AuthorisedModule",
									"nameLocation": "670:16:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "module",
												"nameLocation": "695:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "687:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 29,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 32,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "708:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "703:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 31,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "703:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "686:28:0"
									},
									"src": "664:51:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8e084f4a28a6752a4c84a569571c55c88b5e8a28400d520311a3b501fc5e4c35",
									"id": 42,
									"name": "Invoked",
									"nameLocation": "727:7:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "751:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "735:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 35,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "735:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "763:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "755:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "755:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 40,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "776:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "770:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 39,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "770:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "734:47:0"
									},
									"src": "721:61:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8863e458255c600ae3e61be347822f3ee57088c8538b68b5dd2357e682e59e19",
									"id": 48,
									"name": "Received",
									"nameLocation": "794:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "811:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "803:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 43,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 46,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "826:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "818:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "818:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:31:0"
									},
									"src": "788:46:0"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "863:86:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 51,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "882:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "886:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "882:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 53,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 22,
																"src": "896:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "882:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53573a2063616c6c6572206973206e6f74206f776e6572",
															"id": 55,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "903:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0f7b745d745a3aa6d30c631e7afc53c1a6e0868b1e560770dc506e8e3ceb0875",
																"typeString": "literal_string \"SW: caller is not owner\""
															},
															"value": "SW: caller is not owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0f7b745d745a3aa6d30c631e7afc53c1a6e0868b1e560770dc506e8e3ceb0875",
																"typeString": "literal_string \"SW: caller is not owner\""
															}
														],
														"id": 50,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "874:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 56,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "874:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 57,
												"nodeType": "ExpressionStatement",
												"src": "874:55:0"
											},
											{
												"id": 58,
												"nodeType": "PlaceholderStatement",
												"src": "940:1:0"
											}
										]
									},
									"id": 60,
									"name": "onlyOwner",
									"nameLocation": "851:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "860:2:0"
									},
									"src": "842:107:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 71,
										"nodeType": "Block",
										"src": "979:101:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 63,
																"name": "authorised",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 26,
																"src": "998:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 66,
															"indexExpression": {
																"expression": {
																	"id": 64,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1009:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 65,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1013:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1009:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "998:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53573a2063616c6c6572206973206e6f7420617574686f7269736564206d6f64756c65",
															"id": 67,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1022:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4d0677c0cca761302b24d77360b4d9ff9523e81cdb59bdc7c3940b7a4bdaa362",
																"typeString": "literal_string \"SW: caller is not authorised module\""
															},
															"value": "SW: caller is not authorised module"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4d0677c0cca761302b24d77360b4d9ff9523e81cdb59bdc7c3940b7a4bdaa362",
																"typeString": "literal_string \"SW: caller is not authorised module\""
															}
														],
														"id": 62,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "990:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 68,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "990:70:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 69,
												"nodeType": "ExpressionStatement",
												"src": "990:70:0"
											},
											{
												"id": 70,
												"nodeType": "PlaceholderStatement",
												"src": "1071:1:0"
											}
										]
									},
									"id": 72,
									"name": "moduleOnly",
									"nameLocation": "966:10:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "976:2:0"
									},
									"src": "957:123:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 132,
										"nodeType": "Block",
										"src": "1201:361:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 89,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 85,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 80,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 22,
																	"src": "1220:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 83,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1237:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 82,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1229:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 81,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1229:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 84,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1229:10:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "1220:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 88,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 86,
																	"name": "moduleCount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 28,
																	"src": "1243:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 87,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1258:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1243:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1220:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53573a2077616c6c657420616c726561647920696e697469616c69736564",
															"id": 90,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1261:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a2f5b7a07793c664b0ec65a49fc76506c73e90dc66ce6187039e0dda861b2028",
																"typeString": "literal_string \"SW: wallet already initialised\""
															},
															"value": "SW: wallet already initialised"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a2f5b7a07793c664b0ec65a49fc76506c73e90dc66ce6187039e0dda861b2028",
																"typeString": "literal_string \"SW: wallet already initialised\""
															}
														],
														"id": 79,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1212:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 91,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1212:82:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 92,
												"nodeType": "ExpressionStatement",
												"src": "1212:82:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 99,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 94,
																"name": "_module",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 76,
																"src": "1313:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 97,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1332:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 96,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1324:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 95,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1324:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 98,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1324:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1313:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53573a206d6f64756c652063616e6e6f74206265207a65726f2061646472657373",
															"id": 100,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1336:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1ecd1cf430b0bb00562e84e8015d82e020fd134b05303fc2b7adb921d984b4ea",
																"typeString": "literal_string \"SW: module cannot be zero address\""
															},
															"value": "SW: module cannot be zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1ecd1cf430b0bb00562e84e8015d82e020fd134b05303fc2b7adb921d984b4ea",
																"typeString": "literal_string \"SW: module cannot be zero address\""
															}
														],
														"id": 93,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1305:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1305:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 102,
												"nodeType": "ExpressionStatement",
												"src": "1305:67:0"
											},
											{
												"expression": {
													"id": 105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 103,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 22,
														"src": "1383:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 104,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 74,
														"src": "1391:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1383:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 106,
												"nodeType": "ExpressionStatement",
												"src": "1383:14:0"
											},
											{
												"expression": {
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 107,
															"name": "authorised",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 26,
															"src": "1408:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 109,
														"indexExpression": {
															"id": 108,
															"name": "_module",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 76,
															"src": "1419:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1408:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1430:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1408:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 112,
												"nodeType": "ExpressionStatement",
												"src": "1408:26:0"
											},
											{
												"expression": {
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 113,
														"name": "moduleCount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 28,
														"src": "1445:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 114,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1459:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1445:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 116,
												"nodeType": "ExpressionStatement",
												"src": "1445:15:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 123,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1501:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SimpleModularWallet_$250",
																		"typeString": "contract SimpleModularWallet"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SimpleModularWallet_$250",
																		"typeString": "contract SimpleModularWallet"
																	}
																],
																"id": 122,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1493:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 121,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1493:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1493:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 118,
																	"name": "_module",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 76,
																	"src": "1479:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 117,
																"name": "IModule",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "1471:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IModule_$7_$",
																	"typeString": "type(contract IModule)"
																}
															},
															"id": 119,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1471:16:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IModule_$7",
																"typeString": "contract IModule"
															}
														},
														"id": 120,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1488:4:0",
														"memberName": "init",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 6,
														"src": "1471:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address) external"
														}
													},
													"id": 125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1471:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 126,
												"nodeType": "ExpressionStatement",
												"src": "1471:36:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 128,
															"name": "_module",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 76,
															"src": "1540:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "74727565",
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1549:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 127,
														"name": "AuthorisedModule",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 34,
														"src": "1523:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,bool)"
														}
													},
													"id": 130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1523:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 131,
												"nodeType": "EmitStatement",
												"src": "1518:36:0"
											}
										]
									},
									"functionSelector": "f09a4016",
									"id": 133,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "init",
									"nameLocation": "1154:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "1167:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "1159:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1159:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "_module",
												"nameLocation": "1183:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "1175:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 75,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1175:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1158:33:0"
									},
									"returnParameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1201:0:0"
									},
									"scope": 250,
									"src": "1145:417:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 204,
										"nodeType": "Block",
										"src": "1686:551:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 148,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 143,
																"name": "_module",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 135,
																"src": "1705:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 146,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1724:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 145,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1716:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 144,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1716:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 147,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1716:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1705:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53573a206d6f64756c652063616e6e6f74206265207a65726f2061646472657373",
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1728:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1ecd1cf430b0bb00562e84e8015d82e020fd134b05303fc2b7adb921d984b4ea",
																"typeString": "literal_string \"SW: module cannot be zero address\""
															},
															"value": "SW: module cannot be zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1ecd1cf430b0bb00562e84e8015d82e020fd134b05303fc2b7adb921d984b4ea",
																"typeString": "literal_string \"SW: module cannot be zero address\""
															}
														],
														"id": 142,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1697:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1697:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 151,
												"nodeType": "ExpressionStatement",
												"src": "1697:67:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 152,
															"name": "authorised",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 26,
															"src": "1779:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 154,
														"indexExpression": {
															"id": 153,
															"name": "_module",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 135,
															"src": "1790:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1779:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 155,
														"name": "_value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 137,
														"src": "1802:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1779:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 203,
												"nodeType": "IfStatement",
												"src": "1775:455:0",
												"trueBody": {
													"id": 202,
													"nodeType": "Block",
													"src": "1810:420:0",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 158,
																		"name": "_module",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 135,
																		"src": "1847:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 159,
																		"name": "_value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 137,
																		"src": "1856:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 157,
																	"name": "AuthorisedModule",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 34,
																	"src": "1830:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$",
																		"typeString": "function (address,bool)"
																	}
																},
																"id": 160,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1830:33:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 161,
															"nodeType": "EmitStatement",
															"src": "1825:38:0"
														},
														{
															"condition": {
																"id": 162,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 137,
																"src": "1882:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 200,
																"nodeType": "Block",
																"src": "2047:172:0",
																"statements": [
																	{
																		"expression": {
																			"id": 186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 184,
																				"name": "moduleCount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 28,
																				"src": "2066:11:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "-=",
																			"rightHandSide": {
																				"hexValue": "31",
																				"id": 185,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2081:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "2066:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 187,
																		"nodeType": "ExpressionStatement",
																		"src": "2066:16:0"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 191,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 189,
																						"name": "moduleCount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 28,
																						"src": "2109:11:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": ">",
																					"rightExpression": {
																						"hexValue": "30",
																						"id": 190,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "2123:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					},
																					"src": "2109:15:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "53573a2063616e6e6f742072656d6f7665206c617374206d6f64756c65",
																					"id": 192,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2126:31:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_461e1cdc5c4ae9463c74f4e0d3f3060227c8956b54bcad257955a319b0905ec0",
																						"typeString": "literal_string \"SW: cannot remove last module\""
																					},
																					"value": "SW: cannot remove last module"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_461e1cdc5c4ae9463c74f4e0d3f3060227c8956b54bcad257955a319b0905ec0",
																						"typeString": "literal_string \"SW: cannot remove last module\""
																					}
																				],
																				"id": 188,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "2101:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 193,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2101:57:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 194,
																		"nodeType": "ExpressionStatement",
																		"src": "2101:57:0"
																	},
																	{
																		"expression": {
																			"id": 198,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "delete",
																			"prefix": true,
																			"src": "2177:26:0",
																			"subExpression": {
																				"baseExpression": {
																					"id": 195,
																					"name": "authorised",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 26,
																					"src": "2184:10:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																						"typeString": "mapping(address => bool)"
																					}
																				},
																				"id": 197,
																				"indexExpression": {
																					"id": 196,
																					"name": "_module",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 135,
																					"src": "2195:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "2184:19:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 199,
																		"nodeType": "ExpressionStatement",
																		"src": "2177:26:0"
																	}
																]
															},
															"id": 201,
															"nodeType": "IfStatement",
															"src": "1878:341:0",
															"trueBody": {
																"id": 183,
																"nodeType": "Block",
																"src": "1890:151:0",
																"statements": [
																	{
																		"expression": {
																			"id": 165,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 163,
																				"name": "moduleCount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 28,
																				"src": "1909:11:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"hexValue": "31",
																				"id": 164,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1924:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "1909:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 166,
																		"nodeType": "ExpressionStatement",
																		"src": "1909:16:0"
																	},
																	{
																		"expression": {
																			"id": 171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 167,
																					"name": "authorised",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 26,
																					"src": "1944:10:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																						"typeString": "mapping(address => bool)"
																					}
																				},
																				"id": 169,
																				"indexExpression": {
																					"id": 168,
																					"name": "_module",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 135,
																					"src": "1955:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "1944:19:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"hexValue": "74727565",
																				"id": 170,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1966:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "true"
																			},
																			"src": "1944:26:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 172,
																		"nodeType": "ExpressionStatement",
																		"src": "1944:26:0"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 179,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "2019:4:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SimpleModularWallet_$250",
																								"typeString": "contract SimpleModularWallet"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SimpleModularWallet_$250",
																								"typeString": "contract SimpleModularWallet"
																							}
																						],
																						"id": 178,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2011:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 177,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "2011:7:0",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 180,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2011:13:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"arguments": [
																						{
																							"id": 174,
																							"name": "_module",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 135,
																							"src": "1997:7:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 173,
																						"name": "IModule",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 7,
																						"src": "1989:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IModule_$7_$",
																							"typeString": "type(contract IModule)"
																						}
																					},
																					"id": 175,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1989:16:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IModule_$7",
																						"typeString": "contract IModule"
																					}
																				},
																				"id": 176,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2006:4:0",
																				"memberName": "init",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 6,
																				"src": "1989:21:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
																					"typeString": "function (address) external"
																				}
																			},
																			"id": 181,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1989:36:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 182,
																		"nodeType": "ExpressionStatement",
																		"src": "1989:36:0"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"functionSelector": "1f17732d",
									"id": 205,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 140,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 139,
												"name": "onlyOwner",
												"nameLocations": [
													"1676:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "1676:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1676:9:0"
										}
									],
									"name": "authoriseModule",
									"nameLocation": "1621:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "_module",
												"nameLocation": "1645:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "1637:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1637:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "1659:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "1654:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 136,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1654:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1636:30:0"
									},
									"returnParameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1686:0:0"
									},
									"scope": 250,
									"src": "1612:625:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										16
									],
									"body": {
										"id": 237,
										"nodeType": "Block",
										"src": "2382:157:0",
										"statements": [
											{
												"assignments": [
													218,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 218,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2399:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 237,
														"src": "2394:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 217,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2394:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 225,
												"initialValue": {
													"arguments": [
														{
															"id": 223,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 211,
															"src": "2436:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_calldata_ptr",
																	"typeString": "bytes calldata"
																}
															],
															"expression": {
																"id": 219,
																"name": "_to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 207,
																"src": "2412:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 220,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2416:4:0",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2412:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 222,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 221,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 209,
																"src": "2428:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2412:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2412:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2393:49:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 227,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "2461:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "53573a2063616c6c206661696c6564",
															"id": 228,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2470:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc19d8883bb2e801289bdd58bca488d0c8dc93e6ecf585dcd9d940cedbf722a4",
																"typeString": "literal_string \"SW: call failed\""
															},
															"value": "SW: call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc19d8883bb2e801289bdd58bca488d0c8dc93e6ecf585dcd9d940cedbf722a4",
																"typeString": "literal_string \"SW: call failed\""
															}
														],
														"id": 226,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2453:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2453:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 230,
												"nodeType": "ExpressionStatement",
												"src": "2453:35:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 232,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 207,
															"src": "2512:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 233,
															"name": "_value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 209,
															"src": "2517:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 234,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 211,
															"src": "2525:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"id": 231,
														"name": "Invoked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 42,
														"src": "2504:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2504:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 236,
												"nodeType": "EmitStatement",
												"src": "2499:32:0"
											}
										]
									},
									"functionSelector": "8f6f0332",
									"id": 238,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 215,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 214,
												"name": "moduleOnly",
												"nameLocations": [
													"2371:10:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 72,
												"src": "2371:10:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2371:10:0"
										}
									],
									"name": "invoke",
									"nameLocation": "2295:6:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 213,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2362:8:0"
									},
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "2310:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2302:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2302:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "2323:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2315:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 208,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2315:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "2346:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2331:20:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 210,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2331:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:51:0"
									},
									"returnParameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2382:0:0"
									},
									"scope": 250,
									"src": "2286:253:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 248,
										"nodeType": "Block",
										"src": "2594:55:0",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 242,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2619:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 243,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2623:5:0",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "2619:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 244,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2630:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2634:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2630:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 241,
														"name": "Received",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "2610:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address)"
														}
													},
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2610:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 247,
												"nodeType": "EmitStatement",
												"src": "2605:36:0"
											}
										]
									},
									"id": 249,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2574:2:0"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2594:0:0"
									},
									"scope": 250,
									"src": "2567:82:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 251,
							"src": "506:2146:0",
							"usedErrors": [],
							"usedEvents": [
								34,
								42,
								48
							]
						}
					],
					"src": "35:2617:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}